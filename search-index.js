crystal_doc_search_index_callback({"repository_name":"github.com/RomainFranceschini/quartz","body":"# Quartz - A Crystal Modeling & Simulation Framework\n\n[![Build Status](https://travis-ci.org/RomainFranceschini/quartz.svg?branch=master)](https://travis-ci.org/RomainFranceschini/quartz)\n\nQuartz is a Crystal library for defining models and constructing discrete\nevent simulations.\n\nThe following features are supported:\n\n- Hierarchical models, through the coupling of sub-models via their input/output ports.\n- Discrete-event and discrete-time models.\n- Dynamic structure models.\n- A precise representation of the simulated time.\n- Heterogeneous models, *e.g.* coupling discrete-event and discrete-time models.\n- Model and / or ports observers.\n- Simulation hooks.\n\n## Documentation\n\n* [Docs](https://github.com/RomainFranceschini/quartz/wiki)\n* [API](https://romainfranceschini.github.io/quartz/)\n\n## Installation\n\n### Requirements\n\n* Crystal. Please refer to <http://crystal-lang.org/docs/installation> for\n  instructions for your operating system.\n\n### Setup\n\nCrystal applications and libraries are expected to have a `shard.yml` file\nat their root. Create a `shard.yml` file in your project's folder (or add to it) with the following contents:\n\n```yaml\ndependencies:\n  quartz:\n    github: RomainFranceschini/quartz\n```\n\nThen, resolve dependencies with shards (Crystal dependency manager) to install Quartz as a dependency of your project:\n\n```\n$ shards install\n```\n\n### Usage\n\nSee the [examples](examples) folder.\n\n## Underlying theory\n\nQuartz is based on the PDEVS (Parallel Discrete EVent System Specification) formalism and some of its extensions (DTSS, DSDE, multiPDEVS).\n\nThis project is developed by a research group at University of Corsica.\n\n### Related books/papers\n\n- Zeigler, Bernard P, Alexandre Muzy, and Ernesto Kofman. 2019. *Theory of Modeling and Simulation*. 3rd edition. Discrete Event & Iterative System Computational Foundations. Academic Press. [DOI: 10.1016/C2016-0-03987-6](https://doi.org/10.1016/C2016-0-03987-6).\n- Foures, Damien, Romain Franceschini, Paul-Antoine Bisgambiglia, et Bernard P. Zeigler. 2018. « *MultiPDEVS: A Parallel Multicomponent System Specification Formalism* ». Complexity 2018: 1‑19. [DOI: 10.1155/2018/3751917](https://doi.org/10.1155/2018/3751917).\n- Franceschini, Romain, Paul-Antoine Bisgambiglia, Paul Bisgambiglia, and David R. C. Hill. 2018. « *An Overview of the Quartz Modelling and Simulation Framework* ». In Proceedings of 8th International Conference on Simulation and Modeling Methodologies, Technologies and Applications, 120‑27. Porto, Portugal: SCITEPRESS - Science and Technology Publications. [DOI: 10.5220/0006864201200127](https://doi.org/10.5220/0006864201200127)\n- Goldstein, Rhys, Azam Khan, Olivier Dalle, et Gabriel Wainer. 2018. « *Multiscale Representation of Simulated Time* ». SIMULATION 94 (6): 519‑58. [DOI: 10.1177/0037549717726868](https://doi.org/10.1177/0037549717726868).\n\n### Alternatives\n\nMany other tools allow modeling and simulation based on the DEVS theory. Here is a non-exhaustive list:\n- [VLE](http://www.vle-project.org) (Virtual Laboratory Environment)\n- [ADEVS](http://web.ornl.gov/~1qn/adevs/)\n- [PythonPDEVS](http://msdl.cs.mcgill.ca/projects/DEVS/PythonPDEVS)\n- [CD++](http://cell-devs.sce.carleton.ca/mediawiki/index.php/Main_Page)\n- [PowerDEVS](https://sourceforge.net/projects/powerdevs/)\n- [DEVS-Suite](http://acims.asu.edu/software/devs-suite/)\n- [MS4Me](http://www.ms4systems.com)\n- [James II](http://jamesii.informatik.uni-rostock.de/jamesii.org/)\n\n## Contributors\n\n- [[RomainFranceschini]](https://github.com/RomainFranceschini) Romain Franceschini - creator, maintainer (University of Corsica Pasquale Paoli)\n\n## Contributing\n\n1. Fork it (https://github.com/RomainFranceschini/quartz/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new pull request.\n\n## License\n\nThis software is governed by the CeCILL-C license under French law and\nabiding by the rules of distribution of free software.  You can use,\nmodify and/ or redistribute the software under the terms of the CeCILL-C\nlicense as circulated by CEA, CNRS and INRIA at the following URL\n\"http://www.cecill.info\".\n\nThe fact that you are presently reading this means that you have had\nknowledge of the CeCILL-C license and that you accept its terms.\n","program":{"html_id":"github.com/RomainFranceschini/quartz/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/RomainFranceschini/quartz","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz","path":"Quartz.html","kind":"module","full_name":"Quartz","name":"Quartz","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/version.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/version.cr"},{"filename":"quartz/types.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/types.cr"},{"filename":"quartz/scale.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr"},{"filename":"quartz/duration.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr"},{"filename":"quartz/time_point.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr"},{"filename":"quartz/event_set.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr"},{"filename":"quartz/time_cache.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr"},{"filename":"quartz/comparison.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/comparison.cr"},{"filename":"quartz/state.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr"},{"filename":"quartz/any.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr"},{"filename":"quartz/list.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr"},{"filename":"quartz/logging.cr","line_number":12,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr"},{"filename":"quartz/errors.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"},{"filename":"quartz/observer.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr"},{"filename":"quartz/hooks.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr"},{"filename":"quartz/verifiers/checker.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr"},{"filename":"quartz/verifiers/presence.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/presence.cr"},{"filename":"quartz/verifiers/numericality.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr"},{"filename":"quartz/verifiable.cr","line_number":5,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr"},{"filename":"quartz/port.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr"},{"filename":"quartz/coupleable.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr"},{"filename":"quartz/coupler.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr"},{"filename":"quartz/transitions.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr"},{"filename":"quartz/priority_queues/binary_heap.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr"},{"filename":"quartz/priority_queues/ladder_queue.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/ladder_queue.cr"},{"filename":"quartz/priority_queues/calendar_queue.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr"},{"filename":"quartz/priority_queues/fibonacci_heap.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr"},{"filename":"quartz/priority_queues/heap_set.cr","line_number":16,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr"},{"filename":"quartz/model.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr"},{"filename":"quartz/atomic.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr"},{"filename":"quartz/coupled.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr"},{"filename":"quartz/behaviors/passive.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr"},{"filename":"quartz/simulable.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr"},{"filename":"quartz/processor.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr"},{"filename":"quartz/simulator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr"},{"filename":"quartz/coordinator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr"},{"filename":"quartz/root.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr"},{"filename":"quartz/dsde/executive.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr"},{"filename":"quartz/dsde/coupled.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coupled.cr"},{"filename":"quartz/dsde/coordinator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coordinator.cr"},{"filename":"quartz/dsde/root.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr"},{"filename":"quartz/multi_component/component.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr"},{"filename":"quartz/multi_component/model.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr"},{"filename":"quartz/multi_component/simulator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr"},{"filename":"quartz/dtss/time_base.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/time_base.cr"},{"filename":"quartz/visitor.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr"},{"filename":"quartz/processor_allocator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr"},{"filename":"quartz/dot_visitor.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr"},{"filename":"quartz/direct_connection_visitor.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr"},{"filename":"quartz/simulation.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr"},{"filename":"quartz.cr","line_number":40,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ALLOWED_SCALE_UNITS","name":"ALLOWED_SCALE_UNITS","value":"[\"yocto\", \"zepto\", \"atto\", \"femto\", \"pico\", \"nano\", \"micro\", \"milli\", \"base\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]","doc":null,"summary":null},{"id":"FORMATTER","name":"FORMATTER","value":"::Log::Formatter.new do |entry, io|\n  message = entry.message\n  colorize = (@@colors && io.tty?) && Colorize.enabled?\n  if colorize\n    color = LOGGER_COLORS.fetch(entry.severity, :default)\n    io << ((entry.timestamp.to_s(\"(%T:%L)\")).colorize(color))\n    (io << (\" ❯ \".colorize(:black))) << message\n  else\n    ((io << entry.severity.label[0]) << \": \") << (entry.timestamp.to_s(\"(%T:%L)\"))\n    (io << \" ❯ \") << message\n  end\nend","doc":null,"summary":null},{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null},{"id":"MAJOR","name":"MAJOR","value":"0_u8","doc":"The major version number","summary":"<p>The major version number</p>"},{"id":"MINOR","name":"MINOR","value":"6_u8","doc":"The minor version number","summary":"<p>The minor version number</p>"},{"id":"PATCH","name":"PATCH","value":"0_u8","doc":"The patch version number","summary":"<p>The patch version number</p>"},{"id":"VERSION","name":"VERSION","value":"[MAJOR, MINOR, PATCH].compact.join('.')","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"colorize_logs=(value:Bool)-class-method","html_id":"colorize_logs=(value:Bool)-class-method","name":"colorize_logs=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L17","def":{"name":"colorize_logs=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@colors = value"}},{"id":"set_debug_log_level-class-method","html_id":"set_debug_log_level-class-method","name":"set_debug_log_level","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L59","def":{"name":"set_debug_log_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.level = ::Log::Severity::Debug"}},{"id":"set_io_log_backend-class-method","html_id":"set_io_log_backend-class-method","name":"set_io_log_backend","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L49","def":{"name":"set_io_log_backend","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.backend = Log::IOBackend.new.tap do |backend|\n  backend.formatter = Quartz::FORMATTER\nend"}},{"id":"set_no_log_backend-class-method","html_id":"set_no_log_backend-class-method","name":"set_no_log_backend","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L45","def":{"name":"set_no_log_backend","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.backend = nil"}},{"id":"set_warning_log_level-class-method","html_id":"set_warning_log_level-class-method","name":"set_warning_log_level","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L55","def":{"name":"set_warning_log_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Log.level = ::Log::Severity::Warning"}},{"id":"timing(label,display_memory=true,padding_size=34,&)-class-method","html_id":"timing(label,display_memory=true,padding_size=34,&amp;)-class-method","name":"timing","doc":null,"summary":null,"abstract":false,"args":[{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""},{"name":"display_memory","doc":null,"default_value":"true","external_name":"display_memory","restriction":""},{"name":"padding_size","doc":null,"default_value":"34","external_name":"padding_size","restriction":""}],"args_string":"(label, display_memory = <span class=\"n\">true</span>, padding_size = <span class=\"n\">34</span>, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/logging.cr#L63","def":{"name":"timing","args":[{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":""},{"name":"display_memory","doc":null,"default_value":"true","external_name":"display_memory","restriction":""},{"name":"padding_size","doc":null,"default_value":"34","external_name":"padding_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"start_time = Time.monotonic\nretval = yield\nLog.info do\n  elapsed_time = Time.monotonic - start_time\n  io = IO::Memory.new\n  io.print(\"%-*s\" % {padding_size, \"#{label}:\"})\n  if display_memory\n    heap_size = GC.stats.heap_size\n    mb = (heap_size / 1024.0) / 1024.0\n    io.print(\" %s (%7.2fMB)\" % {elapsed_time, mb})\n  else\n    io.print(\" %s\" % elapsed_time)\n  end\n  io.to_s\nend\nretval\n"}},{"id":"version-class-method","html_id":"version-class-method","name":"version","doc":"Returns the current version","summary":"<p>Returns the current version</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz.cr#L42","def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"VERSION"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"duration(length,unit=&quot;base&quot;)-macro","html_id":"duration(length,unit=&amp;quot;base&amp;quot;)-macro","name":"duration","doc":"The `duration` macro is syntax sugar to construct a new `Duration` struct.\n\n### Usage\n\n`duration` must receive a number literal along with an optional scale unit.\nThe scale unit can be specified with a constant expression (e.g. 'kilo'), or\nwith a `Scale` struct.\n\n```\nduration(2)                # => Duration.new(2, Scale::BASE)\nduration(2, Scale.new(76)) # => Duration.new(2, Scale.new(76))\nduration(2, Scale::KILO)   # => Duration.new(2, Scale::KILO)\nduration(2, kilo)          # => Duration.new(2, Scale::KILO)\n```\n\nIf specified with a constant expression, the unit argument can be a string\nliteral, a symbol literal or a plain name.\n\n```\nduration(2, kilo)\nduration(2, 'kilo')\nduration(2, :kilo)\n```","summary":"<p>The <code><a href=\"Quartz.html#duration(length,unit=&quot;base&quot;)-macro\">duration</a></code> macro is syntax sugar to construct a new <code><a href=\"Quartz/Duration.html\">Duration</a></code> struct.</p>","abstract":false,"args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":""},{"name":"unit","doc":null,"default_value":"\"base\"","external_name":"unit","restriction":""}],"args_string":"(length, unit = <span class=\"s\">&quot;base&quot;</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L343","def":{"name":"duration","args":[{"name":"length","doc":null,"default_value":"","external_name":"length","restriction":""},{"name":"unit","doc":null,"default_value":"\"base\"","external_name":"unit","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if ALLOWED_SCALE_UNITS.includes?(unit.id.stringify) %}\n      Quartz::Duration.new({{ length }}, Quartz::Scale::{{ unit.id.upcase }})\n    {% else %}\n      Quartz::Duration.new({{ length }}, {{ unit }})\n    {% end %}\n\n  \n"}}],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Any","path":"Quartz/Any.html","kind":"struct","full_name":"Quartz::Any","name":"Any","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/RomainFranceschini/quartz/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/any.cr","line_number":10,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"`Any` is a convenient wrapper around all possible Quartz types (`Any::Type`).\nIt is used to denote all types that may be transmitted between two `Port`s\nthrough couplings.\n\n`Any` is used internally to store the outputs generated by atomic models\nbefore presenting them to their receivers.","summary":"<p><code><a href=\"../Quartz/Any.html\">Any</a></code> is a convenient wrapper around all possible Quartz types (<code><a href=\"../Quartz/Any/Type.html\">Any::Type</a></code>).</p>","class_methods":[],"constructors":[{"id":"array(initial_capacity:Int=0):self-class-method","html_id":"array(initial_capacity:Int=0):self-class-method","name":"array","doc":"Creates a `Any` value that wraps a new `Array`","summary":"<p>Creates a <code><a href=\"../Quartz/Any.html\">Any</a></code> value that wraps a new <code>Array</code></p>","abstract":false,"args":[{"name":"initial_capacity","doc":null,"default_value":"0","external_name":"initial_capacity","restriction":"Int"}],"args_string":"(initial_capacity : Int = <span class=\"n\">0</span>) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L32","def":{"name":"array","args":[{"name":"initial_capacity","doc":null,"default_value":"0","external_name":"initial_capacity","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Any.new(Array(Any).new(initial_capacity))"}},{"id":"build_array(initial_capacity:Int=0,&):self-class-method","html_id":"build_array(initial_capacity:Int=0,&amp;):self-class-method","name":"build_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_capacity","doc":null,"default_value":"0","external_name":"initial_capacity","restriction":"Int"}],"args_string":"(initial_capacity : Int = <span class=\"n\">0</span>, &) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L48","def":{"name":"build_array","args":[{"name":"initial_capacity","doc":null,"default_value":"0","external_name":"initial_capacity","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"self","visibility":"Public","body":"ary = Array(Any).new(initial_capacity)\nany = Any.new(ary)\nyield any\nany\n"}},{"id":"build_hash(default_block:Hash(K,V),K->V?=nil,initial_capacity=nil,&):self-class-method","html_id":"build_hash(default_block:Hash(K,V),K-&gt;V?=nil,initial_capacity=nil,&amp;):self-class-method","name":"build_hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"default_block","doc":null,"default_value":"nil","external_name":"default_block","restriction":"(Hash(K, V), K -> V) | ::Nil"},{"name":"initial_capacity","doc":null,"default_value":"nil","external_name":"initial_capacity","restriction":""}],"args_string":"(default_block : Hash(K, V), K -> V? = <span class=\"n\">nil</span>, initial_capacity = <span class=\"n\">nil</span>, &) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L41","def":{"name":"build_hash","args":[{"name":"default_block","doc":null,"default_value":"nil","external_name":"default_block","restriction":"(Hash(K, V), K -> V) | ::Nil"},{"name":"initial_capacity","doc":null,"default_value":"nil","external_name":"initial_capacity","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"self","visibility":"Public","body":"hash = Hash(Any, Any).new(default_block, initial_capacity: initial_capacity)\nany = Any.new(hash)\nyield any\nany\n"}},{"id":"hash(default_block:Hash(K,V),K->V?=nil,initial_capacity=nil):self-class-method","html_id":"hash(default_block:Hash(K,V),K-&gt;V?=nil,initial_capacity=nil):self-class-method","name":"hash","doc":"Creates a `Any` value that wraps a new `Hash`","summary":"<p>Creates a <code><a href=\"../Quartz/Any.html\">Any</a></code> value that wraps a new <code>Hash</code></p>","abstract":false,"args":[{"name":"default_block","doc":null,"default_value":"nil","external_name":"default_block","restriction":"(Hash(K, V), K -> V) | ::Nil"},{"name":"initial_capacity","doc":null,"default_value":"nil","external_name":"initial_capacity","restriction":""}],"args_string":"(default_block : Hash(K, V), K -> V? = <span class=\"n\">nil</span>, initial_capacity = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L37","def":{"name":"hash","args":[{"name":"default_block","doc":null,"default_value":"nil","external_name":"default_block","restriction":"(Hash(K, V), K -> V) | ::Nil"},{"name":"initial_capacity","doc":null,"default_value":"nil","external_name":"initial_capacity","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Any.new(Hash(Any, Any).new(default_block, initial_capacity: initial_capacity))"}},{"id":"new(raw:Type)-class-method","html_id":"new(raw:Type)-class-method","name":"new","doc":"Creates a `Any` value that wraps the given value.","summary":"<p>Creates a <code><a href=\"../Quartz/Any.html\">Any</a></code> value that wraps the given value.</p>","abstract":false,"args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Type"}],"args_string":"(raw : Type)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L56","def":{"name":"new","args":[{"name":"raw","doc":null,"default_value":"","external_name":"raw","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(raw)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"<<(value:Any):Any-instance-method","html_id":"&lt;&lt;(value:Any):Any-instance-method","name":"<<","doc":"Assumes the underlying value is a `Array` and appends the given value at the\nend of the array.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is a <code>Array</code> and appends the given value at the end of the array.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"args_string":"(value : Any) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L173","def":{"name":"<<","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Array\n  object << value\nelse\n  raise(\"Expected Array for #<<(value : Any), not #{object.class}\")\nend\nself\n"}},{"id":"<<(value:Any::Type):Any-instance-method","html_id":"&lt;&lt;(value:Any::Type):Any-instance-method","name":"<<","doc":"Assumes the underlying value is a `Array` and appends the given value at the\nend of the array.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is a <code>Array</code> and appends the given value at the end of the array.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"args_string":"(value : Any::Type) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L186","def":{"name":"<<","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"self << (Any.new(value))"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns true if the raw object is equal to *other*.","summary":"<p>Returns true if the raw object is equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L234","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raw == other"}},{"id":"==(other:Quartz::Any)-instance-method","html_id":"==(other:Quartz::Any)-instance-method","name":"==","doc":"Returns true if both `self` and *other*'s raw object are equal.","summary":"<p>Returns true if both <code>self</code> and <em>other</em>'s raw object are equal.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Quartz::Any"}],"args_string":"(other : Quartz::Any)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L229","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Quartz::Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raw == other.raw"}},{"id":"[](key:Any):Any-instance-method","html_id":"[](key:Any):Any-instance-method","name":"[]","doc":"Assumes the underlying value is a `Hash` and returns the element with the\ngiven key.\n\nRaises if the underlying value is not a `Hash`.","summary":"<p>Assumes the underlying value is a <code>Hash</code> and returns the element with the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"}],"args_string":"(key : Any) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L91","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Hash\n  object[key]\nelse\n  raise(\"Expected Hash for #[](key : Any), not #{object.class}\")\nend"}},{"id":"[](key:Any::Type):Any-instance-method","html_id":"[](key:Any::Type):Any-instance-method","name":"[]","doc":"Assumes the underlying value is a `Hash` or `Array` and returns the element\nwith the given index or key.\n\nRaises if the underlying value is not a `Hash` or `Array`.","summary":"<p>Assumes the underlying value is a <code>Hash</code> or <code>Array</code> and returns the element with the given index or key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"}],"args_string":"(key : Any::Type) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L104","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Array\n  if key.is_a?(Int)\n    object[key]\n  else\n    raise(\"Expected integer key for Array for #[](index), not #{key.class}\")\n  end\nwhen Hash\n  object[Any.new(key)]\nelse\n  raise(\"Expected Array or Hash for #[](index), not #{object.class}\")\nend"}},{"id":"[]=(key:Any,value:Any):Any-instance-method","html_id":"[]=(key:Any,value:Any):Any-instance-method","name":"[]=","doc":"Assumes the underlying value is a `Hash` and sets the given value at the\ngiven key.","summary":"<p>Assumes the underlying value is a <code>Hash</code> and sets the given value at the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"args_string":"(key : Any, value : Any) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L192","def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Hash\n  object[key] = value\nelse\n  raise(\"Expected Hash for #[](index : Any, value : Any), not #{object.class}\")\nend"}},{"id":"[]=(index:Int,value:Any):Any-instance-method","html_id":"[]=(index:Int,value:Any):Any-instance-method","name":"[]=","doc":"Assumes the underlying value is a `Array` and sets the given value at the\ngiven index.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is a <code>Array</code> and sets the given value at the given index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"args_string":"(index : Int, value : Any) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L154","def":{"name":"[]=","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Array\n  object[index] = value\nelse\n  raise(\"Expected Array for #[](index : Int, value : Any), not #{object.class}\")\nend"}},{"id":"[]=(index:Int,value:Any::Type):Any-instance-method","html_id":"[]=(index:Int,value:Any::Type):Any-instance-method","name":"[]=","doc":"Assumes the underlying value is a `Array` and sets the given value at the\ngiven index.\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is a <code>Array</code> and sets the given value at the given index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"args_string":"(index : Int, value : Any::Type) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L166","def":{"name":"[]=","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"self[index] = Any.new(value)"}},{"id":"[]=(key:Any,value:Any::Type):Any-instance-method","html_id":"[]=(key:Any,value:Any::Type):Any-instance-method","name":"[]=","doc":"Assumes the underlying value is a `Hash` and sets the given value at the\ngiven key.","summary":"<p>Assumes the underlying value is a <code>Hash</code> and sets the given value at the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"args_string":"(key : Any, value : Any::Type) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L203","def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"self[key] = Any.new(value)"}},{"id":"[]=(key:Any::Type,value:Any::Type):Any-instance-method","html_id":"[]=(key:Any::Type,value:Any::Type):Any-instance-method","name":"[]=","doc":"Assumes the underlying value is a `Hash` and sets the given value at the\ngiven key.","summary":"<p>Assumes the underlying value is a <code>Hash</code> and sets the given value at the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"args_string":"(key : Any::Type, value : Any::Type) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L209","def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"self[Any.new(key)] = Any.new(value)"}},{"id":"[]?(index:Int):Any?-instance-method","html_id":"[]?(index:Int):Any?-instance-method","name":"[]?","doc":"Assumes the underlying value is an `Array` and returns the element at the\ngiven index, or `nil` if out of bounds.\n\nRaises if the underlying value is not an `Array`.","summary":"<p>Assumes the underlying value is an <code>Array</code> and returns the element at the given index, or <code>nil</code> if out of bounds.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Any?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L78","def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any | ::Nil","visibility":"Public","body":"case object = @raw\nwhen Array\n  object[index]?\nelse\n  raise(\"Expected Array for #[](index : Int), not #{object.class}\")\nend"}},{"id":"[]?(key:Any::Type):Any?-instance-method","html_id":"[]?(key:Any::Type):Any?-instance-method","name":"[]?","doc":"Assumes the underlying value is a `Hash` or `Array` and returns the element\nwith the given index or key.\n\nRaises if the underlying value is not a `Hash` or `Array`.","summary":"<p>Assumes the underlying value is a <code>Hash</code> or <code>Array</code> and returns the element with the given index or key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"}],"args_string":"(key : Any::Type) : Any?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L123","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any::Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any | ::Nil","visibility":"Public","body":"case object = @raw\nwhen Array\n  if key.is_a?(Int)\n    object[key]?\n  else\n    raise(\"Expected integer key for Array for #[](index), not #{key.class}\")\n  end\nwhen Hash\n  object[Any.new(key)]?\nelse\n  raise(\"Expected Array or Hash for #[](index), not #{object.class}\")\nend"}},{"id":"[]?(key:Any):Any-instance-method","html_id":"[]?(key:Any):Any-instance-method","name":"[]?","doc":"Assumes the underlying value is a `Hash` and returns the element with the\ngiven key, or `nil` if the key is not present.\n\nRaises if the underlying value is not a `Hash`.","summary":"<p>Assumes the underlying value is a <code>Hash</code> and returns the element with the given key, or <code>nil</code> if the key is not present.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"}],"args_string":"(key : Any) : Any","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L142","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Any"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Any","visibility":"Public","body":"case object = @raw\nwhen Hash\n  object[key]?\nelse\n  raise(\"Expected Hash for #[](key : Any), not #{object.class}\")\nend"}},{"id":"as_a:Array(Any)-instance-method","html_id":"as_a:Array(Any)-instance-method","name":"as_a","doc":"Checks that the underlying value is `Array`, and returns its value. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Array</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Array(Any)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L418","def":{"name":"as_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Any)","visibility":"Public","body":"@raw.as(Array)"}},{"id":"as_a?:Array(Any)?-instance-method","html_id":"as_a?:Array(Any)?-instance-method","name":"as_a?","doc":"Checks that the underlying value is `Array`, and returns its value. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Array</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Array(Any)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L423","def":{"name":"as_a?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Any) | ::Nil","visibility":"Public","body":"if @raw.is_a?(Array)\n  as_a\nend"}},{"id":"as_bool:Bool-instance-method","html_id":"as_bool:Bool-instance-method","name":"as_bool","doc":"Checks that the underlying value is `Bool`, and returns its value. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Bool</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L244","def":{"name":"as_bool","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@raw.as(Bool)"}},{"id":"as_bool?:Bool?-instance-method","html_id":"as_bool?:Bool?-instance-method","name":"as_bool?","doc":"Checks that the underlying value is `Bool`, and returns its value. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Bool</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Bool?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L249","def":{"name":"as_bool?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool | Nil","visibility":"Public","body":"if @raw.is_a?(Bool)\n  as_bool\nend"}},{"id":"as_c:Char-instance-method","html_id":"as_c:Char-instance-method","name":"as_c","doc":"Checks that the underlying value is `Char`, and returns its value. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Char</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Char","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L398","def":{"name":"as_c","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"@raw.as(Char)"}},{"id":"as_c?:Char?-instance-method","html_id":"as_c?:Char?-instance-method","name":"as_c?","doc":"Checks that the underlying value is `Char`, and returns its value. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Char</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Char?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L403","def":{"name":"as_c?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char | Nil","visibility":"Public","body":"if @raw.is_a?(Char)\n  as_s\nend"}},{"id":"as_f:Float64-instance-method","html_id":"as_f:Float64-instance-method","name":"as_f","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L267","def":{"name":"as_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@raw.as(Float)).to_f"}},{"id":"as_f32:Float32-instance-method","html_id":"as_f32:Float32-instance-method","name":"as_f32","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float32`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float32</code>.</p>","abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L388","def":{"name":"as_f32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"(@raw.as(Float32)).to_f32"}},{"id":"as_f32?:Float32?-instance-method","html_id":"as_f32?:Float32?-instance-method","name":"as_f32?","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float32`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float32</code>.</p>","abstract":false,"args":[],"args_string":" : Float32?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L393","def":{"name":"as_f32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32 | Nil","visibility":"Public","body":"if (@raw.is_a?(Float32) || @raw.is_a?(Float64))\n  as_f32\nend"}},{"id":"as_f64:Float64-instance-method","html_id":"as_f64:Float64-instance-method","name":"as_f64","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L378","def":{"name":"as_f64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@raw.as(Float64)).to_f64"}},{"id":"as_f64?:Float64?-instance-method","html_id":"as_f64?:Float64?-instance-method","name":"as_f64?","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L383","def":{"name":"as_f64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | Nil","visibility":"Public","body":"if @raw.is_a?(Float64)\n  as_f64\nend"}},{"id":"as_f?:Float64?-instance-method","html_id":"as_f?:Float64?-instance-method","name":"as_f?","doc":"Checks that the underlying value is `Float`, and returns its value as an `Float64`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code>Float</code>, and returns its value as an <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":" : Float64?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L273","def":{"name":"as_f?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if @raw.is_a?(Float64)\n  as_f\nend"}},{"id":"as_h:Hash(Any,Any)-instance-method","html_id":"as_h:Hash(Any,Any)-instance-method","name":"as_h","doc":"Checks that the underlying value is `Hash`, and returns its value. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Hash</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Hash(Any, Any)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L428","def":{"name":"as_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Any, Any)","visibility":"Public","body":"@raw.as(Hash)"}},{"id":"as_h?:Hash(Any,Any)?-instance-method","html_id":"as_h?:Hash(Any,Any)?-instance-method","name":"as_h?","doc":"Checks that the underlying value is `Hash`, and returns its value. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Hash</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : Hash(Any, Any)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L433","def":{"name":"as_h?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Any, Any) | ::Nil","visibility":"Public","body":"if @raw.is_a?(Hash)\n  as_h\nend"}},{"id":"as_i:Int32-instance-method","html_id":"as_i:Int32-instance-method","name":"as_i","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`.\nRaises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L255","def":{"name":"as_i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(@raw.as(Int)).to_i"}},{"id":"as_i128:Int128-instance-method","html_id":"as_i128:Int128-instance-method","name":"as_i128","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int128`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int128</code>.</p>","abstract":false,"args":[],"args_string":" : Int128","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L368","def":{"name":"as_i128","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int128","visibility":"Public","body":"(@raw.as(Int128)).to_i64"}},{"id":"as_i128?:Int128?-instance-method","html_id":"as_i128?:Int128?-instance-method","name":"as_i128?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int128`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int128</code>.</p>","abstract":false,"args":[],"args_string":" : Int128?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L373","def":{"name":"as_i128?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int128 | Nil","visibility":"Public","body":"if @raw.is_a?(Int128)\n  as_i128\nend"}},{"id":"as_i16:Int16-instance-method","html_id":"as_i16:Int16-instance-method","name":"as_i16","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int16`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int16</code>.</p>","abstract":false,"args":[],"args_string":" : Int16","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L338","def":{"name":"as_i16","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16","visibility":"Public","body":"(@raw.as(Int16)).to_i16"}},{"id":"as_i16?:Int16?-instance-method","html_id":"as_i16?:Int16?-instance-method","name":"as_i16?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int16`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int16</code>.</p>","abstract":false,"args":[],"args_string":" : Int16?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L343","def":{"name":"as_i16?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16 | Nil","visibility":"Public","body":"if @raw.is_a?(Int16)\n  as_i16\nend"}},{"id":"as_i32:Int32-instance-method","html_id":"as_i32:Int32-instance-method","name":"as_i32","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L348","def":{"name":"as_i32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(@raw.as(Int32)).to_i32"}},{"id":"as_i32?:Int32?-instance-method","html_id":"as_i32?:Int32?-instance-method","name":"as_i32?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L353","def":{"name":"as_i32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | Nil","visibility":"Public","body":"if @raw.is_a?(Int32)\n  as_i32\nend"}},{"id":"as_i64:Int64-instance-method","html_id":"as_i64:Int64-instance-method","name":"as_i64","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int64`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int64</code>.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L358","def":{"name":"as_i64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"(@raw.as(Int64)).to_i64"}},{"id":"as_i64?:Int64?-instance-method","html_id":"as_i64?:Int64?-instance-method","name":"as_i64?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int64`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int64</code>.</p>","abstract":false,"args":[],"args_string":" : Int64?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L363","def":{"name":"as_i64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64 | Nil","visibility":"Public","body":"if @raw.is_a?(Int64)\n  as_i64\nend"}},{"id":"as_i8:Int8-instance-method","html_id":"as_i8:Int8-instance-method","name":"as_i8","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int8`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int8</code>.</p>","abstract":false,"args":[],"args_string":" : Int8","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L328","def":{"name":"as_i8","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int8","visibility":"Public","body":"(@raw.as(Int8)).to_i8"}},{"id":"as_i8?:Int8?-instance-method","html_id":"as_i8?:Int8?-instance-method","name":"as_i8?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int8`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int8</code>.</p>","abstract":false,"args":[],"args_string":" : Int8?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L333","def":{"name":"as_i8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int8 | Nil","visibility":"Public","body":"if @raw.is_a?(Int8)\n  as_i8\nend"}},{"id":"as_i?:Int32?-instance-method","html_id":"as_i?:Int32?-instance-method","name":"as_i?","doc":"Checks that the underlying value is `Int`, and returns its value as an `Int32`.\nReturns `nil` otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":" : Int32?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L261","def":{"name":"as_i?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"if @raw.is_a?(Int)\n  as_i\nend"}},{"id":"as_nil:Nil-instance-method","html_id":"as_nil:Nil-instance-method","name":"as_nil","doc":"Checks that the underlying value is `Nil`, and returns `nil`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Nil</code>, and returns <code>nil</code>.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L239","def":{"name":"as_nil","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@raw.as(Nil)"}},{"id":"as_s:String-instance-method","html_id":"as_s:String-instance-method","name":"as_s","doc":"Checks that the underlying value is `String`, and returns its value. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>String</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L408","def":{"name":"as_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@raw.as(String)"}},{"id":"as_s?:String?-instance-method","html_id":"as_s?:String?-instance-method","name":"as_s?","doc":"Checks that the underlying value is `String`, and returns its value. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>String</code>, and returns its value.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L413","def":{"name":"as_s?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Nil","visibility":"Public","body":"if @raw.is_a?(String)\n  as_s\nend"}},{"id":"as_sym:Symbol-instance-method","html_id":"as_sym:Symbol-instance-method","name":"as_sym","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L437","def":{"name":"as_sym","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"@raw.as(Symbol)"}},{"id":"as_sym?:Symbol?-instance-method","html_id":"as_sym?:Symbol?-instance-method","name":"as_sym?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L441","def":{"name":"as_sym?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol | Nil","visibility":"Public","body":"if @raw.is_a?(Symbol)\n  as_sym\nend"}},{"id":"as_u128:UInt64-instance-method","html_id":"as_u128:UInt64-instance-method","name":"as_u128","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt64`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L318","def":{"name":"as_u128","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"(@raw.as(UInt128)).to_u128"}},{"id":"as_u128?:UInt64?-instance-method","html_id":"as_u128?:UInt64?-instance-method","name":"as_u128?","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt64`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L323","def":{"name":"as_u128?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64 | Nil","visibility":"Public","body":"if @raw.is_a?(UInt128)\n  as_u128\nend"}},{"id":"as_u16:UInt16-instance-method","html_id":"as_u16:UInt16-instance-method","name":"as_u16","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt16`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt16</code>.</p>","abstract":false,"args":[],"args_string":" : UInt16","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L288","def":{"name":"as_u16","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"(@raw.as(UInt16)).to_u16"}},{"id":"as_u16?:UInt16?-instance-method","html_id":"as_u16?:UInt16?-instance-method","name":"as_u16?","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt16`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt16</code>.</p>","abstract":false,"args":[],"args_string":" : UInt16?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L293","def":{"name":"as_u16?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16 | Nil","visibility":"Public","body":"if @raw.is_a?(UInt16)\n  as_u16\nend"}},{"id":"as_u32:UInt32-instance-method","html_id":"as_u32:UInt32-instance-method","name":"as_u32","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt32`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt32</code>.</p>","abstract":false,"args":[],"args_string":" : UInt32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L298","def":{"name":"as_u32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"(@raw.as(UInt32)).to_u32"}},{"id":"as_u32?:UInt32?-instance-method","html_id":"as_u32?:UInt32?-instance-method","name":"as_u32?","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt32`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt32</code>.</p>","abstract":false,"args":[],"args_string":" : UInt32?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L303","def":{"name":"as_u32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32 | Nil","visibility":"Public","body":"if @raw.is_a?(UInt32)\n  as_u32\nend"}},{"id":"as_u64:UInt64-instance-method","html_id":"as_u64:UInt64-instance-method","name":"as_u64","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt64`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L308","def":{"name":"as_u64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"(@raw.as(UInt64)).to_u64"}},{"id":"as_u64?:UInt64?-instance-method","html_id":"as_u64?:UInt64?-instance-method","name":"as_u64?","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt64`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt64</code>.</p>","abstract":false,"args":[],"args_string":" : UInt64?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L313","def":{"name":"as_u64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64 | Nil","visibility":"Public","body":"if @raw.is_a?(UInt64)\n  as_u64\nend"}},{"id":"as_u8:UInt8-instance-method","html_id":"as_u8:UInt8-instance-method","name":"as_u8","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt8`. Raises otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt8</code>.</p>","abstract":false,"args":[],"args_string":" : UInt8","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L278","def":{"name":"as_u8","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt8","visibility":"Public","body":"(@raw.as(UInt8)).to_u8"}},{"id":"as_u8?:UInt8?-instance-method","html_id":"as_u8?:UInt8?-instance-method","name":"as_u8?","doc":"Checks that the underlying value is `Int`, and returns its value as an `UInt8`. Returns nil otherwise.","summary":"<p>Checks that the underlying value is <code>Int</code>, and returns its value as an <code>UInt8</code>.</p>","abstract":false,"args":[],"args_string":" : UInt8?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L283","def":{"name":"as_u8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt8 | Nil","visibility":"Public","body":"if @raw.is_a?(UInt8)\n  as_u8\nend"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L60","def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = @raw.hash(hasher)\nhasher\n"}},{"id":"raw:Type-instance-method","html_id":"raw:Type-instance-method","name":"raw","doc":"Returns the raw underlying value.","summary":"<p>Returns the raw underlying value.</p>","abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L29","def":{"name":"raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@raw"}},{"id":"size:Int-instance-method","html_id":"size:Int-instance-method","name":"size","doc":"Assumes the underlying value is an `Array` or `Hash` and returns\nits size.\nRaises if the underlying value is not an `Array` or `Hash`.","summary":"<p>Assumes the underlying value is an <code>Array</code> or <code>Hash</code> and returns its size.</p>","abstract":false,"args":[],"args_string":" : Int","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr#L65","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"case object = @raw\nwhen Array, Hash\n  object.size\nelse\n  raise(\"expected Array or Hash for #size, not #{object.class}\")\nend"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Any/Type","path":"Quartz/Any/Type.html","kind":"alias","full_name":"Quartz::Any::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/any.cr","line_number":15,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/any.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":true,"aliased":"(Array(Quartz::Any) | Bool | Char | Float32 | Float64 | Hash(Quartz::Any, Quartz::Any) | Int16 | Int32 | Int64 | Int8 | Quartz::Duration | Quartz::State | Quartz::TimePoint | Quartz::Transferable | String | Symbol | UInt16 | UInt32 | UInt64 | UInt8 | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Any","kind":"struct","full_name":"Quartz::Any","name":"Any"},"doc":"All possible Quartz types.\n\nSee the `Transferable` marker module to extend the list of transferable\ntypes.","summary":"<p>All possible Quartz types.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","path":"Quartz/AtomicModel.html","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/atomic.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_CHECKS","name":"STATE_CHECKS","value":"{state_complete: false}","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/Executive","kind":"class","full_name":"Quartz::DSDE::Executive","name":"Executive"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represent a PDEVS atomic model.","summary":"<p>This class represent a PDEVS atomic model.</p>","class_methods":[{"id":"check(*attributes:Symbol,**kwargs)-class-method","html_id":"check(*attributes:Symbol,**kwargs)-class-method","name":"check","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(*attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L7","def":{"name":"check","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if kwargs.empty?\n  raise(ArgumentError.new(\"You must inform at least one verification rule\"))\nend\nkwargs.each do |name, value|\n  verifier = case name\n  when :presence\n    if value.is_a?(NamedTuple)\n      Verifiers::PresenceChecker.new(*attributes, **value)\n    else\n      Verifiers::PresenceChecker.new(*attributes)\n    end\n  when :numericality\n    if value.is_a?(NamedTuple)\n      Verifiers::NumericalityChecker.new(*attributes, **value)\n    else\n      Verifiers::NumericalityChecker.new(*attributes)\n    end\n  else\n    raise(ArgumentError.new(\"Unknown verifier \\\"#{name}\\\"\"))\n  end\n  verifiers.push(verifier)\nend\n"}},{"id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::RuntimeChecker\n  def validate(model)\n    if some_test\n      model.errors.add(:phase, \"This model state is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">RuntimeValidator</span>.<span class=\"k\">class</span>, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L7","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(**kwargs)\nverifiers.push(verifier)\n"}},{"id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::EachChecker\n  def check_each(model, attribute, value)\n    if some_test\n      model.errors.add(attribute, \"This model attribute is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">EachChecker</span>.<span class=\"k\">class</span>, *attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L7","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(*attributes, **kwargs)\nverifiers.push(verifier)\n"}},{"id":"clear_verifiers-class-method","html_id":"clear_verifiers-class-method","name":"clear_verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L7","def":{"name":"clear_verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers.try(&.clear)"}},{"id":"precision_level:Scale-class-method","html_id":"precision_level:Scale-class-method","name":"precision_level","doc":"The precision associated with the model.","summary":"<p>The precision associated with the model.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L10","def":{"name":"precision_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@precision_level"}},{"id":"precision_level=(precision_level:Scale)-class-method","html_id":"precision_level=(precision_level:Scale)-class-method","name":"precision_level=","doc":"The precision associated with the model.","summary":"<p>The precision associated with the model.</p>","abstract":false,"args":[{"name":"precision_level","doc":null,"default_value":"","external_name":"precision_level","restriction":"Scale"}],"args_string":"(precision_level : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L10","def":{"name":"precision_level=","args":[{"name":"precision_level","doc":null,"default_value":"","external_name":"precision_level","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@precision_level = precision_level"}},{"id":"verifiers-class-method","html_id":"verifiers-class-method","name":"verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L7","def":{"name":"verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers || (@@verifiers = Array(Verifiers::RuntimeChecker).new)"}}],"constructors":[{"id":"new(name,state,initial_state=nil)-class-method","html_id":"new(name,state,initial_state=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"initial_state","doc":null,"default_value":"nil","external_name":"initial_state","restriction":""}],"args_string":"(name, state, initial_state = <span class=\"n\">nil</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L86","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"initial_state","doc":null,"default_value":"nil","external_name":"initial_state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, state, initial_state)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(name)-class-method","html_id":"new(name)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L81","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"confluent_transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"confluent_transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"confluent_transition","doc":"This is the default definition of the confluent transition. Here the\ninternal transition is allowed to occur and this is followed by the\neffect of the external transition on the resulting state.\n\nOverride this method to obtain a different behavior. For example, the\nopposite order of effects (external transition before internal\ntransition). Of course you can override without reference to the other\ntransitions.","summary":"<p>This is the default definition of the confluent transition.</p>","abstract":false,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L130","def":{"name":"confluent_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"internal_transition\nexternal_transition(messages)\n"}},{"id":"elapsed:Duration-instance-method","html_id":"elapsed:Duration-instance-method","name":"elapsed","doc":"This attribute is updated automatically along simulation and represents\nthe elapsed time since the last transition.","summary":"<p>This attribute is updated automatically along simulation and represents the elapsed time since the last transition.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L75","def":{"name":"elapsed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@elapsed"}},{"id":"elapsed=(elapsed:Duration)-instance-method","html_id":"elapsed=(elapsed:Duration)-instance-method","name":"elapsed=","doc":"This attribute is updated automatically along simulation and represents\nthe elapsed time since the last transition.","summary":"<p>This attribute is updated automatically along simulation and represents the elapsed time since the last transition.</p>","abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L75","def":{"name":"elapsed=","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@elapsed = elapsed"}},{"id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"external_transition","doc":"The external transition function (δext)\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef external_transition(messages)\n  messages.each { |port, value|\n    puts \"#{port} => #{value}\"\n  }\nend\n```","summary":"<p>The external transition function (δext)</p>","abstract":true,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L106","def":{"name":"external_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L173","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((io << \"<\") << self.class.name) << \": name=\") << @name\n(io << \", elapsed=\") << (@elapsed.to_s(io))\nio << \">\"\nnil\n"}},{"id":"internal_transition-instance-method","html_id":"internal_transition-instance-method","name":"internal_transition","doc":"Internal transition function (δint), called when the model should be\nactivated, e.g when `#elapsed` reaches `#time_advance`\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef internal_transition\n  self.phase = :steady\nend\n```","summary":"<p>Internal transition function (δint), called when the model should be activated, e.g when <code><a href=\"../Quartz/AtomicModel.html#elapsed:Duration-instance-method\">#elapsed</a></code> reaches <code><a href=\"../Quartz/AtomicModel.html#time_advance:Duration-instance-method\">#time_advance</a></code></p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L120","def":{"name":"internal_transition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"model_precision:Scale-instance-method","html_id":"model_precision:Scale-instance-method","name":"model_precision","doc":"Returns the precision associated with the class.","summary":"<p>Returns the precision associated with the class.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L69","def":{"name":"model_precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@precision_level"}},{"id":"output-instance-method","html_id":"output-instance-method","name":"output","doc":"The output function (λ)\n\nOverride this method to implement the appropriate behavior of\nyour model. See `#post` to send values to output ports.\n\nExample:\n```\ndef output\n  post(42, :output)\nend","summary":"<p>The output function (λ)</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L159","def":{"name":"output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"time_advance:Duration-instance-method","html_id":"time_advance:Duration-instance-method","name":"time_advance","doc":"Time advance function (ta), called after each transition to give a\nchance to *self* to be active.\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef time_advance\n  Quartz.infinity\nend\n```","summary":"<p>Time advance function (ta), called after each transition to give a chance to <em>self</em> to be active.</p>","abstract":true,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L147","def":{"name":"time_advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}}],"macros":[{"id":"input(*names)-macro","html_id":"input(*names)-macro","name":"input","doc":"Defines default input ports for each of the given arguments.\nThose default input ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  input port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_input_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbol literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  input :in1, \"in2\", in3\nend\n```","summary":"<p>Defines default input ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L5","def":{"name":"input","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._input_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}},{"id":"output(*names)-macro","html_id":"output(*names)-macro","name":"output","doc":"Defines default output ports for each of the given arguments.\nThose default output ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  output port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_output_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbols literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  output :out1, \"out2\", out3\nend\n```","summary":"<p>Defines default output ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/atomic.cr#L5","def":{"name":"output","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._output_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/BadSynchronisationError","path":"Quartz/BadSynchronisationError.html","kind":"class","full_name":"Quartz::BadSynchronisationError","name":"BadSynchronisationError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/BinaryHeap","path":"Quartz/BinaryHeap.html","kind":"class","full_name":"Quartz::BinaryHeap(T)","name":"BinaryHeap","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/priority_queues/binary_heap.cr","line_number":10,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Event set implemented as an array-based heap.\n\nEach inserted elements is given a certain priority, based on the result of\nthe comparison. This is a min-heap, which means retrieving an element will\nalways return the one with the highest priority.\n\nTo avoid O(n) complexity when deleting an arbitrary element, a map is\nused to store indices for each element in the event set.","summary":"<p>Event set implemented as an array-based heap.</p>","class_methods":[],"constructors":[{"id":"new(initial_capacity:Int,&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(initial_capacity:Int,&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"args_string":"(initial_capacity : Int, &comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L27","def":{"name":"new","args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = BinaryHeap(T).allocate\n_.initialize(initial_capacity, &comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":"Creates a new empty BinaryHeap.","summary":"<p>Creates a new empty BinaryHeap.</p>","abstract":false,"args":[],"args_string":"(&comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L19","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = BinaryHeap(T).allocate\n_.initialize(&comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other):Bool-instance-method","html_id":"==(other):Bool-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L99","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"false"}},{"id":"==(other:BinaryHeap):Bool-instance-method","html_id":"==(other:BinaryHeap):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BinaryHeap"}],"args_string":"(other : BinaryHeap) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L95","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BinaryHeap"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(size == other.size) && (to_slice == other.to_slice)"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L47","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@heap.clear(@size)\n@cache.clear\n@size = 0\nself\n"}},{"id":"delete(priority:Duration,event:T):T?-instance-method","html_id":"delete(priority:Duration,event:T):T?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(priority : Duration, event : T) : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L109","def":{"name":"delete","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty\")\nend\nindex = @cache[event]\n@cache[event] = -1\n(delete_at(index))[1]\n"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L43","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@size == 0"}},{"id":"heapify!-instance-method","html_id":"heapify!-instance-method","name":"heapify!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L177","def":{"name":"heapify!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"index = @size >> 1\nwhile index >= 0\n  sift_down!(index)\n  index = index - 1\nend\n"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L103","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((((io << \"<\") << self.class.name) << \": size=\") << (size.to_s(io))) << \", top=\"\n(io << (peek.to_s(io))) << \">\"\nnil\n"}},{"id":"next_priority:Duration-instance-method","html_id":"next_priority:Duration-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L66","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"next_priority do\n  raise(\"heap is empty.\")\nend"}},{"id":"next_priority(&)-instance-method","html_id":"next_priority(&amp;)-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L70","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][0]"}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L58","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"peek do\n  raise(\"heap is empty.\")\nend"}},{"id":"peek(&)-instance-method","html_id":"peek(&amp;)-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L62","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][1]"}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L54","def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"peek do\n  nil\nend"}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L74","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty.\")\nelse\n  _, value = delete_at(1)\n  @cache[value] = -1\n  value\nend"}},{"id":"push(priority:Duration,value:T):self-instance-method","html_id":"push(priority:Duration,value:T):self-instance-method","name":"push","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L134","def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@size = @size + 1\ncheck_needs_resize\n@heap[@size] = {priority, value}\n@cache[value] = @size\nsift_up!(@size)\nself\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the heap.","summary":"<p>Returns the number of elements in the heap.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L14","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"to_a:Array(Tuple(Duration,T))-instance-method","html_id":"to_a:Array(Tuple(Duration,T))-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Tuple(Duration, T))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L88","def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Duration, T))","visibility":"Public","body":"Array(Tuple(Duration, T)).build(@size) do |pointer|\n  pointer.copy_from(@heap + 1, @size)\n  @size\nend"}},{"id":"to_slice:Slice(Tuple(Duration,T))-instance-method","html_id":"to_slice:Slice(Tuple(Duration,T))-instance-method","name":"to_slice","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(Tuple(Duration, T))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/binary_heap.cr#L84","def":{"name":"to_slice","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(Tuple(Duration, T))","visibility":"Public","body":"(@heap + 1).to_slice(@size)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CalendarQueue","path":"Quartz/CalendarQueue.html","kind":"class","full_name":"Quartz::CalendarQueue(T)","name":"CalendarQueue","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/priority_queues/calendar_queue.cr","line_number":7,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"A fast O(1) priority queue implementation.\n\nSee paper: Brown, Randy. 1988. “Calendar Queues: a Fast 0(1) Priority Queue\nImplementation for the Simulation Event Set Problem.” Communications of the\nACM 31 (10): 1220–27. doi:10.1145/63039.63045.","summary":"<p>A fast O(1) priority queue implementation.</p>","class_methods":[],"constructors":[{"id":"new(last_priority=Duration.new(0),bucket_count=8,width=Duration.new(Scale::FACTOR),&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(last_priority=Duration.new(0),bucket_count=8,width=Duration.new(Scale::FACTOR),&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"last_priority","doc":null,"default_value":"Duration.new(0)","external_name":"last_priority","restriction":""},{"name":"bucket_count","doc":null,"default_value":"8","external_name":"bucket_count","restriction":""},{"name":"width","doc":null,"default_value":"Duration.new(Scale::FACTOR)","external_name":"width","restriction":""}],"args_string":"(last_priority = <span class=\"t\">Duration</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>), bucket_count = <span class=\"n\">8</span>, width = <span class=\"t\">Duration</span>.<span class=\"k\">new</span>(<span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">FACTOR</span>), &comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L36","def":{"name":"new","args":[{"name":"last_priority","doc":null,"default_value":"Duration.new(0)","external_name":"last_priority","restriction":""},{"name":"bucket_count","doc":null,"default_value":"8","external_name":"bucket_count","restriction":""},{"name":"width","doc":null,"default_value":"Duration.new(Scale::FACTOR)","external_name":"width","restriction":""}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = CalendarQueue(T).allocate\n_.initialize(last_priority, bucket_count, width, &comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L126","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size = 0\n@resize_enabled = true\n@last_bucket = 0\nlocal_init(8, Duration.new(Scale::FACTOR), Duration.new(0))\nself\n"}},{"id":"delete(priority:Duration,event:T):T?-instance-method","html_id":"delete(priority:Duration,event:T):T?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(priority : Duration, event : T) : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L160","def":{"name":"delete","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"vbucket = (priority / @width).to_i64\ni = (vbucket % @buckets.size).to_i\nbucket = @buckets[i]\nindex = bucket.index({priority, event})\nif index\n  item = bucket.delete_at(index)\n  @size = @size - 1\n  if @size < @shrink_threshold\n    resize(@buckets.size // 2)\n  end\n  return item[1]\nelse\n  raise(\"#{event} scheduled at #{priority} not found\")\nend\nnil\n"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L122","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@size == 0"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L52","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((io << \"<\") << self.class.name) << \": size=\"\n@size.to_s(io)\nio << \", bucket_width=\"\n@width.to_s(io)\nio << \", last_priority=\"\n@last_priority.to_s(io)\nio << \", last_bucket=\"\n@last_bucket.to_s(io)\nio << \", bucket_top=\"\n@bucket_top.to_s(io)\nio << \", shrink_threshold=\"\n@shrink_threshold.to_s(io)\nio << \", expand_threshold=\"\n@expand_threshold.to_s(io)\nio << \">\"\nnil\n"}},{"id":"next_priority:Duration-instance-method","html_id":"next_priority:Duration-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L198","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"if @size == 0\n  raise(\"calendar queue is empty.\")\nelse\n  unsafe_peek[0]\nend"}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L182","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(\"calendar queue is empty.\")\nelse\n  unsafe_peek[1]\nend"}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L190","def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if @size == 0\n  nil\nelse\n  unsafe_peek[1]\nend"}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L257","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(\"calendar queue is empty.\")\nelse\n  unsafe_pop[1]\nend"}},{"id":"pop?:T?-instance-method","html_id":"pop?:T?-instance-method","name":"pop?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L265","def":{"name":"pop?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if @size == 0\n  nil\nelse\n  unsafe_pop[1]\nend"}},{"id":"print_buckets(le_than:Duration)-instance-method","html_id":"print_buckets(le_than:Duration)-instance-method","name":"print_buckets","doc":null,"summary":null,"abstract":false,"args":[{"name":"le_than","doc":null,"default_value":"","external_name":"le_than","restriction":"Duration"}],"args_string":"(le_than : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L95","def":{"name":"print_buckets","args":[{"name":"le_than","doc":null,"default_value":"","external_name":"le_than","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"print(\"\\n================================================\\n\")\nputs(\"calendar queue: #{@size} events, last:#{@last_priority}, buckets:#{@buckets.size}\")\n@buckets.each_with_index do |bucket, i|\n  if bucket.empty?\n    next\n  end\n  if i >= (@last_bucket - 50) && i <= (@last_bucket + 50)\n    print(\"[#{(    i * @width)},#{(    (i + 1) * @width)}[ • \")\n    if i == @last_bucket\n      print(\"--> \")\n    else\n      print(\"    \")\n    end\n    print(\"Bucket #{i}: {\")\n    bucket.each do |ev|\n      print(ev[0])\n      print(\", \")\n    end\n    print('}')\n    puts\n  end\nend\nprint(\"================================================\\n\")\n"}},{"id":"push(priority:Duration,value:T)-instance-method","html_id":"push(priority:Duration,value:T)-instance-method","name":"push","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L134","def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"vbucket = (priority / @width).to_i64\ni = (vbucket % @buckets.size).to_i\nbucket = @buckets[i]\nif bucket.empty? || (@comparator.call(bucket.last[0], priority, false)) > 0\n  bucket << {priority, value}\nelse\n  j = bucket.size - 1\n  while (@comparator.call(priority, bucket[j][0], false)) > 0 && j >= 0\n    j = j - 1\n  end\n  bucket.insert(j + 1, {priority, value})\nend\n@size = @size + 1\nif @size > @expand_threshold\n  resize(2 * @buckets.size)\nend\nself\n"}},{"id":"resize(new_size)-instance-method","html_id":"resize(new_size)-instance-method","name":"resize","doc":"Resize buckets to *new_size*.","summary":"<p>Resize buckets to <em>new_size</em>.</p>","abstract":false,"args":[{"name":"new_size","doc":null,"default_value":"","external_name":"new_size","restriction":""}],"args_string":"(new_size)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L341","def":{"name":"resize","args":[{"name":"new_size","doc":null,"default_value":"","external_name":"new_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @resize_enabled\nelse\n  return\nend\ntmp_buckets = @buckets\nbucket_width = new_width\nlocal_init(new_size, bucket_width, @last_priority)\ntmp_buckets.each do |bucket|\n  @size = @size - bucket.size\n  while !bucket.empty?\n    duration, event = bucket.pop\n    push(duration, event)\n  end\nend\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of events.","summary":"<p>Returns the number of events.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L9","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/calendar_queue.cr#L71","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io.print(\"\\n================================================\\n\")\nio.puts(\"calendar queue: #{@size} events, last:#{@last_priority}, buckets:#{@buckets.size}\")\n@buckets.each_with_index do |bucket, i|\n  if bucket.empty?\n    next\n  end\n  io.print(\"[#{(  i * @width)},#{(  (i + 1) * @width)}[ • \")\n  if i == @last_bucket\n    io.print(\"--> \")\n  else\n    io.print(\"    \")\n  end\n  io.print(\"Bucket #{i}: {\")\n  bucket.each do |ev|\n    io.print(ev[0])\n    io << \", \"\n  end\n  io << '}'\n  io.puts\nend\nio.print(\"================================================\\n\")\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","path":"Quartz/Coordinator.html","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/coordinator.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/DynamicCoordinator","kind":"class","full_name":"Quartz::DSDE::DynamicCoordinator","name":"DynamicCoordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/RootCoordinator","kind":"class","full_name":"Quartz::RootCoordinator","name":"RootCoordinator"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represent a simulator associated with an `CoupledModel`,\nresponsible to route events to proper children","summary":"<p>This class represent a simulator associated with an <code><a href=\"../Quartz/CoupledModel.html\">CoupledModel</a></code>, responsible to route events to proper children</p>","class_methods":[],"constructors":[{"id":"new(model:Model,simulation:Simulation)-class-method","html_id":"new(model:Model,simulation:Simulation)-class-method","name":"new","doc":"Returns a new instance of Coordinator","summary":"<p>Returns a new instance of Coordinator</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"args_string":"(model : Model, simulation : Simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L13","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"<<(child:Processor)-instance-method","html_id":"&lt;&lt;(child:Processor)-instance-method","name":"<<","doc":"Append given *child* to `#children` list, ensuring that the child now has\n*self* as parent.","summary":"<p>Append given <em>child</em> to <code><a href=\"../Quartz/Coordinator.html#children:Array(Quartz::Processor)-instance-method\">#children</a></code> list, ensuring that the child now has <em>self</em> as parent.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":"Processor"}],"args_string":"(child : Processor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L37","def":{"name":"<<","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":"Processor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children << child\nchild.parent = self\nchild\n"}},{"id":"add_child(child)-instance-method","html_id":"add_child(child)-instance-method","name":"add_child","doc":null,"summary":null,"abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L43","def":{"name":"add_child","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self << child"}},{"id":"children:Array(Quartz::Processor)-instance-method","html_id":"children:Array(Quartz::Processor)-instance-method","name":"children","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Quartz::Processor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L7","def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children"}},{"id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","html_id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","name":"collect_outputs","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Hash(OutputPort, Array(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L94","def":{"name":"collect_outputs","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(OutputPort, Array(Any))","visibility":"Public","body":"if @parent_bag.empty?\nelse\n  @parent_bag.clear\nend\n@event_set.each_imminent_event do |child|\n  if child.is_a?(TimeBase)\n    if child.time_next != elapsed\n      raise(BadSynchronisationError.new)\n    end\n    child.processors.each do |processor|\n      output = processor.collect_outputs(elapsed)\n      route_outputs(processor, output, elapsed)\n    end\n    @synchronize << child\n  else\n    if child.is_a?(Processor)\n      output = child.collect_outputs(elapsed)\n      route_outputs(child, output, elapsed)\n    end\n  end\nend\nif (@model.as(CoupledModel)).count_observers > 0\n  (@model.as(CoupledModel)).notify_observers(OBS_INFO_COLLECT_PHASE.merge({:time => @event_set.current_time, :elapsed => elapsed}))\nend\n@parent_bag\n"}},{"id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","html_id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","name":"initialize_processor","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : ::Tuple(Duration, Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L54","def":{"name":"initialize_processor","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Duration, Duration)","visibility":"Public","body":"@event_set.clear\n@time_cache.current_time = @event_set.current_time = time\nmin_planned_duration = Duration::INFINITY\nmax_elapsed = Duration.new(0)\n@children.each do |child|\n  if child.is_a?(DTSS::Simulator)\n    delta_t = (child.model.as(DTSS::AtomicModel)).time_delta\n    time_base = (    __temp_24 = delta_t\n    @time_bases[__temp_24]? || (@time_bases[__temp_24] = TimeBase.new(delta_t))\n)\n    time_base.processors << child\n    child.initialize_processor(time)\n  else\n    if child.is_a?(Schedulable)\n      elapsed, planned_duration = child.initialize_processor(time)\n      @time_cache.retain_event(child, elapsed)\n      if !planned_duration.infinite?\n        @event_set.plan_event(child, planned_duration)\n      else\n        child.planned_phase = planned_duration\n      end\n      if planned_duration < min_planned_duration\n        min_planned_duration = planned_duration\n      end\n      if elapsed > max_elapsed\n        max_elapsed = elapsed\n      end\n    end\n  end\nend\n@time_bases.each_value do |time_base|\n  @time_cache.retain_event(time_base, Duration.zero(time_base.time_next.precision))\n  @event_set.plan_event(time_base, time_base.time_next)\n  if time_base.time_next < min_planned_duration\n    min_planned_duration = time_base.time_next\n  end\nend\ncoupled = @model.as(CoupledModel)\nif coupled.count_observers > 0\n  coupled.notify_observers(OBS_INFO_INIT_PHASE.merge({:time => time}))\nend\n{max_elapsed.fixed, min_planned_duration.fixed}\n"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L27","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((io << \"<\") << self.class.name) << \"tn=\"\n@event_set.imminent_duration.to_s(io)\nio << \", components=\"\n@children.size.to_s(io)\nio << \">\"\n"}},{"id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(time : TimePoint, elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L171","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"self.handle_external_inputs(time)\n@synchronize.each do |receiver|\n  perform_transition_for(receiver.as(Processor | TimeBase), time)\nend\nbag.clear\n@synchronize.clear\ncoupled = @model.as(CoupledModel)\nif coupled.count_observers > 0\n  coupled.notify_observers(OBS_INFO_TRANSITIONS_PHASE.merge({:time => time, :elapsed => elapsed}))\nend\n@event_set.imminent_duration.fixed\n"}},{"id":"remove_child(child)-instance-method","html_id":"remove_child(child)-instance-method","name":"remove_child","doc":"Deletes the specified child from `#children` list","summary":"<p>Deletes the specified child from <code><a href=\"../Quartz/Coordinator.html#children:Array(Quartz::Processor)-instance-method\">#children</a></code> list</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coordinator.cr#L48","def":{"name":"remove_child","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@event_set.delete(child)\nidx = @children.index do |x|\n  child.equal?(x)\nend\nif idx\n  (@children.delete_at(idx)).parent = nil\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","path":"Quartz/Coupleable.html","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"}],"locations":[{"filename":"quartz/coupleable.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Model","kind":"class","full_name":"Quartz::MultiComponent::Model","name":"Model"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `Coupleable` mixin provides models with the ability to be coupled with\nother coupleables through an input and output interface.","summary":"<p>The <code><a href=\"../Quartz/Coupleable.html\">Coupleable</a></code> mixin provides models with the ability to be coupled with other coupleables through an input and output interface.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_input_port(name)-instance-method","html_id":"add_input_port(name)-instance-method","name":"add_input_port","doc":"Add given input port to *self*.","summary":"<p>Add given input port to <em>self</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L141","def":{"name":"add_input_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if input_ports.has_key?(name)\n  puts(\"Warning in model '#{self}' (#{self.class.name}): input port '#{name}' already exists. Skipping...\")\n  new_port = input_ports[name]\nelse\n  new_port = InputPort.new(self, name)\n  input_ports[name] = new_port\nend\nnew_port\n"}},{"id":"add_output_port(name)-instance-method","html_id":"add_output_port(name)-instance-method","name":"add_output_port","doc":"Add given output port to *self*.","summary":"<p>Add given output port to <em>self</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L154","def":{"name":"add_output_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if output_ports.has_key?(name)\n  puts(\"Warning in model '#{self}' (#{self.class.name}): output port '#{name}' already exists. Skipping...\")\n  new_port = output_ports[name]\nelse\n  new_port = OutputPort.new(self, name)\n  output_ports[name] = new_port\nend\nnew_port\n"}},{"id":"add_port(port:InputPort)-instance-method","html_id":"add_port(port:InputPort)-instance-method","name":"add_port","doc":"Add given port to *self*.","summary":"<p>Add given port to <em>self</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L129","def":{"name":"add_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if port.host != self\n  raise(InvalidPortHostError.new)\nend\ninput_ports[port.name] = port\n"}},{"id":"add_port(port:OutputPort)-instance-method","html_id":"add_port(port:OutputPort)-instance-method","name":"add_port","doc":"Add given port to *self*.","summary":"<p>Add given port to <em>self</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L135","def":{"name":"add_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if port.host != self\n  raise(InvalidPortHostError.new)\nend\noutput_ports[port.name] = port\n"}},{"id":"each_input_port(&)-instance-method","html_id":"each_input_port(&amp;)-instance-method","name":"each_input_port","doc":"Calls given block once for each input port, passing that element as a\nparameter.","summary":"<p>Calls given block once for each input port, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L208","def":{"name":"each_input_port","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"input_ports.each_value do |port|\n  yield port\nend"}},{"id":"each_output_port(&)-instance-method","html_id":"each_output_port(&amp;)-instance-method","name":"each_output_port","doc":"Calls given block once for each output port, passing that element as a\nparameter.","summary":"<p>Calls given block once for each output port, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L219","def":{"name":"each_output_port","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"output_ports.each_value do |port|\n  yield port\nend"}},{"id":"input_port(name:Name):InputPort-instance-method","html_id":"input_port(name:Name):InputPort-instance-method","name":"input_port","doc":"Find the input port identified by the given *name*.","summary":"<p>Find the input port identified by the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : InputPort","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L234","def":{"name":"input_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"InputPort","visibility":"Public","body":"if input_ports.has_key?(name)\nelse\n  raise(NoSuchPortError.new(\"input port \\\"#{name}\\\" not found\"))\nend\ninput_ports[name]\n"}},{"id":"input_port?(name:Name):InputPort?-instance-method","html_id":"input_port?(name:Name):InputPort?-instance-method","name":"input_port?","doc":"Find the input port identified by the given *name*.","summary":"<p>Find the input port identified by the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : InputPort?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L229","def":{"name":"input_port?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"InputPort | ::Nil","visibility":"Public","body":"input_ports[name]?"}},{"id":"input_port_list:Array(InputPort)-instance-method","html_id":"input_port_list:Array(InputPort)-instance-method","name":"input_port_list","doc":"Returns the list of input ports","summary":"<p>Returns the list of input ports</p>","abstract":false,"args":[],"args_string":" : Array(InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L197","def":{"name":"input_port_list","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputPort)","visibility":"Public","body":"input_ports.values"}},{"id":"input_port_names-instance-method","html_id":"input_port_names-instance-method","name":"input_port_names","doc":"Returns the list of input ports' names","summary":"<p>Returns the list of input ports' names</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L187","def":{"name":"input_port_names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input_ports.keys"}},{"id":"output_port(name:Name):OutputPort-instance-method","html_id":"output_port(name:Name):OutputPort-instance-method","name":"output_port","doc":"Find the output port identified by the given *name*","summary":"<p>Find the output port identified by the given <em>name</em></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : OutputPort","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L245","def":{"name":"output_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OutputPort","visibility":"Public","body":"if output_ports.has_key?(name)\nelse\n  raise(NoSuchPortError.new(\"output port \\\"#{name}\\\" not found\"))\nend\noutput_ports[name]\n"}},{"id":"output_port?(name:Name):OutputPort?-instance-method","html_id":"output_port?(name:Name):OutputPort?-instance-method","name":"output_port?","doc":"Find the output port identified by the given *name*","summary":"<p>Find the output port identified by the given <em>name</em></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : OutputPort?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L240","def":{"name":"output_port?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"OutputPort | ::Nil","visibility":"Public","body":"output_ports[name]?"}},{"id":"output_port_list:Array(OutputPort)-instance-method","html_id":"output_port_list:Array(OutputPort)-instance-method","name":"output_port_list","doc":"Returns the list of output ports","summary":"<p>Returns the list of output ports</p>","abstract":false,"args":[],"args_string":" : Array(OutputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L202","def":{"name":"output_port_list","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(OutputPort)","visibility":"Public","body":"output_ports.values"}},{"id":"output_port_names-instance-method","html_id":"output_port_names-instance-method","name":"output_port_names","doc":"Returns the list of output ports' names","summary":"<p>Returns the list of output ports' names</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L192","def":{"name":"output_port_names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"output_ports.keys"}},{"id":"remove_input_port(name)-instance-method","html_id":"remove_input_port(name)-instance-method","name":"remove_input_port","doc":"Removes given input port by its *name*.","summary":"<p>Removes given input port by its <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L177","def":{"name":"remove_input_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input_ports.delete(name)"}},{"id":"remove_output_port(name)-instance-method","html_id":"remove_output_port(name)-instance-method","name":"remove_output_port","doc":"Removes given output port by its *name*.","summary":"<p>Removes given output port by its <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L182","def":{"name":"remove_output_port","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"output_ports.delete(name)"}},{"id":"remove_port(port:OutputPort)-instance-method","html_id":"remove_port(port:OutputPort)-instance-method","name":"remove_port","doc":"Removes given output *port* from *self*.","summary":"<p>Removes given output <em>port</em> from <em>self</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L172","def":{"name":"remove_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"output_ports.delete(port.name)"}},{"id":"remove_port(port:InputPort)-instance-method","html_id":"remove_port(port:InputPort)-instance-method","name":"remove_port","doc":"Removes given input *port* from *self*.","summary":"<p>Removes given input <em>port</em> from <em>self</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupleable.cr#L167","def":{"name":"remove_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input_ports.delete(port.name)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","path":"Quartz/CoupledModel.html","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler","kind":"module","full_name":"Quartz::Coupler","name":"Coupler"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/coupled.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr"},{"filename":"quartz/visitor.cr","line_number":36,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler","kind":"module","full_name":"Quartz::Coupler","name":"Coupler"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/CoupledModel","kind":"class","full_name":"Quartz::DSDE::CoupledModel","name":"CoupledModel"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represent a PDEVS coupled model.","summary":"<p>This class represent a PDEVS coupled model.</p>","class_methods":[{"id":"preferred_event_set:Symbol-class-method","html_id":"preferred_event_set:Symbol-class-method","name":"preferred_event_set","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"preferred_event_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"if (value = @@preferred_event_set).nil?\n  ::raise(NilAssertionError.new(\"Quartz::CoupledModel.preferred_event_set cannot be nil\"))\nelse\n  value\nend"}},{"id":"preferred_event_set=(preferred_event_set:Symbol)-class-method","html_id":"preferred_event_set=(preferred_event_set:Symbol)-class-method","name":"preferred_event_set=","doc":null,"summary":null,"abstract":false,"args":[{"name":"preferred_event_set","doc":null,"default_value":"","external_name":"preferred_event_set","restriction":"Symbol"}],"args_string":"(preferred_event_set : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr#L8","def":{"name":"preferred_event_set=","args":[{"name":"preferred_event_set","doc":null,"default_value":"","external_name":"preferred_event_set","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@preferred_event_set = preferred_event_set"}},{"id":"preferred_event_set?:Symbol?-class-method","html_id":"preferred_event_set?:Symbol?-class-method","name":"preferred_event_set?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","source_link":null,"def":{"name":"preferred_event_set?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol | ::Nil","visibility":"Public","body":"@@preferred_event_set"}}],"constructors":[],"instance_methods":[{"id":"accept_children(visitor)-instance-method","html_id":"accept_children(visitor)-instance-method","name":"accept_children","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"args_string":"(visitor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L37","def":{"name":"accept_children","args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.each_value(&.accept(visitor))"}}],"macros":[{"id":"event_set(name)-macro","html_id":"event_set(name)-macro","name":"event_set","doc":"Defines the preferred event set for this particular class of coupled\nmodels. Specified event set will be used to coordinate childrens in all\ninstances of this coupled model.\n\nWriting:\n\n```\nclass MyCoupled < CoupledModel\n  event_set ladder_queue\nend\n```\n\nIs the same as writing:\n\n```\nclass MyCoupled < CoupledModel\n  self.preferred_event_set = :ladder_queue\nend\n```\n\nOr the same as:\n\n```\nclass MyCoupled < CoupledModel; end\n\nMyCoupled.preferred_event_set = :ladder_queue\n```\n\nThe argument can be a string literal, a symbol literal or a plain name.","summary":"<p>Defines the preferred event set for this particular class of coupled models.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr#L39","def":{"name":"event_set","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      self.preferred_event_set = :\n{{ name.id }}\n\n    \n"}},{"id":"input(*names)-macro","html_id":"input(*names)-macro","name":"input","doc":"Defines default input ports for each of the given arguments.\nThose default input ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  input port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_input_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbol literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  input :in1, \"in2\", in3\nend\n```","summary":"<p>Defines default input ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr#L4","def":{"name":"input","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._input_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}},{"id":"output(*names)-macro","html_id":"output(*names)-macro","name":"output","doc":"Defines default output ports for each of the given arguments.\nThose default output ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  output port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_output_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbols literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  output :out1, \"out2\", out3\nend\n```","summary":"<p>Defines default output ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupled.cr#L4","def":{"name":"output","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._output_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler","path":"Quartz/Coupler.html","kind":"module","full_name":"Quartz::Coupler","name":"Coupler","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/coupler.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This mixin provides coupled models with several components and\ncoupling methods.","summary":"<p>This mixin provides coupled models with several components and coupling methods.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"<<(model:Model)-instance-method","html_id":"&lt;&lt;(model:Model)-instance-method","name":"<<","doc":"Append the given *model* to childrens","summary":"<p>Append the given <em>model</em> to childrens</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"args_string":"(model : Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L52","def":{"name":"<<","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[model.name] = model\nself\n"}},{"id":"[](name:Name):Model-instance-method","html_id":"[](name:Name):Model-instance-method","name":"[]","doc":"Find the component identified by the given *name*\n\nRaise `NoSuchChildError` error if *name* doesn't match any child","summary":"<p>Find the component identified by the given <em>name</em></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : Model","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L75","def":{"name":"[]","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Model","visibility":"Public","body":"if children.has_key?(name)\nelse\n  raise(NoSuchChildError.new(\"no child named #{name}\"))\nend\nchildren[name]\n"}},{"id":"[]?(name:Name):Model?-instance-method","html_id":"[]?(name:Name):Model?-instance-method","name":"[]?","doc":"Find the component identified by the given *name*","summary":"<p>Find the component identified by the given <em>name</em></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : Model?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L81","def":{"name":"[]?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Model | ::Nil","visibility":"Public","body":"children[name]?"}},{"id":"add_child(child)-instance-method","html_id":"add_child(child)-instance-method","name":"add_child","doc":"Alias for `#<<`.","summary":"<p>Alias for <code><a href=\"../Quartz/Coupler.html#%3C%3C(model:Model)-instance-method\">#<<</a></code>.</p>","abstract":false,"args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"args_string":"(child)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L58","def":{"name":"add_child","args":[{"name":"child","doc":null,"default_value":"","external_name":"child","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self << child"}},{"id":"attach(p1:OutputPort,top2:InputPort)-instance-method","html_id":"attach(p1:OutputPort,top2:InputPort)-instance-method","name":"attach","doc":"Adds an internal coupling (IC) to self between the two given ports.\n\nRaises a `FeedbackLoopError` if *p1* and *p2* hosts are the same child\nwhen constructing the internal coupling. Direct feedback loops are not\nallowed, i.e, no output port of a component may be connected to an input\nport of the same component.\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an internal coupling (IC) to self between the two given ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"args_string":"(p1 : OutputPort, to p2 : InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L261","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (has_child?(a)) && (has_child?(b))\n  if a.object_id == b.object_id\n    raise(FeedbackLoopError.new(\"#{a} must be different than #{b}\"))\n  end\n  if p1.siblings_ports.empty?\n    internal_couplings << p1\n  end\n  p1.siblings_ports << p2\nelse\n  raise(InvalidPortHostError.new(\"Illegal coupling between #{p1} and #{p2}\"))\nend\n"}},{"id":"attach(p1:Name,*,top2:Name,betweensender:Name,andreceiver:Name,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach(p1:Name,*,top2:Name,betweensender:Name,andreceiver:Name,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach","doc":"Adds a coupling to self. Establish a relation between the two given ports\nthat belongs respectively to *sender* and *receiver*.\n\nNote: If given port names *p1* and *p2* doesn't exist within their\nhost (respectively *sender* and *receiver*), they will be automatically\ngenerated.","summary":"<p>Adds a coupling to self.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"args_string":"(p1 : Name, *, to p2 : Name, between sender : Name, and receiver : Name, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L337","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"a = (sender == @name) ? self : self[sender]\nb = (receiver == @name) ? self : self[receiver]\nap1 = (a.as(Coupleable)).find_or_create_output_port_if_necessary(p1)\nap2 = (b.as(Coupleable)).find_or_create_input_port_if_necessary(p2)\nattach(ap1, to: ap2, &block)\n"}},{"id":"attach(p1:Name,*,top2:Name,betweensender:Name,andreceiver:Name)-instance-method","html_id":"attach(p1:Name,*,top2:Name,betweensender:Name,andreceiver:Name)-instance-method","name":"attach","doc":"Adds a coupling to self. Establish a relation between the two given ports\nthat belongs respectively to *sender* and *receiver*.\n\nNote: If given port names *p1* and *p2* doesn't exist within their\nhost (respectively *sender* and *receiver*), they will be automatically\ngenerated.","summary":"<p>Adds a coupling to self.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"args_string":"(p1 : Name, *, to p2 : Name, between sender : Name, and receiver : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L328","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a = (sender == @name) ? self : self[sender]\nb = (receiver == @name) ? self : self[receiver]\nap1 = (a.as(Coupleable)).find_or_create_output_port_if_necessary(p1)\nap2 = (b.as(Coupleable)).find_or_create_input_port_if_necessary(p2)\nattach(ap1, to: ap2)\n"}},{"id":"attach(p1:Name,*,top2:Name,betweensender:Coupleable,andreceiver:Coupleable,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach(p1:Name,*,top2:Name,betweensender:Coupleable,andreceiver:Coupleable,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach","doc":"Adds a coupling to self. Establish a relation between the two given ports\nthat belongs respectively to *sender* and *receiver*.\n\nNote: If given port names *p1* and *p2* doesn't exist within their\nhost (respectively *sender* and *receiver*), they will be automatically\ngenerated.","summary":"<p>Adds a coupling to self.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"args_string":"(p1 : Name, *, to p2 : Name, between sender : Coupleable, and receiver : Coupleable, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L316","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"ap1 = sender.find_or_create_output_port_if_necessary(p1)\nap2 = receiver.find_or_create_input_port_if_necessary(p2)\nattach(ap1, to: ap2, &block)\n"}},{"id":"attach(p1:Name,*,top2:Name,betweensender:Coupleable,andreceiver:Coupleable)-instance-method","html_id":"attach(p1:Name,*,top2:Name,betweensender:Coupleable,andreceiver:Coupleable)-instance-method","name":"attach","doc":"Adds a coupling to self. Establish a relation between the two given ports\nthat belongs respectively to *sender* and *receiver*.\n\nNote: If given port names *p1* and *p2* doesn't exist within their\nhost (respectively *sender* and *receiver*), they will be automatically\ngenerated.","summary":"<p>Adds a coupling to self.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"args_string":"(p1 : Name, *, to p2 : Name, between sender : Coupleable, and receiver : Coupleable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L309","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ap1 = sender.find_or_create_output_port_if_necessary(p1)\nap2 = receiver.find_or_create_input_port_if_necessary(p2)\nattach(ap1, to: ap2)\n"}},{"id":"attach(p1:OutputPort,top2:OutputPort,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach(p1:OutputPort,top2:OutputPort,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach","doc":"Adds an external output coupling (EOC) to self between the two given\noutput ports.\n\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an external output coupling (EOC) to self between the two given output ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"OutputPort"}],"args_string":"(p1 : OutputPort, to p2 : OutputPort, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L298","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"attach(p1, p2)\ntransducers[{p1, p2}] = block\n"}},{"id":"attach(p1:OutputPort,top2:OutputPort)-instance-method","html_id":"attach(p1:OutputPort,top2:OutputPort)-instance-method","name":"attach","doc":"Adds an external output coupling (EOC) to self between the two given\noutput ports.\n\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an external output coupling (EOC) to self between the two given output ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"OutputPort"}],"args_string":"(p1 : OutputPort, to p2 : OutputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L285","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (has_child?(a)) && (b == self)\n  if p1.upward_ports.empty?\n    output_couplings << p1\n  end\n  p1.upward_ports << p2\nelse\n  raise(InvalidPortHostError.new(\"Illegal coupling between #{p1} and #{p2}\"))\nend\n"}},{"id":"attach(p1:OutputPort,top2:InputPort,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach(p1:OutputPort,top2:InputPort,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach","doc":"Adds an internal coupling (IC) to self between the two given ports.\n\nRaises a `FeedbackLoopError` if *p1* and *p2* hosts are the same child\nwhen constructing the internal coupling. Direct feedback loops are not\nallowed, i.e, no output port of a component may be connected to an input\nport of the same component.\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an internal coupling (IC) to self between the two given ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"args_string":"(p1 : OutputPort, to p2 : InputPort, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L275","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"attach(p1, p2)\ntransducers[{p1, p2}] = block\n"}},{"id":"attach(p1:InputPort,top2:InputPort)-instance-method","html_id":"attach(p1:InputPort,top2:InputPort)-instance-method","name":"attach","doc":"Adds an external input coupling (EIC) to self between the two given input\nports.\n\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an external input coupling (EIC) to self between the two given input ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"args_string":"(p1 : InputPort, to p2 : InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L235","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (a == self) && (has_child?(b))\n  if p1.downward_ports.empty?\n    input_couplings << p1\n  end\n  p1.downward_ports << p2\nelse\n  raise(InvalidPortHostError.new(\"Illegal coupling between #{p1} and #{p2}\"))\nend\n"}},{"id":"attach(p1:InputPort,top2:InputPort,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach(p1:InputPort,top2:InputPort,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach","doc":"Adds an external input coupling (EIC) to self between the two given input\nports.\n\nRaises an `InvalidPortHostError` if no coupling can be established from\ngiven ports hosts.","summary":"<p>Adds an external input coupling (EIC) to self between the two given input ports.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"args_string":"(p1 : InputPort, to p2 : InputPort, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L248","def":{"name":"attach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"to","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"attach(p1, p2)\ntransducers[{p1, p2}] = block\n"}},{"id":"attach_input(myport:Name,*,toiport:Name,ofchild:Coupleable)-instance-method","html_id":"attach_input(myport:Name,*,toiport:Name,ofchild:Coupleable)-instance-method","name":"attach_input","doc":"Adds an external input coupling (EIC) to self. Establish a relation\nbetween a self input port and a child input port.\n\nNote: If given port names *myport* and *iport* doesn't exist within their\nhost (respectively *self* and *child*), they will be automatically\ngenerated.","summary":"<p>Adds an external input coupling (EIC) to self.</p>","abstract":false,"args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"}],"args_string":"(myport : Name, *, to iport : Name, of child : Coupleable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L351","def":{"name":"attach_input","args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"p1 = self.find_or_create_input_port_if_necessary(myport)\np2 = child.find_or_create_input_port_if_necessary(iport)\nattach(p1, to: p2)\n"}},{"id":"attach_input(myport:Name,*,toiport:Name,ofchild:Coupleable,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach_input(myport:Name,*,toiport:Name,ofchild:Coupleable,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach_input","doc":"Adds an external input coupling (EIC) to self. Establish a relation\nbetween a self input port and a child input port.\n\nNote: If given port names *myport* and *iport* doesn't exist within their\nhost (respectively *self* and *child*), they will be automatically\ngenerated.","summary":"<p>Adds an external input coupling (EIC) to self.</p>","abstract":false,"args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"}],"args_string":"(myport : Name, *, to iport : Name, of child : Coupleable, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L358","def":{"name":"attach_input","args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"p1 = self.find_or_create_input_port_if_necessary(myport)\np2 = child.find_or_create_input_port_if_necessary(iport)\nattach(p1, to: p2, &block)\n"}},{"id":"attach_input(myport:Name,*,toiport:Name,ofchild:Name)-instance-method","html_id":"attach_input(myport:Name,*,toiport:Name,ofchild:Name)-instance-method","name":"attach_input","doc":"Adds an external input coupling (EIC) to self. Establish a relation\nbetween a self input port and a child input port.\n\nNote: If given port names *myport* and *iport* doesn't exist within their\nhost (respectively *self* and *child*), they will be automatically\ngenerated.","summary":"<p>Adds an external input coupling (EIC) to self.</p>","abstract":false,"args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"}],"args_string":"(myport : Name, *, to iport : Name, of child : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L370","def":{"name":"attach_input","args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"receiver = self[child].as(Coupleable)\np1 = self.find_or_create_input_port_if_necessary(myport)\np2 = receiver.find_or_create_input_port_if_necessary(iport)\nattach(p1, to: p2)\n"}},{"id":"attach_input(myport:Name,*,toiport:Name,ofchild:Name,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach_input(myport:Name,*,toiport:Name,ofchild:Name,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach_input","doc":"Adds an external input coupling (EIC) to self. Establish a relation\nbetween a self input port and a child input port.\n\nNote: If given port names *myport* and *iport* doesn't exist within their\nhost (respectively *self* and *child*), they will be automatically\ngenerated.","summary":"<p>Adds an external input coupling (EIC) to self.</p>","abstract":false,"args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"}],"args_string":"(myport : Name, *, to iport : Name, of child : Name, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L378","def":{"name":"attach_input","args":[{"name":"myport","doc":null,"default_value":"","external_name":"myport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"to","restriction":"Name"},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"receiver = self[child].as(Coupleable)\np1 = self.find_or_create_input_port_if_necessary(myport)\np2 = receiver.find_or_create_input_port_if_necessary(iport)\nattach(p1, to: p2, &block)\n"}},{"id":"attach_output(oport:Name,*,ofchild:Name,tomyport:Name,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach_output(oport:Name,*,ofchild:Name,tomyport:Name,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach_output","doc":"Adds an external output coupling (EOC) to self. Establish a relation\nbetween an output port of one of self's children and one of self's\noutput ports.\n\nNote: If given port names *oport* and *myport* doesn't exist within their\nhost (respectively *child* and *self*), they will be automatically\ngenerated.","summary":"<p>Adds an external output coupling (EOC) to self.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Name, to myport : Name, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L420","def":{"name":"attach_output","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"sender = self[child].as(Coupleable)\np1 = sender.find_or_create_output_port_if_necessary(oport)\np2 = self.find_or_create_output_port_if_necessary(myport)\nattach(p1, to: p2, &block)\n"}},{"id":"attach_output(oport:Name,*,ofchild:Coupleable,tomyport:Name)-instance-method","html_id":"attach_output(oport:Name,*,ofchild:Coupleable,tomyport:Name)-instance-method","name":"attach_output","doc":"Adds an external output coupling (EOC) to self. Establish a relation\nbetween an output port of one of self's children and one of self's\noutput ports.\n\nNote: If given port names *oport* and *myport* doesn't exist within their\nhost (respectively *child* and *self*), they will be automatically\ngenerated.","summary":"<p>Adds an external output coupling (EOC) to self.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Coupleable, to myport : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L392","def":{"name":"attach_output","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"p1 = child.find_or_create_output_port_if_necessary(oport)\np2 = self.find_or_create_output_port_if_necessary(myport)\nattach(p1, to: p2)\n"}},{"id":"attach_output(oport:Name,*,ofchild:Name,tomyport:Name)-instance-method","html_id":"attach_output(oport:Name,*,ofchild:Name,tomyport:Name)-instance-method","name":"attach_output","doc":"Adds an external output coupling (EOC) to self. Establish a relation\nbetween an output port of one of self's children and one of self's\noutput ports.\n\nNote: If given port names *oport* and *myport* doesn't exist within their\nhost (respectively *child* and *self*), they will be automatically\ngenerated.","summary":"<p>Adds an external output coupling (EOC) to self.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Name, to myport : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L412","def":{"name":"attach_output","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sender = self[child].as(Coupleable)\np1 = sender.find_or_create_output_port_if_necessary(oport)\np2 = self.find_or_create_output_port_if_necessary(myport)\nattach(p1, to: p2)\n"}},{"id":"attach_output(oport:Name,*,ofchild:Coupleable,tomyport:Name,&block:Enumerable(Any)->Enumerable(Any))-instance-method","html_id":"attach_output(oport:Name,*,ofchild:Coupleable,tomyport:Name,&amp;block:Enumerable(Any)-&gt;Enumerable(Any))-instance-method","name":"attach_output","doc":"Adds an external output coupling (EOC) to self. Establish a relation\nbetween an output port of one of self's children and one of self's\noutput ports.\n\nNote: If given port names *oport* and *myport* doesn't exist within their\nhost (respectively *child* and *self*), they will be automatically\ngenerated.","summary":"<p>Adds an external output coupling (EOC) to self.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Coupleable, to myport : Name, &block : Enumerable(Any) -> Enumerable(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L399","def":{"name":"attach_output","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"to","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Enumerable(Any) -> Enumerable(Any))"},"return_type":"","visibility":"Public","body":"p1 = child.find_or_create_output_port_if_necessary(oport)\np2 = self.find_or_create_output_port_if_necessary(myport)\nattach(p1, to: p2, &block)\n"}},{"id":"children_names:Array(Name)-instance-method","html_id":"children_names:Array(Name)-instance-method","name":"children_names","doc":"Returns the children names","summary":"<p>Returns the children names</p>","abstract":false,"args":[],"args_string":" : Array(Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L68","def":{"name":"children_names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Name)","visibility":"Public","body":"children.keys"}},{"id":"children_size-instance-method","html_id":"children_size-instance-method","name":"children_size","doc":"Returns the number of children in `self`.","summary":"<p>Returns the number of children in <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L107","def":{"name":"children_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.size"}},{"id":"detach(p1:InputPort,fromp2:InputPort):Bool-instance-method","html_id":"detach(p1:InputPort,fromp2:InputPort):Bool-instance-method","name":"detach","doc":"Deletes a external input coupling (EOC) from *self*.\n\nReturns `true` if successful.","summary":"<p>Deletes a external input coupling (EOC) from <em>self</em>.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"InputPort"}],"args_string":"(p1 : InputPort, from p2 : InputPort) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L430","def":{"name":"detach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"InputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (a == self) && (has_child?(b))\n  if (p1.downward_ports.delete(p2)) != nil\n    if p1.downward_ports.empty?\n      input_couplings.delete(p1)\n    end\n    @transducers.try(&.delete({p1, p2}))\n    return true\n  end\nend\nfalse\n"}},{"id":"detach(p1:OutputPort,fromp2:InputPort):Bool-instance-method","html_id":"detach(p1:OutputPort,fromp2:InputPort):Bool-instance-method","name":"detach","doc":"Deletes an internal coupling (IC) from *self*.\n\nReturns `true` if successful.","summary":"<p>Deletes an internal coupling (IC) from <em>self</em>.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"InputPort"}],"args_string":"(p1 : OutputPort, from p2 : InputPort) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L450","def":{"name":"detach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (has_child?(a)) && (has_child?(b))\n  if (p1.siblings_ports.delete(p2)) != nil\n    if p1.siblings_ports.empty?\n      internal_couplings.delete(p1)\n    end\n    @transducers.try(&.delete({p1, p2}))\n    return true\n  end\nend\nfalse\n"}},{"id":"detach(p1:OutputPort,fromp2:OutputPort):Bool-instance-method","html_id":"detach(p1:OutputPort,fromp2:OutputPort):Bool-instance-method","name":"detach","doc":"Deletes an external output coupling (EOC) from *self*.\n\nReturns `true` if successful.","summary":"<p>Deletes an external output coupling (EOC) from <em>self</em>.</p>","abstract":false,"args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"OutputPort"}],"args_string":"(p1 : OutputPort, from p2 : OutputPort) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L470","def":{"name":"detach","args":[{"name":"p1","doc":null,"default_value":"","external_name":"p1","restriction":"OutputPort"},{"name":"p2","doc":null,"default_value":"","external_name":"from","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"a = p1.host\nb = p2.host\nif (has_child?(a)) && (b == self)\n  if (p1.upward_ports.delete(p2)) != nil\n    if p1.upward_ports.empty?\n      output_couplings.delete(p1)\n    end\n    @transducers.try(&.delete({p1, p2}))\n    return true\n  end\nend\nfalse\n"}},{"id":"detach(oport:Name,*,fromiport:Name,betweensender:Coupleable,andreceiver:Coupleable):Bool-instance-method","html_id":"detach(oport:Name,*,fromiport:Name,betweensender:Coupleable,andreceiver:Coupleable):Bool-instance-method","name":"detach","doc":"Deletes a coupling from *self*. Returns `true` if successful.","summary":"<p>Deletes a coupling from <em>self</em>.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"from","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"args_string":"(oport : Name, *, from iport : Name, between sender : Coupleable, and receiver : Coupleable) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L488","def":{"name":"detach","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"from","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Coupleable"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Coupleable"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"p1 = sender.output_port(oport)\np2 = receiver.input_port(iport)\ndetach(p1, from: p2)\n"}},{"id":"detach(oport:Name,*,fromiport:Name,betweensender:Name,andreceiver:Name)-instance-method","html_id":"detach(oport:Name,*,fromiport:Name,betweensender:Name,andreceiver:Name)-instance-method","name":"detach","doc":"Deletes a coupling from *self*. Returns `true` if successful.","summary":"<p>Deletes a coupling from <em>self</em>.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"from","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"args_string":"(oport : Name, *, from iport : Name, between sender : Name, and receiver : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L495","def":{"name":"detach","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"iport","doc":null,"default_value":"","external_name":"from","restriction":"Name"},{"name":"sender","doc":null,"default_value":"","external_name":"between","restriction":"Name"},{"name":"receiver","doc":null,"default_value":"","external_name":"and","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a = (sender == @name) ? self : self[sender]\nb = (receiver == @name) ? self : self[receiver]\np1 = (a.as(Coupleable)).output_port(oport)\np2 = (b.as(Coupleable)).input_port(iport)\ndetach(p1, from: p2)\n"}},{"id":"detach(oport:Name,*,ofchild:Coupleable,frommyport:Name):Bool-instance-method","html_id":"detach(oport:Name,*,ofchild:Coupleable,frommyport:Name):Bool-instance-method","name":"detach","doc":"Deletes an external output coupling (EOC) from *self*. Returns `true` if\nsuccessful.","summary":"<p>Deletes an external output coupling (EOC) from <em>self</em>.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"from","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Coupleable, from myport : Name) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L522","def":{"name":"detach","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Coupleable"},{"name":"myport","doc":null,"default_value":"","external_name":"from","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"p1 = child.output_port(oport)\np2 = self.output_port(myport)\ndetach(p1, from: p2)\n"}},{"id":"detach(oport:Name,*,ofchild:Name,frommyport:Name):Bool-instance-method","html_id":"detach(oport:Name,*,ofchild:Name,frommyport:Name):Bool-instance-method","name":"detach","doc":"Deletes an external output coupling (EOC) from *self*. Returns `true` if\nsuccessful.","summary":"<p>Deletes an external output coupling (EOC) from <em>self</em>.</p>","abstract":false,"args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"from","restriction":"Name"}],"args_string":"(oport : Name, *, of child : Name, from myport : Name) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L530","def":{"name":"detach","args":[{"name":"oport","doc":null,"default_value":"","external_name":"oport","restriction":"Name"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"child","doc":null,"default_value":"","external_name":"of","restriction":"Name"},{"name":"myport","doc":null,"default_value":"","external_name":"from","restriction":"Name"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"sender = self[child]\np1 = sender.output_port(oport)\np2 = self.output_port(myport)\ndetach(p1, from: p2)\n"}},{"id":"each_child-instance-method","html_id":"each_child-instance-method","name":"each_child","doc":"Returns an `Iterator` for the children of `self`","summary":"<p>Returns an <code>Iterator</code> for the children of <code>self</code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L102","def":{"name":"each_child","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.each_value"}},{"id":"each_child(&)-instance-method","html_id":"each_child(&amp;)-instance-method","name":"each_child","doc":"Calls given block once for each child, passing that\nelement as a parameter.","summary":"<p>Calls given block once for each child, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L97","def":{"name":"each_child","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"children.each_value do |child|\n  yield child\nend"}},{"id":"each_coupling(&)-instance-method","html_id":"each_coupling(&amp;)-instance-method","name":"each_coupling","doc":"Calls *block* once for each coupling (EIC, IC, EOC), passing that element\nas a parameter.","summary":"<p>Calls <em>block</em> once for each coupling (EIC, IC, EOC), passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L163","def":{"name":"each_coupling","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"each_input_coupling do |src, dst|\n  yield src, dst\nend\neach_internal_coupling do |src, dst|\n  yield src, dst\nend\neach_output_coupling do |src, dst|\n  yield src, dst\nend\n"}},{"id":"each_coupling(port:OutputPort,&)-instance-method","html_id":"each_coupling(port:OutputPort,&amp;)-instance-method","name":"each_coupling","doc":"Calls *block* once for each coupling, passing that element as a parameter.\nGiven output *port* is used to filter internal couplings and external\noutput couplings (IC, EOC) having this port as a source.","summary":"<p>Calls <em>block</em> once for each coupling, passing that element as a parameter.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L179","def":{"name":"each_coupling","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"each_internal_coupling(port) do |src, dst|\n  yield src, dst\nend\neach_output_coupling(port) do |src, dst|\n  yield src, dst\nend\n"}},{"id":"each_coupling(port:InputPort,&)-instance-method","html_id":"each_coupling(port:InputPort,&amp;)-instance-method","name":"each_coupling","doc":"Calls *block* once for each coupling, passing that element as a parameter.\nGiven input *port* is used to filter external input couplings (EIC) having\nthis port as a source.","summary":"<p>Calls <em>block</em> once for each coupling, passing that element as a parameter.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L172","def":{"name":"each_coupling","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"each_input_coupling(port) do |src, dst|\n  yield src, dst\nend"}},{"id":"each_coupling_reverse(port:OutputPort,&)-instance-method","html_id":"each_coupling_reverse(port:OutputPort,&amp;)-instance-method","name":"each_coupling_reverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L226","def":{"name":"each_coupling_reverse","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"each_output_coupling_reverse(port) do |src, dst|\n  yield src, dst\nend"}},{"id":"each_coupling_reverse(port:InputPort,&)-instance-method","html_id":"each_coupling_reverse(port:InputPort,&amp;)-instance-method","name":"each_coupling_reverse","doc":"TODO doc","summary":"<p><span class=\"flag orange\">TODO</span>  doc</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L221","def":{"name":"each_coupling_reverse","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"each_input_coupling_reverse(port) do |src, dst|\n  yield src, dst\nend\neach_internal_coupling_reverse(port) do |src, dst|\n  yield src, dst\nend\n"}},{"id":"each_input_coupling(&)-instance-method","html_id":"each_input_coupling(&amp;)-instance-method","name":"each_input_coupling","doc":"Calls *block* once for each external input coupling (EIC) in\n`#input_couplings`, passing that element as a parameter.","summary":"<p>Calls <em>block</em> once for each external input coupling (EIC) in <code><a href=\"../Quartz/Coupler.html#input_couplings(port:InputPort):Array(InputPort)-instance-method\">#input_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L131","def":{"name":"each_input_coupling","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"input_couplings.each do |src|\n  src.downward_ports.each do |dst|\n    yield src, dst\n  end\nend"}},{"id":"each_input_coupling(port:InputPort,&)-instance-method","html_id":"each_input_coupling(port:InputPort,&amp;)-instance-method","name":"each_input_coupling","doc":"Calls *block* once for each external input coupling (EIC) in\n`#input_couplings`, passing that element as a parameter. Given *port* is\nused to filter couplings having this port as a source.\nTODO check if port in input_couplings ?","summary":"<p>Calls <em>block</em> once for each external input coupling (EIC) in <code><a href=\"../Quartz/Coupler.html#input_couplings(port:InputPort):Array(InputPort)-instance-method\">#input_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L125","def":{"name":"each_input_coupling","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"port.downward_ports.each do |dst|\n  yield port, dst\nend"}},{"id":"each_input_coupling_reverse(port:InputPort,&)-instance-method","html_id":"each_input_coupling_reverse(port:InputPort,&amp;)-instance-method","name":"each_input_coupling_reverse","doc":"TODO doc","summary":"<p><span class=\"flag orange\">TODO</span>  doc</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L200","def":{"name":"each_input_coupling_reverse","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"input_couplings.each do |src|\n  src.downward_ports.each do |dst|\n    if dst == port\n      yield src, dst\n    end\n  end\nend"}},{"id":"each_internal_coupling(&)-instance-method","html_id":"each_internal_coupling(&amp;)-instance-method","name":"each_internal_coupling","doc":"Calls *block* once for each internal coupling (IC) in\n`#internal_couplings`, passing that element as a parameter.","summary":"<p>Calls <em>block</em> once for each internal coupling (IC) in <code><a href=\"../Quartz/Coupler.html#internal_couplings(port:OutputPort):Array(InputPort)-instance-method\">#internal_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L144","def":{"name":"each_internal_coupling","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"internal_couplings.each do |src|\n  src.siblings_ports.each do |dst|\n    yield src, dst\n  end\nend"}},{"id":"each_internal_coupling(port:OutputPort,&)-instance-method","html_id":"each_internal_coupling(port:OutputPort,&amp;)-instance-method","name":"each_internal_coupling","doc":"Calls *block* once for each internal coupling (IC) in\n`#internal_couplings`, passing that element as a parameter. Given *port*\nis used to filter couplings having this port as a source.","summary":"<p>Calls <em>block</em> once for each internal coupling (IC) in <code><a href=\"../Quartz/Coupler.html#internal_couplings(port:OutputPort):Array(InputPort)-instance-method\">#internal_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L138","def":{"name":"each_internal_coupling","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"port.siblings_ports.each do |dst|\n  yield port, dst\nend"}},{"id":"each_internal_coupling_reverse(port:InputPort,&)-instance-method","html_id":"each_internal_coupling_reverse(port:InputPort,&amp;)-instance-method","name":"each_internal_coupling_reverse","doc":"TODO doc","summary":"<p><span class=\"flag orange\">TODO</span>  doc</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L207","def":{"name":"each_internal_coupling_reverse","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"internal_couplings.each do |src|\n  src.siblings_ports.each do |dst|\n    if dst == port\n      yield src, dst\n    end\n  end\nend"}},{"id":"each_output_coupling(&)-instance-method","html_id":"each_output_coupling(&amp;)-instance-method","name":"each_output_coupling","doc":"Calls *block* once for each external output coupling (EOC) in\n`#output_couplings`, passing that element as a parameter.","summary":"<p>Calls <em>block</em> once for each external output coupling (EOC) in <code><a href=\"../Quartz/Coupler.html#output_couplings(port:OutputPort):Array(OutputPort)-instance-method\">#output_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L157","def":{"name":"each_output_coupling","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"output_couplings.each do |src|\n  src.upward_ports.each do |dst|\n    yield src, dst\n  end\nend"}},{"id":"each_output_coupling(port:OutputPort,&)-instance-method","html_id":"each_output_coupling(port:OutputPort,&amp;)-instance-method","name":"each_output_coupling","doc":"Calls *block* once for each external output coupling (EOC) in\n`#output_couplings`, passing that element as a parameter. Given *port* is\nused to filter couplings having this port as a source.","summary":"<p>Calls <em>block</em> once for each external output coupling (EOC) in <code><a href=\"../Quartz/Coupler.html#output_couplings(port:OutputPort):Array(OutputPort)-instance-method\">#output_couplings</a></code>, passing that element as a parameter.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L151","def":{"name":"each_output_coupling","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"port.upward_ports.each do |dst|\n  yield port, dst\nend"}},{"id":"each_output_coupling_reverse(port:OutputPort,&)-instance-method","html_id":"each_output_coupling_reverse(port:OutputPort,&amp;)-instance-method","name":"each_output_coupling_reverse","doc":"TODO doc","summary":"<p><span class=\"flag orange\">TODO</span>  doc</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L214","def":{"name":"each_output_coupling_reverse","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"output_couplings.each do |src|\n  src.upward_ports.each do |dst|\n    if dst == port\n      yield src, dst\n    end\n  end\nend"}},{"id":"find_direct_couplings(&block:OutputPort,InputPort,Array(Proc(Enumerable(Any),Enumerable(Any)))->)-instance-method","html_id":"find_direct_couplings(&amp;block:OutputPort,InputPort,Array(Proc(Enumerable(Any),Enumerable(Any)))-&gt;)-instance-method","name":"find_direct_couplings","doc":"Finds and yields direct connections in the coupling graph of *self*.","summary":"<p>Finds and yields direct connections in the coupling graph of <em>self</em>.</p>","abstract":false,"args":[],"args_string":"(&block : OutputPort, InputPort, Array(Proc(Enumerable(Any), Enumerable(Any))) -> )","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L538","def":{"name":"find_direct_couplings","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(OutputPort, InputPort, Array(Proc(Enumerable(Any), Enumerable(Any))) -> )"},"return_type":"","visibility":"Public","body":"couplings = [] of ::Tuple(Port, Port)\ncoupling_set = Hash(::Tuple(Port, Port), Array(Proc(Enumerable(Any), Enumerable(Any)))).new do |h, k|\n  h[k] = Array(Proc(Enumerable(Any), Enumerable(Any))).new\nend\nself.each_internal_coupling do |s, d|\n  couplings << {s, d}\n  if self.has_transducer_for?(s, d)\n    coupling_set[{s, d}] << (self.transducer_for(s, d))\n  end\nend\nmappers = Array(Proc(Enumerable(Any), Enumerable(Any))).new\nwhile !couplings.empty?\n  osrc, odst = couplings.pop\n  if (!osrc.host.is_a?(Coupler)) && (!odst.host.is_a?(Coupler))\n    yield osrc.as(OutputPort), odst.as(InputPort), coupling_set[{osrc, odst}]\n  else\n    if osrc.host.is_a?(Coupler)\n      route = [{osrc, odst}]\n      while !route.empty?\n        rsrc, _ = route.pop\n        coupler = rsrc.host.as(Coupler)\n        coupler.each_output_coupling_reverse(rsrc.as(OutputPort)) do |src, dst|\n          if coupler.has_transducer_for?(src, dst)\n            mappers << (coupler.transducer_for(src, dst))\n          end\n          if src.host.is_a?(Coupler)\n            route.push({src, dst})\n          else\n            if coupling_set.has_key?({src, odst})\n            else\n              couplings.push({src, odst})\n              coupling_set[{src, odst}] = mappers.reverse!.concat(coupling_set[{osrc, odst}])\n            end\n          end\n        end\n      end\n    else\n      if odst.host.is_a?(Coupler)\n        route = [{osrc, odst}]\n        while !route.empty?\n          _, rdst = route.pop\n          coupler = rdst.host.as(Coupler)\n          coupler.each_input_coupling(rdst.as(InputPort)) do |src, dst|\n            if coupler.has_transducer_for?(src, dst)\n              mappers << (coupler.transducer_for(src, dst))\n            end\n            if dst.host.is_a?(Coupler)\n              route.push({src, dst})\n            else\n              if coupling_set.has_key?({osrc, dst})\n              else\n                couplings.push({osrc, dst})\n                coupling_set[{osrc, dst}] = coupling_set[{osrc, odst}].dup.concat(mappers)\n              end\n            end\n          end\n        end\n      end\n    end\n  end\n  mappers.clear\nend\n"}},{"id":"has_child?(name:Name):Bool-instance-method","html_id":"has_child?(name:Name):Bool-instance-method","name":"has_child?","doc":"Returns whether *self* has a child named like *name*","summary":"<p>Returns whether <em>self</em> has a child named like <em>name</em></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L91","def":{"name":"has_child?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"children.has_key?(name)"}},{"id":"has_child?(model:Coupleable):Bool-instance-method","html_id":"has_child?(model:Coupleable):Bool-instance-method","name":"has_child?","doc":"Returns whether given *model* is a child of *self*","summary":"<p>Returns whether given <em>model</em> is a child of <em>self</em></p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Coupleable"}],"args_string":"(model : Coupleable) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L86","def":{"name":"has_child?","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Coupleable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"children.has_key?(model.name)"}},{"id":"has_transducer_for?(src:Port,dst:Port):Bool-instance-method","html_id":"has_transducer_for?(src:Port,dst:Port):Bool-instance-method","name":"has_transducer_for?","doc":"Whether the given coupling has an associated transducer.","summary":"<p>Whether the given coupling has an associated transducer.</p>","abstract":false,"args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"Port"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"Port"}],"args_string":"(src : Port, dst : Port) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L112","def":{"name":"has_transducer_for?","args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"Port"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"Port"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@transducers.try(&.has_key?({src, dst})) || false"}},{"id":"input_couplings(port:InputPort):Array(InputPort)-instance-method","html_id":"input_couplings(port:InputPort):Array(InputPort)-instance-method","name":"input_couplings","doc":"Returns all external input couplings attached to the given input *port*.","summary":"<p>Returns all external input couplings attached to the given input <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"args_string":"(port : InputPort) : Array(InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L47","def":{"name":"input_couplings","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"InputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputPort)","visibility":"Public","body":"port.downward_ports"}},{"id":"internal_couplings(port:OutputPort):Array(InputPort)-instance-method","html_id":"internal_couplings(port:OutputPort):Array(InputPort)-instance-method","name":"internal_couplings","doc":"Returns all internal couplings attached to the given output *port*.","summary":"<p>Returns all internal couplings attached to the given output <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort) : Array(InputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L37","def":{"name":"internal_couplings","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(InputPort)","visibility":"Public","body":"port.siblings_ports"}},{"id":"output_couplings(port:OutputPort):Array(OutputPort)-instance-method","html_id":"output_couplings(port:OutputPort):Array(OutputPort)-instance-method","name":"output_couplings","doc":"Returns all external output couplings attached to the given output *port*.","summary":"<p>Returns all external output couplings attached to the given output <em>port</em>.</p>","abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"args_string":"(port : OutputPort) : Array(OutputPort)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L42","def":{"name":"output_couplings","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":"OutputPort"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(OutputPort)","visibility":"Public","body":"port.upward_ports"}},{"id":"remove_child(model:Model)-instance-method","html_id":"remove_child(model:Model)-instance-method","name":"remove_child","doc":"Deletes the given *model* from childrens","summary":"<p>Deletes the given <em>model</em> from childrens</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"args_string":"(model : Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L63","def":{"name":"remove_child","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.delete(model.name)"}},{"id":"transducer_for(src:Port,dst:Port)-instance-method","html_id":"transducer_for(src:Port,dst:Port)-instance-method","name":"transducer_for","doc":"Returns the transducer associated with the given coupling.","summary":"<p>Returns the transducer associated with the given coupling.</p>","abstract":false,"args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"Port"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"Port"}],"args_string":"(src : Port, dst : Port)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L117","def":{"name":"transducer_for","args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":"Port"},{"name":"dst","doc":null,"default_value":"","external_name":"dst","restriction":"Port"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"transducers[{src, dst}]"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler/CouplingIterator","path":"Quartz/Coupler/CouplingIterator.html","kind":"class","full_name":"Quartz::Coupler::CouplingIterator","name":"CouplingIterator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/coupler.cr","line_number":186,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler","kind":"module","full_name":"Quartz::Coupler","name":"Coupler"},"doc":"TODO\n:nodoc:","summary":"<p><span class=\"flag orange\">TODO</span>  :nodoc:</p>","class_methods":[],"constructors":[{"id":"new(coupler:Coupler,which:Symbol,reverse:Bool=false)-class-method","html_id":"new(coupler:Coupler,which:Symbol,reverse:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"coupler","doc":null,"default_value":"","external_name":"coupler","restriction":"Coupler"},{"name":"which","doc":null,"default_value":"","external_name":"which","restriction":"Symbol"},{"name":"reverse","doc":null,"default_value":"false","external_name":"reverse","restriction":"Bool"}],"args_string":"(coupler : Coupler, which : Symbol, reverse : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L189","def":{"name":"new","args":[{"name":"coupler","doc":null,"default_value":"","external_name":"coupler","restriction":"Coupler"},{"name":"which","doc":null,"default_value":"","external_name":"which","restriction":"Symbol"},{"name":"reverse","doc":null,"default_value":"false","external_name":"reverse","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(coupler, which, reverse)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L192","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"rewind-instance-method","html_id":"rewind-instance-method","name":"rewind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/coupler.cr#L195","def":{"name":"rewind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DirectConnectionVisitor","path":"Quartz/DirectConnectionVisitor.html","kind":"class","full_name":"Quartz::DirectConnectionVisitor","name":"DirectConnectionVisitor","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/direct_connection_visitor.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(root:CoupledModel)-class-method","html_id":"new(root:CoupledModel)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"CoupledModel"}],"args_string":"(root : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr#L5","def":{"name":"new","args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(root)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"end_visit(model:CoupledModel)-instance-method","html_id":"end_visit(model:CoupledModel)-instance-method","name":"end_visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr#L28","def":{"name":"end_visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if model == @root\n  iterator = model.each_child.each do |c|\n    model.remove_child(c)\n  end\n  @children.each do |c|\n    model << c\n  end\n  model.find_direct_couplings do |src, dst, mappers|\n    @new_internal_couplings[src] << dst\n    if mappers.size == 1\n      @transducers[{src, dst}] = mappers.first\n    else\n      if mappers.size > 1\n        @transducers[{src, dst}] = ->(values : Enumerable(Any)) do\n          mappers.each do |mapper|\n            values = mapper.call(values)\n          end\n          values\n        end\n      end\n    end\n  end\n  internal_couplings = model.internal_couplings.clear\n  transducers = model.transducers.clear\n  @new_internal_couplings.each do |src, ary|\n    src.siblings_ports.clear\n    src.upward_ports.clear\n    ary.each do |dst|\n      src.siblings_ports << dst\n      dst.downward_ports.clear\n      if @transducers.has_key?({src, dst})\n        transducers[{src, dst}] = @transducers[{src, dst}]\n      end\n    end\n    internal_couplings << src\n  end\nend"}},{"id":"visit(model:CoupledModel)-instance-method","html_id":"visit(model:CoupledModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr#L13","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if model == @root\n  return\nend\nmodel.each_internal_coupling do |src, dst|\n  if src.host.is_a?(AtomicModel) && dst.host.is_a?(AtomicModel)\n    @new_internal_couplings[src] << dst\n    if model.has_transducer_for?(src, dst)\n      @transducers[{src, dst}] = model.transducer_for(src, dst)\n    end\n  end\nend\n"}},{"id":"visit(model)-instance-method","html_id":"visit(model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/direct_connection_visitor.cr#L69","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@children << model"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DotVisitor","path":"Quartz/DotVisitor.html","kind":"class","full_name":"Quartz::DotVisitor","name":"DotVisitor","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dot_visitor.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(root:CoupledModel,io:IO)-class-method","html_id":"new(root:CoupledModel,io:IO)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"CoupledModel"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(root : CoupledModel, io : IO)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L5","def":{"name":"new","args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":"CoupledModel"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(root, io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"end_visit(model:CoupledModel)-instance-method","html_id":"end_visit(model:CoupledModel)-instance-method","name":"end_visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L34","def":{"name":"end_visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if model == @root\n  model.find_direct_couplings do |src, dst|\n    @io.puts(\"\\\"#{src.host.name.to_s}\\\" -> \\\"#{dst.host.name.to_s}\\\" [label=\\\"#{src.name.to_s} → #{dst.name.to_s}\\\"];\")\n  end\nelse\n  model.each_internal_coupling do |src, dst|\n    if src.host.is_a?(AtomicModel) && dst.host.is_a?(AtomicModel)\n      @io.puts(\"\\\"#{src.host.name.to_s}\\\" -> \\\"#{dst.host.name.to_s}\\\" [label=\\\"#{src.name.to_s} → #{dst.name.to_s}\\\"];\")\n    end\n  end\n  @io.puts(\"};\")\nend"}},{"id":"end_visit(model:MultiComponent::Model)-instance-method","html_id":"end_visit(model:MultiComponent::Model)-instance-method","name":"end_visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"args_string":"(model : MultiComponent::Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L55","def":{"name":"end_visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io.puts(\"};\")"}},{"id":"to_graph-instance-method","html_id":"to_graph-instance-method","name":"to_graph","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L8","def":{"name":"to_graph","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io.puts(\"digraph\")\n@io.puts('{')\n@io.puts(\"compound = true;\")\n@io.puts(\"rankdir = LR;\")\n@io.puts(\"node [shape = box];\")\n@root.accept(self)\n@io.puts('}')\n"}},{"id":"visit(model:CoupledModel)-instance-method","html_id":"visit(model:CoupledModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L26","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if model == @root\n  return\nend\n@io.puts(\"subgraph \\\"cluster_#{model.name}\\\"\")\n@io.puts('{')\n@io.puts(\"label = \\\"#{model.name}\\\";\")\n"}},{"id":"visit(model:MultiComponent::Model)-instance-method","html_id":"visit(model:MultiComponent::Model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"args_string":"(model : MultiComponent::Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L49","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io.puts(\"subgraph \\\"cluster_#{model.name}\\\"\")\n@io.puts('{')\n@io.puts(\"label = \\\"#{model.name}\\\";\")\n"}},{"id":"visit(model)-instance-method","html_id":"visit(model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L59","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io.puts(\"\\\"#{model.name}\\\" [style=filled];\")"}},{"id":"visit_children?(model:MultiComponent::Model)-instance-method","html_id":"visit_children?(model:MultiComponent::Model)-instance-method","name":"visit_children?","doc":"Visit multipdevs components so that they appear in the graph","summary":"<p>Visit multipdevs components so that they appear in the graph</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"args_string":"(model : MultiComponent::Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dot_visitor.cr#L22","def":{"name":"visit_children?","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE","path":"Quartz/DSDE.html","kind":"module","full_name":"Quartz::DSDE","name":"DSDE","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/dsde/executive.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr"},{"filename":"quartz/dsde/coupled.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coupled.cr"},{"filename":"quartz/dsde/coordinator.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coordinator.cr"},{"filename":"quartz/dsde/root.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/CoupledModel","path":"Quartz/DSDE/CoupledModel.html","kind":"class","full_name":"Quartz::DSDE::CoupledModel","name":"CoupledModel","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupler","kind":"module","full_name":"Quartz::Coupler","name":"Coupler"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dsde/coupled.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coupled.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE","kind":"module","full_name":"Quartz::DSDE","name":"DSDE"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(name:Name,executive:Executive=Executive.new(:executive))-class-method","html_id":"new(name:Name,executive:Executive=Executive.new(:executive))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"},{"name":"executive","doc":null,"default_value":"Executive.new(:executive)","external_name":"executive","restriction":"Executive"}],"args_string":"(name : Name, executive : Executive = <span class=\"t\">Executive</span>.<span class=\"k\">new</span>(<span class=\"n\">:executive</span>))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coupled.cr#L7","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"},{"name":"executive","doc":null,"default_value":"Executive.new(:executive)","external_name":"executive","restriction":"Executive"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, executive)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"executive:Quartz::DSDE::Executive-instance-method","html_id":"executive:Quartz::DSDE::Executive-instance-method","name":"executive","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::DSDE::Executive","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coupled.cr#L5","def":{"name":"executive","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@executive"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/DynamicCoordinator","path":"Quartz/DSDE/DynamicCoordinator.html","kind":"class","full_name":"Quartz::DSDE::DynamicCoordinator","name":"DynamicCoordinator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dsde/coordinator.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coordinator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/RootCoordinator","kind":"class","full_name":"Quartz::DSDE::RootCoordinator","name":"RootCoordinator"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE","kind":"module","full_name":"Quartz::DSDE","name":"DSDE"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(model,simulation)-class-method","html_id":"new(model,simulation)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""}],"args_string":"(model, simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coordinator.cr#L6","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(time : TimePoint, elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/coordinator.cr#L11","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"coupled = @model.as(Quartz::DSDE::CoupledModel)\nhandle_external_inputs(time)\nexecutive = coupled.executive.processor\n@synchronize.each do |receiver|\n  if receiver.is_a?(Processor) && (receiver.model == coupled.executive)\n    next\n  end\n  perform_transition_for(receiver.as(Processor | TimeBase), time)\nend\nif executive.sync\n  current_children = coupled.each_child.to_set\n  perform_transition_for(executive, time)\n  new_children = coupled.each_child.to_set\n  to_remove = current_children - new_children\n  to_remove.each do |old_model|\n    old_processor = old_model.processor\n    elapsed_duration = nil\n    if old_processor.is_a?(DTSS::Simulator)\n      delta_t = (old_model.as(DTSS::AtomicModel)).time_delta\n      time_base = @time_bases[delta_t]\n      time_base.processors.delete(old_processor)\n      if time_base.processors.empty?\n        @time_bases.delete(delta_t)\n        @event_set.cancel_event(time_base.as(Schedulable))\n        elapsed_duration = @time_cache.elapsed_duration_of(time_base.as(Schedulable))\n        @time_cache.release_event(time_base.as(Schedulable))\n      end\n    else\n      if !(@event_set.duration_of(old_processor.as(Schedulable))).infinite?\n        @event_set.cancel_event(old_processor.as(Schedulable))\n      end\n      elapsed_duration = @time_cache.elapsed_duration_of(old_processor.as(Schedulable))\n      @time_cache.release_event(old_processor.as(Schedulable))\n    end\n    Log.debug do\n      String.build do |str|\n        ((str << '\\'') << old_model.name) << \"' terminated (\"\n        ((str << \"elapsed: \") << elapsed_duration) << ')'\n      end\n    end\n  end\n  to_initialize = new_children - current_children\n  to_initialize.each do |new_model|\n    visitor = ProcessorAllocator.new(@simulation, self)\n    new_model.accept(visitor)\n    processor = new_model.processor.not_nil!\n    if processor.is_a?(DTSS::Simulator)\n      delta_t = (processor.model.as(DTSS::AtomicModel)).time_delta\n      time_base = (      __temp_26 = delta_t\n      @time_bases[__temp_26]? || (@time_bases[__temp_26] = TimeBase.new(delta_t))\n)\n      time_base.processors << processor\n      processor.initialize_processor(time)\n      if time_base.processors.size == 1\n        @time_cache.retain_event(time_base, Duration.zero(time_base.time_next.precision))\n        @event_set.plan_event(time_base, time_base.time_next)\n      end\n    else\n      elapsed, planned_duration = processor.initialize_processor(time)\n      @time_cache.retain_event(processor.as(Schedulable), elapsed)\n      if !planned_duration.infinite?\n        @event_set.plan_event(processor.as(Schedulable), planned_duration)\n      else\n        (processor.as(Schedulable)).planned_phase = planned_duration\n      end\n    end\n  end\nend\nbag.clear\n@synchronize.clear\nif coupled.count_observers > 0\n  coupled.notify_observers(OBS_INFO_TRANSITIONS_PHASE.merge({:time => time, :elapsed => elapsed}))\nend\n@event_set.imminent_duration.fixed\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/Executive","path":"Quartz/DSDE/Executive.html","kind":"class","full_name":"Quartz::DSDE::Executive","name":"Executive","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dsde/executive.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_CHECKS","name":"STATE_CHECKS","value":"{state_complete: true}","doc":"FIXME","summary":"<p><span class=\"flag yellow\">FIXME</span> </p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE","kind":"module","full_name":"Quartz::DSDE","name":"DSDE"},"doc":"FIXME","summary":"<p><span class=\"flag yellow\">FIXME</span> </p>","class_methods":[],"constructors":[{"id":"new(name,network:CoupledModel?=nil)-class-method","html_id":"new(name,network:CoupledModel?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"network","doc":null,"default_value":"nil","external_name":"network","restriction":"CoupledModel | ::Nil"}],"args_string":"(name, network : CoupledModel? = <span class=\"n\">nil</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L14","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"network","doc":null,"default_value":"nil","external_name":"network","restriction":"CoupledModel | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, network)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"external_transition(bag)-instance-method","html_id":"external_transition(bag)-instance-method","name":"external_transition","doc":null,"summary":null,"abstract":false,"args":[{"name":"bag","doc":null,"default_value":"","external_name":"bag","restriction":""}],"args_string":"(bag)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L18","def":{"name":"external_transition","args":[{"name":"bag","doc":null,"default_value":"","external_name":"bag","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bag[input_port(:add_model)].flatten.each do |any|\n  req = any.as_h\n  new_model = req[:coupleable].raw.as(Coupleable)\n  add_model_to_network(new_model)\nend\nbag[input_port(:add_input_port)].flatten.each do |any|\n  req = any.as_h\n  add_input_port_to_network(req[:model].raw.as(Name), req[:port].raw.as(Name))\nend\nbag[input_port(:add_output_port)].flatten.each do |any|\n  req = any.as_h\n  add_output_port_to_network(req[:model].raw.as(Name), req[:port].raw.as(Name))\nend\nbag[input_port(:add_coupling)].flatten.each do |any|\n  req = any.as_h\n  add_coupling_to_network(req[:src_port].raw.as(Name), to: req[:dst_port].raw.as(Name), between: req[:src].raw.as(Name), and: req[:dst].raw.as(Name))\nend\nbag[input_port(:remove_coupling)].flatten.each do |any|\n  req = any.as_h\n  remove_coupling_from_network(req[:src_port].raw.as(Name), from: req[:dst_port].raw.as(Name), between: req[:src].raw.as(Name), and: req[:dst].raw.as(Name))\nend\nbag[input_port(:remove_input_port)].flatten.each do |any|\n  req = any.as_h\n  remove_input_port_from_network(req[:model].raw.as(Name), req[:port].raw.as(Name))\nend\nbag[input_port(:remove_output_port)].flatten.each do |any|\n  req = any.as_h\n  remove_output_port_from_network(req[:model].raw.as(Name), req[:port].raw.as(Name))\nend\nbag[input_port(:remove_model)].flatten.each do |any|\n  req = any.as_h\n  remove_model_from_network(req[:model].raw.as(Name))\nend\nself.phase = :answer\n"}},{"id":"initial_state=(state:State)-instance-method","html_id":"initial_state=(state:State)-instance-method","name":"initial_state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"State"}],"args_string":"(state : State)","source_link":null,"def":{"name":"initial_state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@initial_state = state"}},{"id":"initial_state=(state:Quartz::State)-instance-method","html_id":"initial_state=(state:Quartz::State)-instance-method","name":"initial_state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"args_string":"(state : Quartz::State)","source_link":null,"def":{"name":"initial_state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(InvalidStateError.new(\"#{self} expects an initial state of type #{self.class}::State, not #{state.class}\"))"}},{"id":"internal_transition-instance-method","html_id":"internal_transition-instance-method","name":"internal_transition","doc":"Internal transition function (δint), called when the model should be\nactivated, e.g when `#elapsed` reaches `#time_advance`\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef internal_transition\n  self.phase = :steady\nend\n```","summary":"<p>Internal transition function (δint), called when the model should be activated, e.g when <code>#elapsed</code> reaches <code><a href=\"../../Quartz/DSDE/Executive.html#time_advance:Duration-instance-method\">#time_advance</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L73","def":{"name":"internal_transition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.phase = :idle"}},{"id":"network:Quartz::DSDE::CoupledModel?-instance-method","html_id":"network:Quartz::DSDE::CoupledModel?-instance-method","name":"network","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::DSDE::CoupledModel?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L5","def":{"name":"network","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@network"}},{"id":"network=(network)-instance-method","html_id":"network=(network)-instance-method","name":"network=","doc":null,"summary":null,"abstract":false,"args":[{"name":"network","doc":null,"default_value":"","external_name":"network","restriction":""}],"args_string":"(network)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L5","def":{"name":"network=","args":[{"name":"network","doc":null,"default_value":"","external_name":"network","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@network = network"}},{"id":"output-instance-method","html_id":"output-instance-method","name":"output","doc":"The output function (λ)\n\nOverride this method to implement the appropriate behavior of\nyour model. See `#post` to send values to output ports.\n\nExample:\n```\ndef output\n  post(42, :output)\nend","summary":"<p>The output function (λ)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L77","def":{"name":"output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"post(\"\\u0006\", :ack)"}},{"id":"phase-instance-method","html_id":"phase-instance-method","name":"phase","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"state.phase"}},{"id":"phase=(phase)-instance-method","html_id":"phase=(phase)-instance-method","name":"phase=","doc":null,"summary":null,"abstract":false,"args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":""}],"args_string":"(phase)","source_link":null,"def":{"name":"phase=","args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"state.phase = phase"}},{"id":"state-instance-method","html_id":"state-instance-method","name":"state","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state.as(State)"}},{"id":"state=(state:State)-instance-method","html_id":"state=(state:State)-instance-method","name":"state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"State"}],"args_string":"(state : State)","source_link":null,"def":{"name":"state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state = state"}},{"id":"state=(state:Quartz::State)-instance-method","html_id":"state=(state:Quartz::State)-instance-method","name":"state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"args_string":"(state : Quartz::State)","source_link":null,"def":{"name":"state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(InvalidStateError.new(\"#{self} expects a state of type #{self.class}::State, not #{state.class}\"))"}},{"id":"time_advance:Duration-instance-method","html_id":"time_advance:Duration-instance-method","name":"time_advance","doc":"Time advance function (ta), called after each transition to give a\nchance to *self* to be active.\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef time_advance\n  Quartz.infinity\nend\n```","summary":"<p>Time advance function (ta), called after each transition to give a chance to <em>self</em> to be active.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr#L64","def":{"name":"time_advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"case phase\nwhen :answer\n  Duration.zero(model_precision)\nelse\n  Duration.infinity(model_precision)\nend"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/Executive/State","path":"Quartz/DSDE/Executive/State.html","kind":"class","full_name":"Quartz::DSDE::Executive::State","name":"State","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/State","kind":"class","full_name":"Quartz::State","name":"State"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/State","kind":"class","full_name":"Quartz::State","name":"State"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dsde/executive.cr","line_number":12,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/executive.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_VARS","name":"STATE_VARS","value":"[{name: phase, type: Symbol, value: :idle, block: }] of Nil","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/Executive","kind":"class","full_name":"Quartz::DSDE::Executive","name":"Executive"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"phase:Symbol-instance-method","html_id":"phase:Symbol-instance-method","name":"phase","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"@phase"}},{"id":"phase=(phase:Symbol)-instance-method","html_id":"phase=(phase:Symbol)-instance-method","name":"phase=","doc":null,"summary":null,"abstract":false,"args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Symbol"}],"args_string":"(phase : Symbol)","source_link":null,"def":{"name":"phase=","args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@phase = phase"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/RootCoordinator","path":"Quartz/DSDE/RootCoordinator.html","kind":"class","full_name":"Quartz::DSDE::RootCoordinator","name":"RootCoordinator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/DynamicCoordinator","kind":"class","full_name":"Quartz::DSDE::DynamicCoordinator","name":"DynamicCoordinator"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulable","kind":"module","full_name":"Quartz::Simulable","name":"Simulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/DynamicCoordinator","kind":"class","full_name":"Quartz::DSDE::DynamicCoordinator","name":"DynamicCoordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dsde/root.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulable","kind":"module","full_name":"Quartz::Simulable","name":"Simulable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE","kind":"module","full_name":"Quartz::DSDE","name":"DSDE"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"advance(*args,**options)-instance-method","html_id":"advance(*args,**options)-instance-method","name":"advance","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr#L10","def":{"name":"advance","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@event_set.advance(*args, **options)"}},{"id":"advance(*args,**options,&)-instance-method","html_id":"advance(*args,**options,&amp;)-instance-method","name":"advance","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr#L10","def":{"name":"advance","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@event_set.advance(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"current_time:TimePoint-instance-method","html_id":"current_time:TimePoint-instance-method","name":"current_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr#L6","def":{"name":"current_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@event_set.current_time"}},{"id":"initialize_state(time:TimePoint):Duration-instance-method","html_id":"initialize_state(time:TimePoint):Duration-instance-method","name":"initialize_state","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr#L13","def":{"name":"initialize_state","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"(initialize_processor(time))[1]"}},{"id":"step(elapsed:Duration):Duration-instance-method","html_id":"step(elapsed:Duration):Duration-instance-method","name":"step","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dsde/root.cr#L18","def":{"name":"step","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"collect_outputs(elapsed)\nperform_transitions(current_time, elapsed)\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS","path":"Quartz/DTSS.html","kind":"module","full_name":"Quartz::DTSS","name":"DTSS","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/dtss/atomic.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr"},{"filename":"quartz/dtss/simulator.cr","line_number":1,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","path":"Quartz/DTSS/AtomicModel.html","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dtss/atomic.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_CHECKS","name":"STATE_CHECKS","value":"{state_complete: false}","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS","kind":"module","full_name":"Quartz::DTSS","name":"DTSS"},"doc":"This class represent a PDTSS atomic model.","summary":"<p>This class represent a PDTSS atomic model.</p>","class_methods":[{"id":"check(*attributes:Symbol,**kwargs)-class-method","html_id":"check(*attributes:Symbol,**kwargs)-class-method","name":"check","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(*attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L7","def":{"name":"check","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if kwargs.empty?\n  raise(ArgumentError.new(\"You must inform at least one verification rule\"))\nend\nkwargs.each do |name, value|\n  verifier = case name\n  when :presence\n    if value.is_a?(NamedTuple)\n      Verifiers::PresenceChecker.new(*attributes, **value)\n    else\n      Verifiers::PresenceChecker.new(*attributes)\n    end\n  when :numericality\n    if value.is_a?(NamedTuple)\n      Verifiers::NumericalityChecker.new(*attributes, **value)\n    else\n      Verifiers::NumericalityChecker.new(*attributes)\n    end\n  else\n    raise(ArgumentError.new(\"Unknown verifier \\\"#{name}\\\"\"))\n  end\n  verifiers.push(verifier)\nend\n"}},{"id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::RuntimeChecker\n  def validate(model)\n    if some_test\n      model.errors.add(:phase, \"This model state is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">RuntimeValidator</span>.<span class=\"k\">class</span>, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L7","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(**kwargs)\nverifiers.push(verifier)\n"}},{"id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::EachChecker\n  def check_each(model, attribute, value)\n    if some_test\n      model.errors.add(attribute, \"This model attribute is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">EachChecker</span>.<span class=\"k\">class</span>, *attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L7","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(*attributes, **kwargs)\nverifiers.push(verifier)\n"}},{"id":"clear_verifiers-class-method","html_id":"clear_verifiers-class-method","name":"clear_verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L7","def":{"name":"clear_verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers.try(&.clear)"}},{"id":"precision_scale:Scale-class-method","html_id":"precision_scale:Scale-class-method","name":"precision_scale","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L15","def":{"name":"precision_scale","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@time_delta.precision"}},{"id":"time_delta:Duration-class-method","html_id":"time_delta:Duration-class-method","name":"time_delta","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L9","def":{"name":"time_delta","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@@time_delta"}},{"id":"time_delta=(time_delta:Duration)-class-method","html_id":"time_delta=(time_delta:Duration)-class-method","name":"time_delta=","doc":null,"summary":null,"abstract":false,"args":[{"name":"time_delta","doc":null,"default_value":"","external_name":"time_delta","restriction":"Duration"}],"args_string":"(time_delta : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L9","def":{"name":"time_delta=","args":[{"name":"time_delta","doc":null,"default_value":"","external_name":"time_delta","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@time_delta = time_delta"}},{"id":"verifiers-class-method","html_id":"verifiers-class-method","name":"verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L7","def":{"name":"verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers || (@@verifiers = Array(Verifiers::RuntimeChecker).new)"}}],"constructors":[{"id":"new(name,state,initial_state=nil)-class-method","html_id":"new(name,state,initial_state=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"initial_state","doc":null,"default_value":"nil","external_name":"initial_state","restriction":""}],"args_string":"(name, state, initial_state = <span class=\"n\">nil</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L36","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""},{"name":"initial_state","doc":null,"default_value":"nil","external_name":"initial_state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, state, initial_state)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(name)-class-method","html_id":"new(name)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L32","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L68","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((io << \"<\") << self.class.name) << \": name=\") << @name\nio << \", time_delta=\"\ntime_delta.to_s(io)\nio << \">\"\nnil\n"}},{"id":"model_precision:Scale-instance-method","html_id":"model_precision:Scale-instance-method","name":"model_precision","doc":"Returns the precision associated with the class.","summary":"<p>Returns the precision associated with the class.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L20","def":{"name":"model_precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@time_delta.precision"}},{"id":"output-instance-method","html_id":"output-instance-method","name":"output","doc":"The output function (λ)\n\nOverride this method to implement the appropriate behavior of\nyour model. See `#post` to send values to output ports.\n\nExample:\n```\ndef output\n  post(42, :output)\nend","summary":"<p>The output function (λ)</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L54","def":{"name":"output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"time_delta:Duration-instance-method","html_id":"time_delta:Duration-instance-method","name":"time_delta","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L24","def":{"name":"time_delta","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@@time_delta"}},{"id":"transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"transition","doc":null,"summary":null,"abstract":true,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L42","def":{"name":"transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"input(*names)-macro","html_id":"input(*names)-macro","name":"input","doc":"Defines default input ports for each of the given arguments.\nThose default input ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  input port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_input_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbol literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  input :in1, \"in2\", in3\nend\n```","summary":"<p>Defines default input ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L5","def":{"name":"input","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._input_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}},{"id":"output(*names)-macro","html_id":"output(*names)-macro","name":"output","doc":"Defines default output ports for each of the given arguments.\nThose default output ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  output port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_output_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbols literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  output :out1, \"out2\", out3\nend\n```","summary":"<p>Defines default output ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/atomic.cr#L5","def":{"name":"output","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._output_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/Simulator","path":"Quartz/DTSS/Simulator.html","kind":"class","full_name":"Quartz::DTSS::Simulator","name":"Simulator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dtss/simulator.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS","kind":"module","full_name":"Quartz::DTSS","name":"DTSS"},"doc":"This class defines a DTSS simulator.","summary":"<p>This class defines a DTSS simulator.</p>","class_methods":[],"constructors":[{"id":"new(model:Model,simulation:Simulation)-class-method","html_id":"new(model:Model,simulation:Simulation)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"args_string":"(model : Model, simulation : Simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr#L7","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collect_outputs(_elapsed:Duration):Hash(Quartz::OutputPort,Array(Quartz::Any))-instance-method","html_id":"collect_outputs(_elapsed:Duration):Hash(Quartz::OutputPort,Array(Quartz::Any))-instance-method","name":"collect_outputs","doc":null,"summary":null,"abstract":false,"args":[{"name":"_elapsed","doc":null,"default_value":"","external_name":"_elapsed","restriction":"Duration"}],"args_string":"(_elapsed : Duration) : Hash(Quartz::OutputPort, Array(Quartz::Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr#L63","def":{"name":"collect_outputs","args":[{"name":"_elapsed","doc":null,"default_value":"","external_name":"_elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Quartz::OutputPort, Array(Quartz::Any))","visibility":"Public","body":"(@model.as(DTSS::AtomicModel)).fetch_output!"}},{"id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","html_id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","name":"initialize_processor","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : ::Tuple(Duration, Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr#L18","def":{"name":"initialize_processor","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Duration, Duration)","visibility":"Public","body":"begin\n  atomic = @model.as(DTSS::AtomicModel)\n  @transition_count = 0_u32\n  atomic.__initialize_state__(self)\n  planned_duration = atomic.class.time_delta\n  if @run_validations && (atomic.invalid?(:initialization))\n    Log.error do\n      String.build do |str|\n        (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n        ((str << \" (context: 'init', time: \") << time) << \"). \"\n        (str << \"Errors: \") << atomic.errors.full_messages\n      end\n    end\n  end\n  Log.debug do\n    String.build do |str|\n      ((str << '\\'') << atomic.name) << \"' initialized (\"\n      ((str << \"time_next: \") << planned_duration) << ')'\n    end\n  end\n  if atomic.count_observers > 0\n    atomic.notify_observers(OBS_INFO_INIT_TRANSITION.merge({:time => time}))\n  end\n  elapsed = Duration.zero(atomic.model_precision, true)\n  {elapsed, planned_duration.fixed}\nrescue err : StrictVerificationFailed\n  atomic = @model.as(DTSS::AtomicModel)\n  Log.fatal do\n    String.build do |str|\n      (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n      ((str << \" (context: 'init', time: \") << time) << \"). \"\n      (str << \"Errors: \") << atomic.errors.full_messages\n    end\n  end\n  raise(err)\nend"}},{"id":"perform_transitions(time:TimePoint,elapsed:Duration,imminent:Bool=false):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration,imminent:Bool=false):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"},{"name":"imminent","doc":null,"default_value":"false","external_name":"imminent","restriction":"Bool"}],"args_string":"(time : TimePoint, elapsed : Duration, imminent : Bool = <span class=\"n\">false</span>) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr#L67","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"},{"name":"imminent","doc":null,"default_value":"false","external_name":"imminent","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"begin\n  atomic = @model.as(DTSS::AtomicModel)\n  bag = @bag || EMPTY_BAG\n  kind = nil\n  planned_duration = atomic.class.time_delta\n  if elapsed != planned_duration\n    raise(BadSynchronisationError.new(\"#{model.name} is unsynced (elapsed:#{elapsed}, bag size:#{bag.size}, time:#{time}).\"))\n  else\n    @transition_count = @transition_count + 1_u32\n    atomic.transition(bag)\n  end\n  bag.clear\n  Log.debug do\n    String.build do |str|\n      ((((str << '\\'') << atomic.name) << \"': \") << kind) << \" transition \"\n      ((str << \"time_next: \") << planned_duration) << ')'\n    end\n  end\n  if @run_validations && (atomic.invalid?(kind))\n    Log.error do\n      String.build do |str|\n        (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n        ((str << \" (context: '\") << kind) << \"').\"\n        (str << \"Errors: \") << atomic.errors.full_messages\n      end\n    end\n  end\n  if atomic.count_observers > 0\n    atomic.notify_observers({:time => time, :elapsed => elapsed})\n  end\n  planned_duration.fixed\nrescue err : StrictVerificationFailed\n  atomic = @model.as(DTSS::AtomicModel)\n  Log.fatal do\n    String.build do |str|\n      (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n      ((str << \" (context: '\") << kind) << \"').\"\n      (str << \"Errors: \") << atomic.errors.full_messages\n    end\n  end\n  raise(err)\nend"}},{"id":"transition_stats-instance-method","html_id":"transition_stats-instance-method","name":"transition_stats","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/simulator.cr#L12","def":{"name":"transition_stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{transition: @transition_count}"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Duration","path":"Quartz/Duration.html","kind":"struct","full_name":"Quartz::Duration","name":"Duration","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/RomainFranceschini/quartz/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/duration.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EPOCH","name":"EPOCH","value":"5","doc":"The *epoch constant* helps establishing the limiting multiplier of the\n`Duration` datatype together with `Scale::FACTOR`.","summary":"<p>The <em>epoch constant</em> helps establishing the limiting multiplier of the <code><a href=\"../Quartz/Duration.html\">Duration</a></code> datatype together with <code><a href=\"../Quartz/Scale.html#FACTOR\">Scale::FACTOR</a></code>.</p>"},{"id":"INFINITY","name":"INFINITY","value":"new(MULTIPLIER_INFINITE)","doc":"An infinite duration with a base scale.","summary":"<p>An infinite duration with a base scale.</p>"},{"id":"MULTIPLIER_INFINITE","name":"MULTIPLIER_INFINITE","value":"Float64::INFINITY","doc":"The infinite multiplier","summary":"<p>The infinite multiplier</p>"},{"id":"MULTIPLIER_LIMIT","name":"MULTIPLIER_LIMIT","value":"Scale::FACTOR ** EPOCH","doc":"The limiting multiplier of the `Duration` type.\n\nThe 1000^5 limit is chosen as the largest power of 1000 less than 2^53,\nthe point at which `Float64` ceases to exactly represent all integers.","summary":"<p>The limiting multiplier of the <code><a href=\"../Quartz/Duration.html\">Duration</a></code> type.</p>"},{"id":"MULTIPLIER_MAX","name":"MULTIPLIER_MAX","value":"MULTIPLIER_LIMIT - 1","doc":"The largest finite multiplier that can be represented by a `Duration`.","summary":"<p>The largest finite multiplier that can be represented by a <code><a href=\"../Quartz/Duration.html\">Duration</a></code>.</p>"},{"id":"MULTIPLIER_MIN","name":"MULTIPLIER_MIN","value":"0_i64","doc":"The smallest finite multiplier that can be represented by a `Duration`.","summary":"<p>The smallest finite multiplier that can be represented by a <code><a href=\"../Quartz/Duration.html\">Duration</a></code>.</p>"}],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"`Duration` is a fixed-point time data type which encapsulates a 64-bit\nbinary floating-point number.","summary":"<p><code><a href=\"../Quartz/Duration.html\">Duration</a></code> is a fixed-point time data type which encapsulates a 64-bit binary floating-point number.</p>","class_methods":[{"id":"from(n:Float)-class-method","html_id":"from(n:Float)-class-method","name":"from","doc":"Creates a `Duration` from a given `Float` between 0 and 1 and tries to\nassign an appropriate precision.\n\n```\nDuration.from(0.000034) # => Duration.new(34, Scale::MICRO)\n```","summary":"<p>Creates a <code><a href=\"../Quartz/Duration.html\">Duration</a></code> from a given <code>Float</code> between 0 and 1 and tries to assign an appropriate precision.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Float"}],"args_string":"(n : Float)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L47","def":{"name":"from","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"precision = 0\nwhile n < 1\n  n = n * Scale::FACTOR\n  precision = precision - 1\nend\nnew(n.to_i64, Scale.new(precision))\n"}},{"id":"infinity(precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","html_id":"infinity(precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","name":"infinity","doc":null,"summary":null,"abstract":false,"args":[{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"args_string":"(precision : Scale = <span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">BASE</span>, fixed : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L33","def":{"name":"infinity","args":[{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(MULTIPLIER_INFINITE, precision, fixed)"}},{"id":"zero(precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","html_id":"zero(precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","name":"zero","doc":null,"summary":null,"abstract":false,"args":[{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"args_string":"(precision : Scale = <span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">BASE</span>, fixed : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L37","def":{"name":"zero","args":[{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(0, precision, fixed)"}}],"constructors":[{"id":"new(m:Number=0_i64,precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","html_id":"new(m:Number=0_i64,precision:Scale=Scale::BASE,fixed:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"m","doc":null,"default_value":"0_i64","external_name":"m","restriction":"Number"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"args_string":"(m : Number = <span class=\"n\">0_i64</span>, precision : Scale = <span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">BASE</span>, fixed : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L56","def":{"name":"new","args":[{"name":"m","doc":null,"default_value":"0_i64","external_name":"m","restriction":"Number"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"},{"name":"fixed","doc":null,"default_value":"false","external_name":"fixed","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(m, precision, fixed)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"*(n:Number):Duration-instance-method","html_id":"*(n:Number):Duration-instance-method","name":"*","doc":"Multiply `self` by the given factor *n*.","summary":"<p>Multiply <code>self</code> by the given factor <em>n</em>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Number"}],"args_string":"(n : Number) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L209","def":{"name":"*","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"m = @multiplier * n\nprecision = @precision\nif m.nan?\n  raise(\"Not a duration\")\nend\nif m.infinite?\nelse\n  if @fixed\n    m = m.round\n  else\n    if n.abs < 1\n      while (((m % 1) > 0) && (m < (MULTIPLIER_LIMIT // Scale::FACTOR))) && (m > ((-MULTIPLIER_LIMIT) // Scale::FACTOR))\n        precision = precision - 1\n        m = m * Scale::FACTOR\n      end\n    else\n      while !((-MULTIPLIER_LIMIT) < m && m < MULTIPLIER_LIMIT)\n        precision = precision + 1\n        m = m / Scale::FACTOR\n      end\n    end\n  end\nend\nDuration.new(m, precision, @fixed)\n"}},{"id":"+(other:Duration):Duration-instance-method","html_id":"+(other:Duration):Duration-instance-method","name":"+","doc":"Adds two `Duration`s values.","summary":"<p>Adds two <code><a href=\"../Quartz/Duration.html\">Duration</a></code>s values.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"args_string":"(other : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L141","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"precision = @precision\nm = if @fixed && other.fixed?\n  if other.precision != @precision\n    raise(\"Duration addition operation requires same precision level between operands.\")\n  end\n  @multiplier + other.multiplier\nelse\n  if @fixed && (!other.fixed?)\n    @multiplier + (other.multiplier * (other.precision / precision))\n  else\n    if (!@fixed) && other.fixed?\n      precision = other.precision\n      (@multiplier * (@precision / precision)) + other.multiplier\n    else\n      tmp = if @precision < other.precision\n        @multiplier + (other.multiplier * (other.precision / precision))\n      else\n        if other.precision < @precision\n          precision = other.precision\n          (@multiplier * (@precision / precision)) + other.multiplier\n        else\n          @multiplier + other.multiplier\n        end\n      end\n      if tmp.infinite?\n      else\n        while !((-MULTIPLIER_LIMIT) < tmp && tmp < MULTIPLIER_LIMIT)\n          precision = precision + 1\n          tmp = tmp / Scale::FACTOR\n        end\n      end\n      tmp\n    end\n  end\nend\nDuration.new(m, precision, @fixed || other.fixed?)\n"}},{"id":"-(other:Duration):Duration-instance-method","html_id":"-(other:Duration):Duration-instance-method","name":"-","doc":"Substracts two `Duration`s values","summary":"<p>Substracts two <code><a href=\"../Quartz/Duration.html\">Duration</a></code>s values</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"args_string":"(other : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L175","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"precision = @precision\nm = if @fixed && other.fixed?\n  if other.precision != @precision\n    raise(\"Duration substraction operation requires same precision level between operands.\")\n  end\n  @multiplier - other.multiplier\nelse\n  if @fixed && (!other.fixed?)\n    @multiplier - (other.multiplier * (other.precision / @precision))\n  else\n    if (!@fixed) && other.fixed?\n      precision = other.precision\n      (@multiplier * (@precision / other.precision)) - other.multiplier\n    else\n      tmp = if @precision < other.precision\n        @multiplier - (other.multiplier * (other.precision / @precision))\n      else\n        if other.precision < @precision\n          precision = other.precision\n          (@multiplier * (@precision / other.precision)) - other.multiplier\n        else\n          @multiplier - other.multiplier\n        end\n      end\n      if tmp.infinite?\n      else\n        while !((-MULTIPLIER_LIMIT) < tmp && tmp < MULTIPLIER_LIMIT)\n          precision = precision + 1\n          tmp = tmp / Scale::FACTOR\n        end\n      end\n      tmp\n    end\n  end\nend\nDuration.new(m, precision, @fixed || other.fixed?)\n"}},{"id":"-:Duration-instance-method","html_id":"-:Duration-instance-method","name":"-","doc":"Negates `self`.","summary":"<p>Negates <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L253","def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"Duration.new(-@multiplier, @precision, @fixed)"}},{"id":"/(other:Duration):Float64-instance-method","html_id":"/(other:Duration):Float64-instance-method","name":"/","doc":"The division of one duration by another is always considered a\nfloating-point operation.\n\nThe numerator and denominator may have different precision levels and the\nresult is a scalar with no prescribed precision.","summary":"<p>The division of one duration by another is always considered a floating-point operation.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"args_string":"(other : Duration) : Float64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L262","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@multiplier / other.multiplier) * (@precision / other.precision)"}},{"id":"/(n:Number):Duration-instance-method","html_id":"/(n:Number):Duration-instance-method","name":"/","doc":"Divide `self` by the given scalar operand *n*.","summary":"<p>Divide <code>self</code> by the given scalar operand <em>n</em>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Number"}],"args_string":"(n : Number) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L234","def":{"name":"/","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"m = @multiplier / n\nprecision = @precision\nif m.nan?\n  raise(\"Not a duration\")\nend\nif m.infinite?\nelse\n  if @fixed\n    m = m.round\n  else\n    if n.abs > 1\n      while (((m % 1) > 0) && (m < (MULTIPLIER_LIMIT // Scale::FACTOR))) && (m > ((-MULTIPLIER_LIMIT) // Scale::FACTOR))\n        precision = precision - 1\n        m = m * Scale::FACTOR\n      end\n    end\n  end\nend\nDuration.new(m, precision, @fixed)\n"}},{"id":"(other:self)-instance-method","html_id":"(other:self)-instance-method","name":"<=>","doc":"Implements the comparison operator.\n\nAssumes that `self` and *other* could be replaced by their associated\nquantities. As a consequence, two `Duration` values can be considered equal\nwith different precision levels.","summary":"<p>Implements the comparison operator.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L271","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (@precision == other.precision) || (infinite? || other.infinite?)\n  multiplier <=> other.multiplier\nelse\n  if @precision < other.precision\n    multiplier <=> (other.rescale(@precision)).multiplier\n  else\n    (rescale(other.precision)).multiplier <=> other.multiplier\n  end\nend"}},{"id":"equals?(other:self)-instance-method","html_id":"equals?(other:self)-instance-method","name":"equals?","doc":"Equality — Returns `true` only if `self` and *other* are equivalent in both\nmultiplier and time precision.","summary":"<p>Equality — Returns <code>true</code> only if <code>self</code> and <em>other</em> are equivalent in both multiplier and time precision.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L283","def":{"name":"equals?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(multiplier == other.multiplier) && (@precision == other.precision)"}},{"id":"finite?:Bool-instance-method","html_id":"finite?:Bool-instance-method","name":"finite?","doc":"Whether `self` is a finite duration.","summary":"<p>Whether <code>self</code> is a finite duration.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L97","def":{"name":"finite?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!infinite?"}},{"id":"fixed:Duration-instance-method","html_id":"fixed:Duration-instance-method","name":"fixed","doc":"Produces a fixed but equivalent duration.","summary":"<p>Produces a fixed but equivalent duration.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L136","def":{"name":"fixed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"Duration.new(@multiplier, @precision, true)"}},{"id":"fixed?:Bool-instance-method","html_id":"fixed?:Bool-instance-method","name":"fixed?","doc":"Whether `self` fixed or unfixed. When fixed, the time precision is preserved\nthrough operations. Otherwise, the time precision may be altered to minimize\nrounding error.\n\nBy default, `Duration` values are unfixed, which makes it easy to express\ndurations using combinations of multiples of base-1000 SI units.","summary":"<p>Whether <code>self</code> fixed or unfixed.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L112","def":{"name":"fixed?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@fixed"}},{"id":"fixed_at(precision:Scale):Duration-instance-method","html_id":"fixed_at(precision:Scale):Duration-instance-method","name":"fixed_at","doc":"Produces a fixed duration value with the specified *precision* level.","summary":"<p>Produces a fixed duration value with the specified <em>precision</em> level.</p>","abstract":false,"args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(precision : Scale) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L125","def":{"name":"fixed_at","args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"m = @multiplier * (@precision / precision)\nDuration.new(m, precision, true)\n"}},{"id":"infinite?:Bool-instance-method","html_id":"infinite?:Bool-instance-method","name":"infinite?","doc":"Whether `self` is an infinite duration.","summary":"<p>Whether <code>self</code> is an infinite duration.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L102","def":{"name":"infinite?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@multiplier == Float64::INFINITY) || (@multiplier == (-Float64::INFINITY))"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L287","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if infinite?\n  io << @multiplier\nelse\n  io << @multiplier.to_i64\n  if @precision.level != 0\n    io << 'e'\n    io << (@precision.level < 0 ? '-' : '+')\n    io << (@precision.level * 3).abs\n  end\nend\nio << (@fixed ? \"_fd\" : \"_ud\")\nio\n"}},{"id":"multiplier:Int64-instance-method","html_id":"multiplier:Int64-instance-method","name":"multiplier","doc":"Returns the multiplier of `self`.","summary":"<p>Returns the multiplier of <code>self</code>.</p>","abstract":false,"args":[],"args_string":" : Int64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L80","def":{"name":"multiplier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"case @multiplier\nwhen Float64::INFINITY\n  Int64::MAX\nwhen -Float64::INFINITY\n  Int64::MIN\nelse\n  @multiplier.to_i64\nend"}},{"id":"precision:Scale-instance-method","html_id":"precision:Scale-instance-method","name":"precision","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L30","def":{"name":"precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@precision"}},{"id":"rescale(precision:Scale):Duration-instance-method","html_id":"rescale(precision:Scale):Duration-instance-method","name":"rescale","doc":"Produces a duration value with the specified *precision* level.\n\nNeither fixes or unfixes the time precision of the result.","summary":"<p>Produces a duration value with the specified <em>precision</em> level.</p>","abstract":false,"args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(precision : Scale) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L119","def":{"name":"rescale","args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"m = @multiplier * (@precision / precision)\nDuration.new(m, precision, @fixed)\n"}},{"id":"to_f-instance-method","html_id":"to_f-instance-method","name":"to_f","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L310","def":{"name":"to_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_f64"}},{"id":"to_f32-instance-method","html_id":"to_f32-instance-method","name":"to_f32","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L306","def":{"name":"to_f32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@multiplier.to_f32 * @precision.to_f32"}},{"id":"to_f64-instance-method","html_id":"to_f64-instance-method","name":"to_f64","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L302","def":{"name":"to_f64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@multiplier * @precision.to_f64"}},{"id":"unfixed:Duration-instance-method","html_id":"unfixed:Duration-instance-method","name":"unfixed","doc":"Produces an unfixed but equivalent duration.","summary":"<p>Produces an unfixed but equivalent duration.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L131","def":{"name":"unfixed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"Duration.new(@multiplier, @precision, false)"}},{"id":"zero?:Bool-instance-method","html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Whether `self` is a zero duration.","summary":"<p>Whether <code>self</code> is a zero duration.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/duration.cr#L92","def":{"name":"zero?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@multiplier.zero?"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/EventSet","path":"Quartz/EventSet.html","kind":"class","full_name":"Quartz::EventSet","name":"EventSet","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/event_set.cr","line_number":71,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"`EventSet` represents the pending event set and encompasses all future\nevents scheduled to occur.","summary":"<p><code><a href=\"../Quartz/EventSet.html\">EventSet</a></code> represents the pending event set and encompasses all future events scheduled to occur.</p>","class_methods":[],"constructors":[{"id":"new(time:TimePoint=TimePoint.new(0)):self-class-method","html_id":"new(time:TimePoint=TimePoint.new(0)):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"TimePoint.new(0)","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint = <span class=\"t\">TimePoint</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>)) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L77","def":{"name":"new","args":[{"name":"time","doc":null,"default_value":"TimePoint.new(0)","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(:calendar_queue, time)"}},{"id":"new(priority_queue:Symbol,current_time:TimePoint=TimePoint.new(0))-class-method","html_id":"new(priority_queue:Symbol,current_time:TimePoint=TimePoint.new(0))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority_queue","doc":null,"default_value":"","external_name":"priority_queue","restriction":"Symbol"},{"name":"current_time","doc":null,"default_value":"TimePoint.new(0)","external_name":"current_time","restriction":"TimePoint"}],"args_string":"(priority_queue : Symbol, current_time : TimePoint = <span class=\"t\">TimePoint</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L81","def":{"name":"new","args":[{"name":"priority_queue","doc":null,"default_value":"","external_name":"priority_queue","restriction":"Symbol"},{"name":"current_time","doc":null,"default_value":"TimePoint.new(0)","external_name":"current_time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(priority_queue, current_time)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"advance:TimePoint-instance-method","html_id":"advance:TimePoint-instance-method","name":"advance","doc":"Advance the current time up to the next planned event.","summary":"<p>Advance the current time up to the next planned event.</p>","abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L104","def":{"name":"advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"duration = imminent_duration\nif duration.infinite?\n  @current_time\nelse\n  @current_time.advance(duration)\nend\n"}},{"id":"advance(untilt:TimePoint):TimePoint-instance-method","html_id":"advance(untilt:TimePoint):TimePoint-instance-method","name":"advance","doc":"Advance the current time until it reaches the given time point.","summary":"<p>Advance the current time until it reaches the given time point.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"until","restriction":"TimePoint"}],"args_string":"(until t : TimePoint) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L125","def":{"name":"advance","args":[{"name":"t","doc":null,"default_value":"","external_name":"until","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"while @current_time != t\n  advance(by: t.gap(@current_time))\nend\n@current_time\n"}},{"id":"advance(byduration:Duration):TimePoint-instance-method","html_id":"advance(byduration:Duration):TimePoint-instance-method","name":"advance","doc":"Advance the current time up to the specified planned duration using\na multiscale time advancement.\n\nRaises if the current time advances beyond the imminent events.","summary":"<p>Advance the current time up to the specified planned duration using a multiscale time advancement.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"args_string":"(by duration : Duration) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L117","def":{"name":"advance","args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"if duration > imminent_duration\n  raise(BadSynchronisationError.new(\"Current time (#{@current_time}) cannot advance beyond imminent events (#{duration} > #{imminent_duration})\"))\nend\n@current_time.advance(by: duration)\n"}},{"id":"cancel_event(event:Schedulable):Schedulable?-instance-method","html_id":"cancel_event(event:Schedulable):Schedulable?-instance-method","name":"cancel_event","doc":"Cancel the specified event.","summary":"<p>Cancel the specified event.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"args_string":"(event : Schedulable) : Schedulable?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L133","def":{"name":"cancel_event","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Schedulable | ::Nil","visibility":"Public","body":"(@priority_queue.delete(event.planned_phase, event)).as(Schedulable | ::Nil)"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Clears `self`.","summary":"<p>Clears <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L98","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current_time = TimePoint.new\n@priority_queue.clear\n"}},{"id":"current_time:TimePoint-instance-method","html_id":"current_time:TimePoint-instance-method","name":"current_time","doc":"Returns the current time associated with the event set.","summary":"<p>Returns the current time associated with the event set.</p>","abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L73","def":{"name":"current_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@current_time"}},{"id":"current_time=(current_time:TimePoint)-instance-method","html_id":"current_time=(current_time:TimePoint)-instance-method","name":"current_time=","doc":"Returns the current time associated with the event set.","summary":"<p>Returns the current time associated with the event set.</p>","abstract":false,"args":[{"name":"current_time","doc":null,"default_value":"","external_name":"current_time","restriction":"TimePoint"}],"args_string":"(current_time : TimePoint)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L73","def":{"name":"current_time=","args":[{"name":"current_time","doc":null,"default_value":"","external_name":"current_time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current_time = current_time"}},{"id":"duration_of(event:Schedulable):Duration-instance-method","html_id":"duration_of(event:Schedulable):Duration-instance-method","name":"duration_of","doc":"Returns the planned duration after which the specified event will occur.","summary":"<p>Returns the planned duration after which the specified event will occur.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"args_string":"(event : Schedulable) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L138","def":{"name":"duration_of","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"precision = event.planned_precision\nduration = @current_time.duration_from_phase(event.planned_phase)\nrescaled_duration(duration, precision)\n"}},{"id":"each_imminent_event(&)-instance-method","html_id":"each_imminent_event(&amp;)-instance-method","name":"each_imminent_event","doc":"Deletes and yields each imminent simultaneous event.","summary":"<p>Deletes and yields each imminent simultaneous event.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L179","def":{"name":"each_imminent_event","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@priority_queue.pop_imminents do |event|\n  yield event\nend"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Whether the event set is empty.","summary":"<p>Whether the event set is empty.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L93","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@priority_queue.empty?"}},{"id":"imminent_duration:Duration-instance-method","html_id":"imminent_duration:Duration-instance-method","name":"imminent_duration","doc":"Returns the planned `Duration` associated with the future imminent events\nto occur, or `Duration::INFINIY` if `self` is empty.","summary":"<p>Returns the planned <code><a href=\"../Quartz/Duration.html\">Duration</a></code> associated with the future imminent events to occur, or <code>Duration::INFINIY</code> if <code>self</code> is empty.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L158","def":{"name":"imminent_duration","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"if @priority_queue.empty?\n  Duration::INFINITY\nelse\n  duration_of(@priority_queue.peek)\nend"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L183","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(io << '<') << self.class.name\nio << \": current_time=\"\n@current_time.to_s(io)\nio << \", priority_queue=\"\n@priority_queue.inspect(io)\nio << '>'\n"}},{"id":"plan_event(event:Schedulable,duration:Duration)-instance-method","html_id":"plan_event(event:Schedulable,duration:Duration)-instance-method","name":"plan_event","doc":"Schedules a future event at a given planned *duration*.","summary":"<p>Schedules a future event at a given planned <em>duration</em>.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"args_string":"(event : Schedulable, duration : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L145","def":{"name":"plan_event","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"planned_phase = @current_time.phase_from_duration(duration)\nevent.planned_precision = duration.precision\nevent.planned_phase = planned_phase\n@priority_queue.push(planned_phase, event)\nplanned_phase\n"}},{"id":"pop_imminent_event:Schedulable-instance-method","html_id":"pop_imminent_event:Schedulable-instance-method","name":"pop_imminent_event","doc":"Deletes and returns the next imminent event to occur.","summary":"<p>Deletes and returns the next imminent event to occur.</p>","abstract":false,"args":[],"args_string":" : Schedulable","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L167","def":{"name":"pop_imminent_event","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Schedulable","visibility":"Public","body":"@priority_queue.pop"}},{"id":"pop_imminent_events:Array(Schedulable)-instance-method","html_id":"pop_imminent_events:Array(Schedulable)-instance-method","name":"pop_imminent_events","doc":"Deletes and returns all imminent simultaneous events.","summary":"<p>Deletes and returns all imminent simultaneous events.</p>","abstract":false,"args":[],"args_string":" : Array(Schedulable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L172","def":{"name":"pop_imminent_events","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Schedulable)","visibility":"Public","body":"ary = [] of Schedulable\n@priority_queue.pop_imminents do |event|\n  ary << event\nend\nary\n"}},{"id":"priority_queue:Quartz::PriorityQueue(Schedulable)-instance-method","html_id":"priority_queue:Quartz::PriorityQueue(Schedulable)-instance-method","name":"priority_queue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::PriorityQueue(Schedulable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L75","def":{"name":"priority_queue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"PriorityQueue(Schedulable)","visibility":"Public","body":"@priority_queue"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of scheduled events.","summary":"<p>Returns the number of scheduled events.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L88","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@priority_queue.size"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/FeedbackLoopError","path":"Quartz/FeedbackLoopError.html","kind":"class","full_name":"Quartz::FeedbackLoopError","name":"FeedbackLoopError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":12,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/FibonacciHeap","path":"Quartz/FibonacciHeap.html","kind":"class","full_name":"Quartz::FibonacciHeap(T)","name":"FibonacciHeap","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/priority_queues/fibonacci_heap.cr","line_number":7,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Event set implemented as a Fibonacci Heap, as described by Fredman and\nTarjan.\n\nStructured as a collection of root trees that are min-heap ordered, and\ninternally represented as a circular, doubly-linked list.","summary":"<p>Event set implemented as a Fibonacci Heap, as described by Fredman and Tarjan.</p>","class_methods":[],"constructors":[{"id":"new(&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L16","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = FibonacciHeap(T).allocate\n_.initialize(&comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Clears `self`.","summary":"<p>Clears <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L31","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@cache.clear\n@min_node = nil\n@size = 0\n"}},{"id":"delete(priority:Duration,value:T):T-instance-method","html_id":"delete(priority:Duration,value:T):T-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T) : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L250","def":{"name":"delete","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"node = @cache[value]\ndecrease_key(node, Duration.new(Duration::MULTIPLIER_MAX, Scale.new(-128_i8)))\nif @min_node != node\n  raise(\"Invalid state: min node (#{@min_node}) should eq #{node}\")\nend\npop\n"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Whether the event set is empty or not.","summary":"<p>Whether the event set is empty or not.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L26","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@min_node.nil?"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L261","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"<FibonacciHeap: roots=\"\n(node_and_siblings_list(@min_node)).inspect(io)\nio << '>'\n"}},{"id":"next_priority:Duration-instance-method","html_id":"next_priority:Duration-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L242","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"if min = @min_node\n  min.priority\nelse\n  raise(\"heap is empty\")\nend"}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L226","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if min = @min_node\n  min.value\nelse\n  raise(\"heap is empty\")\nend"}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L234","def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if min = @min_node\n  min.value\nelse\n  nil\nend"}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":"Dequeue and return the min element.","summary":"<p>Dequeue and return the min element.</p>","abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L96","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if min = @min_node\n  @cache.delete(min.value)\n  @size = @size - 1\n  min.each_child do |child|\n    child.parent = nil\n  end\n  @min_node = if min.strayed?\n    min.children\n  else\n    list = min.next\n    remove(min)\n    @min_node = merge(list, min.children)\n  end\n  if @min_node\n    consolidate\n  end\n  min.value\nelse\n  raise(\"heap is empty\")\nend"}},{"id":"push(priority:Duration,value:T)-instance-method","html_id":"push(priority:Duration,value:T)-instance-method","name":"push","doc":"Insert the given *value* with the specified *priority* into `self`..","summary":"<p>Insert the given <em>value</em> with the specified <em>priority</em> into <code>self</code>..</p>","abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L38","def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = Node(T).new(priority, value)\nif @cache.has_key?(value)\n  raise(\"Element #{value} is already inserted.\")\nend\n@cache[value] = node\n@min_node = merge(@min_node, node)\n@size = @size + 1\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the heap.","summary":"<p>Returns the number of elements in the heap.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/fibonacci_heap.cr#L9","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/HeapSet","path":"Quartz/HeapSet.html","kind":"class","full_name":"Quartz::HeapSet(T)","name":"HeapSet","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","kind":"class","full_name":"Quartz::PriorityQueue","name":"PriorityQueue"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/priority_queues/heap_set.cr","line_number":25,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Event set based on a array-based min-heap similar to `BinaryHeap`, but\noptimized for higher event collision rate.\n\nInstead of adding all events in the heap, simultaneous events are gathered\nand as a set in the heap.\n\nTo avoid O(n) complexity when deleting an arbitrary element, a map is\nused to store indices for each event in the event set.","summary":"<p>Event set based on a array-based min-heap similar to <code><a href=\"../Quartz/BinaryHeap.html\">BinaryHeap</a></code>, but optimized for higher event collision rate.</p>","class_methods":[],"constructors":[{"id":"new(initial_capacity:Int,&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(initial_capacity:Int,&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"args_string":"(initial_capacity : Int, &comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L43","def":{"name":"new","args":[{"name":"initial_capacity","doc":null,"default_value":"","external_name":"initial_capacity","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = HeapSet(T).allocate\n_.initialize(initial_capacity, &comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(&comparator:Duration,Duration,Bool->Int32)-class-method","html_id":"new(&amp;comparator:Duration,Duration,Bool-&gt;Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&comparator : Duration, Duration, Bool -> Int32)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L33","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"","visibility":"Public","body":"_ = HeapSet(T).allocate\n_.initialize(&comparator) do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other):Bool-instance-method","html_id":"==(other):Bool-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L140","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"false"}},{"id":"==(other:HeapSet):Bool-instance-method","html_id":"==(other:HeapSet):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"HeapSet"}],"args_string":"(other : HeapSet) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L136","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"HeapSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(size == other.size) && (to_slice == other.to_slice)"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L64","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@heap.clear(@entries)\n@cache.clear\n@size = 0\n@entries = 0\nself\n"}},{"id":"delete(priority:Duration,event:T):T?-instance-method","html_id":"delete(priority:Duration,event:T):T?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"args_string":"(priority : Duration, event : T) : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L150","def":{"name":"delete","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty\")\nend\nindex = @cache[priority]\nev, set = @heap[index]\n@size = @size - 1\nset.delete(event)\nif set.empty?\n  delete_at(index)\n  @cache.delete(priority)\nend\nevent\n"}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L60","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@size == 0"}},{"id":"heapify!-instance-method","html_id":"heapify!-instance-method","name":"heapify!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L235","def":{"name":"heapify!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"index = @entries >> 1\nwhile index >= 0\n  sift_down!(index)\n  index = index - 1\nend\n"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L144","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((((io << \"<\") << self.class.name) << \": size=\") << (size.to_s(io))) << \", top=\"\n(io << (peek.to_s(io))) << \">\"\nnil\n"}},{"id":"next_priority:Duration-instance-method","html_id":"next_priority:Duration-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L84","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"next_priority do\n  raise(\"heap is empty.\")\nend"}},{"id":"next_priority(&)-instance-method","html_id":"next_priority(&amp;)-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L88","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][0]"}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L76","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"peek do\n  raise(\"heap is empty.\")\nend"}},{"id":"peek(&)-instance-method","html_id":"peek(&amp;)-instance-method","name":"peek","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L80","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0 ? yield : @heap[1][1].first"}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L72","def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"peek do\n  nil\nend"}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L92","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty.\")\nelse\n  priority, set = @heap[1]\n  @size = @size - 1\n  value = set.shift\n  if set.empty?\n    delete_at(1)\n    @cache.delete(priority)\n  end\n  value\nend"}},{"id":"pop_imminents(&)-instance-method","html_id":"pop_imminents(&amp;)-instance-method","name":"pop_imminents","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L109","def":{"name":"pop_imminents","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"if @size == 0\n  raise(\"heap is empty.\")\nelse\n  priority, set = @heap[1]\n  @size = @size - set.size\n  set.each do |value|\n    yield value\n  end\n  delete_at(1)\n  @cache.delete(priority)\n  self\nend"}},{"id":"push(priority:Duration,value:T):self-instance-method","html_id":"push(priority:Duration,value:T):self-instance-method","name":"push","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L184","def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@size = @size + 1\nif index = @cache[priority]?\n  _, set = @heap[index]\n  set.add(value)\nelse\n  @entries = @entries + 1\n  check_needs_resize\n  @heap[@entries] = {priority, Set(T) {value}}\n  @cache[priority] = @entries\n  sift_up!(@entries)\nend\nself\n"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the heap.","summary":"<p>Returns the number of elements in the heap.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L29","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"to_a:Array(Tuple(Duration,Set(T)))-instance-method","html_id":"to_a:Array(Tuple(Duration,Set(T)))-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Tuple(Duration, Set(T)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L129","def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Duration, Set(T)))","visibility":"Public","body":"Array(Tuple(Duration, Set(T))).build(@entries) do |pointer|\n  pointer.copy_from(@heap + 1, @entries)\n  @entries\nend"}},{"id":"to_slice:Slice(Tuple(Duration,Set(T)))-instance-method","html_id":"to_slice:Slice(Tuple(Duration,Set(T)))-instance-method","name":"to_slice","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(Tuple(Duration, Set(T)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/priority_queues/heap_set.cr#L125","def":{"name":"to_slice","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(Tuple(Duration, Set(T)))","visibility":"Public","body":"(@heap + 1).to_slice(@entries)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Hooks","path":"Quartz/Hooks.html","kind":"module","full_name":"Quartz::Hooks","name":"Hooks","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/hooks.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"POST_ABORT","name":"POST_ABORT","value":":post_abort","doc":null,"summary":null},{"id":"POST_INIT","name":"POST_INIT","value":":post_init","doc":null,"summary":null},{"id":"POST_RESTART","name":"POST_RESTART","value":":post_restart","doc":null,"summary":null},{"id":"POST_SIMULATION","name":"POST_SIMULATION","value":":post_simulation","doc":null,"summary":null},{"id":"PRE_ABORT","name":"PRE_ABORT","value":":pre_abort","doc":null,"summary":null},{"id":"PRE_INIT","name":"PRE_INIT","value":":pre_init","doc":null,"summary":null},{"id":"PRE_RESTART","name":"PRE_RESTART","value":":pre_restart","doc":null,"summary":null},{"id":"PRE_SIMULATION","name":"PRE_SIMULATION","value":":pre_simulation","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Hooks/Notifiable","path":"Quartz/Hooks/Notifiable.html","kind":"module","full_name":"Quartz::Hooks::Notifiable","name":"Notifiable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/hooks.cr","line_number":16,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Hooks","kind":"module","full_name":"Quartz::Hooks","name":"Hooks"},"doc":"The `Notifiable` module is intended to be included in a class as a mixin.\nIt provides an interface so that objects can register and receive hooks\nduring a simulation via the `#notify` method that are dispatched by\na `Notifier`.","summary":"<p>The <code><a href=\"../../Quartz/Hooks/Notifiable.html\">Notifiable</a></code> module is intended to be included in a class as a mixin.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"notify(hook:Symbol)-instance-method","html_id":"notify(hook:Symbol)-instance-method","name":"notify","doc":"This method is called whenever a registered *hook* is dispatched.","summary":"<p>This method is called whenever a registered <em>hook</em> is dispatched.</p>","abstract":true,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"args_string":"(hook : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L18","def":{"name":"notify","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Hooks/Notifier","path":"Quartz/Hooks/Notifier.html","kind":"class","full_name":"Quartz::Hooks::Notifier","name":"Notifier","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/hooks.cr","line_number":31,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Hooks","kind":"module","full_name":"Quartz::Hooks","name":"Hooks"},"doc":"The `Notifier` provides a mechanism for broadcasting hooks during a\nsimulation.\n\nHooks can be dispatched either to `Proc`s or to `Notifiable` objects.\nThey can register to a hook using the `#subscribe` method. Each invocation\nof this method registers the receiver to a given hook. Therefore,\nobjects may register to several hooks.\n\nA default `Notifier` instance is associated with `Simulation` instances so\nthat objects can subscribe to simulation events.","summary":"<p>The <code><a href=\"../../Quartz/Hooks/Notifier.html\">Notifier</a></code> provides a mechanism for broadcasting hooks during a simulation.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"clear(hook:Symbol)-instance-method","html_id":"clear(hook:Symbol)-instance-method","name":"clear","doc":"Removes all entries that previously registered to the specified *hook*\nfrom the notifier.","summary":"<p>Removes all entries that previously registered to the specified <em>hook</em> from the notifier.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"args_string":"(hook : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L71","def":{"name":"clear","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try(&.delete(hook))"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Removes all entries from the notifier.","summary":"<p>Removes all entries from the notifier.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L65","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try(&.clear)"}},{"id":"count_listeners(hook:Symbol)-instance-method","html_id":"count_listeners(hook:Symbol)-instance-method","name":"count_listeners","doc":"Returns the number of objects listening for the specified *hook*.","summary":"<p>Returns the number of objects listening for the specified <em>hook</em>.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"args_string":"(hook : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L50","def":{"name":"count_listeners","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try do |__arg0|\n  __arg0[hook].size\nend"}},{"id":"count_listeners-instance-method","html_id":"count_listeners-instance-method","name":"count_listeners","doc":"Returns the total number of objects listening to hooks.","summary":"<p>Returns the total number of objects listening to hooks.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L55","def":{"name":"count_listeners","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try(&.reduce(0) do |acc, tuple|\n  acc + tuple[1].size\nend)"}},{"id":"notify(hook:Symbol)-instance-method","html_id":"notify(hook:Symbol)-instance-method","name":"notify","doc":"Publish a given *hook*, so that each registered object in the receiver\nis notified.","summary":"<p>Publish a given <em>hook</em>, so that each registered object in the receiver is notified.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"args_string":"(hook : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L77","def":{"name":"notify","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try do |listeners|\n  listeners[hook].each do |l|\n    l.is_a?(Notifiable) ? l.notify(hook) : l.call(hook)\n  end\nend"}},{"id":"subscribe(hook:Symbol,notifiable:Notifiable)-instance-method","html_id":"subscribe(hook:Symbol,notifiable:Notifiable)-instance-method","name":"subscribe","doc":"Register the given *notifiable* to the specified *hook*.","summary":"<p>Register the given <em>notifiable</em> to the specified <em>hook</em>.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"},{"name":"notifiable","doc":null,"default_value":"","external_name":"notifiable","restriction":"Notifiable"}],"args_string":"(hook : Symbol, notifiable : Notifiable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L40","def":{"name":"subscribe","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"},{"name":"notifiable","doc":null,"default_value":"","external_name":"notifiable","restriction":"Notifiable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"listeners[hook] << notifiable"}},{"id":"subscribe(hook:Symbol,&block:Symbol->)-instance-method","html_id":"subscribe(hook:Symbol,&amp;block:Symbol-&gt;)-instance-method","name":"subscribe","doc":"Register the given *block* to the specified *hook*.","summary":"<p>Register the given <em>block</em> to the specified <em>hook</em>.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"args_string":"(hook : Symbol, &block : Symbol -> )","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L45","def":{"name":"subscribe","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Symbol -> )"},"return_type":"","visibility":"Public","body":"listeners[hook] << block"}},{"id":"unsubscribe(hook:Symbol,instance:Symbol->|Notifiable)-instance-method","html_id":"unsubscribe(hook:Symbol,instance:Symbol-&gt;|Notifiable)-instance-method","name":"unsubscribe","doc":"Unsubscribes the specified entry from listening to the specified *hook*.","summary":"<p>Unsubscribes the specified entry from listening to the specified <em>hook</em>.</p>","abstract":false,"args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"},{"name":"instance","doc":null,"default_value":"","external_name":"instance","restriction":"(Symbol -> ) | Notifiable"}],"args_string":"(hook : Symbol, instance : Symbol ->  | Notifiable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/hooks.cr#L60","def":{"name":"unsubscribe","args":[{"name":"hook","doc":null,"default_value":"","external_name":"hook","restriction":"Symbol"},{"name":"instance","doc":null,"default_value":"","external_name":"instance","restriction":"(Symbol -> ) | Notifiable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@listeners.try do |__arg2|\n  __arg2[hook].delete(instance)\nend != nil"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InputPort","path":"Quartz/InputPort.html","kind":"class","full_name":"Quartz::InputPort","name":"InputPort","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Port","kind":"class","full_name":"Quartz::Port","name":"Port"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Port","kind":"class","full_name":"Quartz::Port","name":"Port"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/port.cr","line_number":19,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represents an input port that belongs to a `Coupleable` (the *host*).","summary":"<p>This class represents an input port that belongs to a <code><a href=\"../Quartz/Coupleable.html\">Coupleable</a></code> (the <em>host</em>).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"downward_ports-instance-method","html_id":"downward_ports-instance-method","name":"downward_ports","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L20","def":{"name":"downward_ports","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @downward_ports).nil?\n  @downward_ports = (Array(InputPort).new)\nelse\n  value\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InvalidDurationError","path":"Quartz/InvalidDurationError.html","kind":"class","full_name":"Quartz::InvalidDurationError","name":"InvalidDurationError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":18,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InvalidPortHostError","path":"Quartz/InvalidPortHostError.html","kind":"class","full_name":"Quartz::InvalidPortHostError","name":"InvalidPortHostError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":8,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InvalidProcessorError","path":"Quartz/InvalidProcessorError.html","kind":"class","full_name":"Quartz::InvalidProcessorError","name":"InvalidProcessorError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":16,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InvalidStateError","path":"Quartz/InvalidStateError.html","kind":"class","full_name":"Quartz::InvalidStateError","name":"InvalidStateError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":20,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/List","path":"Quartz/List.html","kind":"class","full_name":"Quartz::List(T)","name":"List","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/list.cr","line_number":14,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"A List (implementation of a doubly linked list) is a collection of objects\nof type T that behaves much like an Array.\n\nAll of the operations perform as could be expected for a doubly-linked list.\nOperations that index into the list will traverse the list from the\nbeginning or the end, whichever is closer to the specified index.\n\nThis structure allows for efficient insertion or removal of elements from\nany position since it returns a `List::Node` from all insert operations\n(`#push`, `#insert`, `#unshift`) in order to be reused in `#delete`.\n\nTODO : #insert_before(node)","summary":"<p>A List (implementation of a doubly linked list) is a collection of objects of type T that behaves much like an Array.</p>","class_methods":[],"constructors":[{"id":"new(size:Int,value:T)-class-method","html_id":"new(size:Int,value:T)-class-method","name":"new","doc":"Creates a new List of the given size filled with the same value in each\nposition.\n\n```\nList.new(3, 'a') # => List{'a', 'a', 'a'}\n```","summary":"<p>Creates a new List of the given size filled with the same value in each position.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(size : Int, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L62","def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = List(T).allocate\n_.initialize(size, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(array:Array(T))-class-method","html_id":"new(array:Array(T))-class-method","name":"new","doc":"Creates a new List that copies its items from an Array.\n\n```\nList.new([1, 2, 3]) # => List{1, 2, 3}\n```","summary":"<p>Creates a new List that copies its items from an Array.</p>","abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"Array(T)"}],"args_string":"(array : Array(T))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L89","def":{"name":"new","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"List(T).new(array.size) do |i|\n  array[i]\nend"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Creates a new empty List","summary":"<p>Creates a new empty List</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L51","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = List(T).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(size:Int,&)-class-method","html_id":"new(size:Int,&amp;)-class-method","name":"new","doc":"Creates a new List of the given size and invokes the block once for each\nindex of the list, assigning the block's value in that index.\n\n```\nList.new(3) { |i| (i + 1) ** 2 } # => List{1, 4, 9}\n```","summary":"<p>Creates a new List of the given size and invokes the block once for each index of the list, assigning the block's value in that index.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"}],"args_string":"(size : Int, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L76","def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = List(T).allocate\n_.initialize(size) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"+(other:Quartz::List(U))forallU-instance-method","html_id":"+(other:Quartz::List(U))forallU-instance-method","name":"+","doc":"Concatenation. Returns a new List built by concatenating two lists\ntogether to create a third. The type of the new list is the union of the\ntypes of both the other lists.","summary":"<p>Concatenation.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List(U)"}],"args_string":"(other : Quartz::List(U)) forall U","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L131","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(List(T | U).new.concat(self)).concat(other)"}},{"id":"<<(obj:T)-instance-method","html_id":"&lt;&lt;(obj:T)-instance-method","name":"<<","doc":"Pushes the given value on to the end of this list. Returns `self` instead\nof the created node.","summary":"<p>Pushes the given value on to the end of this list.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"args_string":"(obj : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L458","def":{"name":"<<","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"push(obj)\nself\n"}},{"id":"(other:List)-instance-method","html_id":"(other:List)-instance-method","name":"<=>","doc":"Combined comparison operator. Returns *0* if `self` equals *other*, *1* if\n`self` is greater than *other* and *-1* if `self` is smaller than *other*.\n\nIt compares the elements of both lists in the same position using the\n`<=>` operator.  As soon as one of such comparisons returns a non-zero\nvalue, that result is the return value of the comparison.\n\nIf all elements are equal, the comparison is based on the size of the lists.","summary":"<p>Combined comparison operator.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"args_string":"(other : List)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L118","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a, b = size < other.size ? {self, other} : {other, self}\niterator = b.each\neach do |item|\n  n = item <=> iterator.next\n  if n != 0\n    return n\n  end\nend\nsize <=> other.size\n"}},{"id":"==(other:List)-instance-method","html_id":"==(other:List)-instance-method","name":"==","doc":"Equality. Returns *true* if each element in `self` is equal to each\ncorresponding element in *other*.\n```\nlist = List{2, 3}\nlist.unshift\nlist == List{1, 2, 3} # => true\nlist == List{2, 3}    # => false\n```","summary":"<p>Equality.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"args_string":"(other : List)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L101","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"equals?(other) do |lhs, rhs|\n  lhs == rhs\nend"}},{"id":"[](index:Int)-instance-method","html_id":"[](index:Int)-instance-method","name":"[]","doc":"Returns the element at the given `index`.\n\nNegative indices can be used to start counting from the end of the list.\nRaises `IndexError` if trying to access an element outside the list's range.","summary":"<p>Returns the element at the given <code>index</code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L192","def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(index)"}},{"id":"[]=(index:Int,value:T)-instance-method","html_id":"[]=(index:Int,value:T)-instance-method","name":"[]=","doc":"Sets the given value at the given index replacing the old value\n\nNegative indices can be used to start counting from the end of the list.\nRaises `IndexError` if trying to access an element outside the list's range.","summary":"<p>Sets the given value at the given index replacing the old value</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(index : Int, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L210","def":{"name":"[]=","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = node_at(index) do\n  raise(IndexError.new)\nend\nnode.data = value\n"}},{"id":"[]?(index:Int)-instance-method","html_id":"[]?(index:Int)-instance-method","name":"[]?","doc":"Returns the element at the given index.\n\nNegative indices can be used to start counting from the end of the list.\nReturns `nil` if trying to access an element outside the list's range.","summary":"<p>Returns the element at the given index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L201","def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(index) do\n  nil\nend"}},{"id":"at(index:Int)-instance-method","html_id":"at(index:Int)-instance-method","name":"at","doc":"Returns the element at the given index, if in bounds, otherwise raises `IndexError`.","summary":"<p>Returns the element at the given index, if in bounds, otherwise raises <code>IndexError</code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L237","def":{"name":"at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"at(index) do\n  raise(IndexError.new)\nend"}},{"id":"at(index:Int,&)-instance-method","html_id":"at(index:Int,&amp;)-instance-method","name":"at","doc":"Returns the element at the given index, if in bounds, otherwise executes the given block and returns its value.","summary":"<p>Returns the element at the given index, if in bounds, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L243","def":{"name":"at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"(node_at(index) do\n  yield\nend).try(&.data)"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L155","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@head = @tail = nil\n@size = 0\n"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a new List that has this list's elements cloned.\nThat is, it returns a deep copy of this list.\n\nUse `#dup` if you want a shallow copy.","summary":"<p>Returns a new List that has this list's elements cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L269","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list = List(T).new\neach do |item|\n  list.push(item.clone.as(T))\nend\nlist\n"}},{"id":"concat(other:Enumerable(T))-instance-method","html_id":"concat(other:Enumerable(T))-instance-method","name":"concat","doc":"Appends the elements of *other* to `self`, and returns `self`.","summary":"<p>Appends the elements of <em>other</em> to <code>self</code>, and returns <code>self</code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable(T)"}],"args_string":"(other : Enumerable(T))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L284","def":{"name":"concat","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"other.each do |x|\n  push(x)\nend\nself\n"}},{"id":"delete(node:Quartz::List::Node(T))-instance-method","html_id":"delete(node:Quartz::List::Node(T))-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"args_string":"(node : Quartz::List::Node(T))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L516","def":{"name":"delete","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @size == 0\n  raise(NoSuchElementError.new)\nend\ndata = node.data\nif @size == 1\n  clear\nelse\n  if node == @head\n    return shift\n  end\n  if node == @tail\n    return pop\n  end\n  @size = @size - 1\n  pn = node.prev\n  nn = node.next\n  if pn\n    pn.next = nn\n  end\n  if nn\n    nn.prev = pn\n  end\nend\ndata\n"}},{"id":"delete(obj:T,all=true)-instance-method","html_id":"delete(obj:T,all=true)-instance-method","name":"delete","doc":"Removes all items or the first occurence that are equal to *obj*.\n\n```\nl = List{\"a\", \"b\", \"b\", \"b\", \"c\", \"c\"}\nl.delete(\"b\")\nl # => List{\"a\", \"c\", \"c\"}\nl.delete(\"c\", all: false)\nl # => List{\"a\", \"c\"}\n```","summary":"<p>Removes all items or the first occurence that are equal to <em>obj</em>.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"},{"name":"all","doc":null,"default_value":"true","external_name":"all","restriction":""}],"args_string":"(obj : T, all = <span class=\"n\">true</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L486","def":{"name":"delete","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"},{"name":"all","doc":null,"default_value":"true","external_name":"all","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"found = false\nnode = @head\nwhile node\n  if node.data == obj\n    found = true\n    next_node = node.next\n    delete(node)\n    node = next_node\n    if all\n    else\n      break\n    end\n  else\n    node = node.next\n  end\nend\nfound\n"}},{"id":"delete_at(index:Int)-instance-method","html_id":"delete_at(index:Int)-instance-method","name":"delete_at","doc":"Delete the item that is present at the `index`.\nRaises `IndexError` if trying to delete an element outside the list's\nrange.\n\n```\na = List{1, 2, 3}\na.delete_at(1) # => List{1, 3}\n```","summary":"<p>Delete the item that is present at the <code>index</code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L512","def":{"name":"delete_at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"delete(node_at(index) do\n  raise(IndexError.new)\nend)"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Returns a new List that has exactly this list's elements.\nThat is, it returns a shallow copy of this list.","summary":"<p>Returns a new List that has exactly this list's elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L277","def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"list = List(T).new\neach do |item|\n  list.push(item.as(T))\nend\nlist\n"}},{"id":"each(&)-instance-method","html_id":"each(&amp;)-instance-method","name":"each","doc":"Yields each item in this list, from first to last.\n\nDo not modify the list while using this variant of `each`!","summary":"<p>Yields each item in this list, from first to last.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L539","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"node = @head\nwhile node\n  yield node.data\n  node = node.next\nend\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Gives an iterator over each item in this list, from first to last.","summary":"<p>Gives an iterator over each item in this list, from first to last.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L548","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ItemIterator.new(@head)"}},{"id":"each_node(&)-instance-method","html_id":"each_node(&amp;)-instance-method","name":"each_node","doc":"Calls the given block once for each element in self, passing that\nelement as a parameter.","summary":"<p>Calls the given block once for each element in self, passing that element as a parameter.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L554","def":{"name":"each_node","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"node = @head\nwhile node\n  yield node\n  node = node.next\nend\n"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"Returns true if this deque has 0 items.","summary":"<p>Returns true if this deque has 0 items.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L161","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size == 0"}},{"id":"equals?(other:List,&)-instance-method","html_id":"equals?(other:List,&amp;)-instance-method","name":"equals?","doc":"Determines if `self` equals *other* according to a comparison\ndone by the given block.\n\nIf `self`'s size is the same as *other*'s size, this method yields\nelements from `self` and *other* in tandem: if the block returns true\nfor all of them, this method returns *true*. Otherwise it returns *false*.","summary":"<p>Determines if <code>self</code> equals <em>other</em> according to a comparison done by the given block.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"args_string":"(other : List, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L146","def":{"name":"equals?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"List"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"if @size != other.size\n  return false\nend\nit = other.each\neach do |item|\n  if yield item, it.next.as(T)\n  else\n    return false\n  end\nend\ntrue\n"}},{"id":"first:T-instance-method","html_id":"first:T-instance-method","name":"first","doc":"Returns the first element of the list. Raises if empty.","summary":"<p>Returns the first element of the list.</p>","abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L171","def":{"name":"first","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(NoSuchElementError.new)\nend\n@head.not_nil!.data\n"}},{"id":"first?:T?-instance-method","html_id":"first?:T?-instance-method","name":"first?","doc":"Returns the first element of the list, or nil if the list is empty","summary":"<p>Returns the first element of the list, or nil if the list is empty</p>","abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L166","def":{"name":"first?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"@head.try(&.data)"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L289","def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = @size.hash(hasher)\neach do |elem|\n  hasher = elem.hash(hasher)\nend\nhasher\n"}},{"id":"insert(index:Int,value:T)-instance-method","html_id":"insert(index:Int,value:T)-instance-method","name":"insert","doc":"Insert a new item before the item at `index`.\n\n```\nl = List{0, 1, 2}\nl.insert_at(1, 7) # => List{0, 7, 1, 2}\n```","summary":"<p>Insert a new item before the item at <code>index</code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(index : Int, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L221","def":{"name":"insert","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if index < 0\n  index = index + (@size + 1)\nend\nif index == 0\n  return unshift(value)\nend\nif index == @size\n  return push(value)\nend\nnode = node_at(index) do\n  raise(IndexError.new)\nend\nnew_node = Node(T).new(value, node, node.try(&.prev))\nnew_node.prev.not_nil!.next = new_node\nnew_node.next.not_nil!.prev = new_node\n@size = @size + 1\nnew_node\n"}},{"id":"inspect(io:IO)-instance-method","html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L424","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s(io)"}},{"id":"last:T-instance-method","html_id":"last:T-instance-method","name":"last","doc":"Returns the first element of the list. Raises if empty.","summary":"<p>Returns the first element of the list.</p>","abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L182","def":{"name":"last","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if @size == 0\n  raise(NoSuchElementError.new)\nend\n@tail.not_nil!.data\n"}},{"id":"last?:T?-instance-method","html_id":"last?:T?-instance-method","name":"last?","doc":"Returns the first element of the list, or nil if the list is empty","summary":"<p>Returns the first element of the list, or nil if the list is empty</p>","abstract":false,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L177","def":{"name":"last?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"@tail.try(&.data)"}},{"id":"pop(&)-instance-method","html_id":"pop(&amp;)-instance-method","name":"pop","doc":"Removes and returns the last item, if not empty, otherwise executes the\ngiven block and returns its value.","summary":"<p>Removes and returns the last item, if not empty, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L311","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"back = @tail\nif back\nelse\n  return yield\nend\ndata = back.data\nif @size == 1\n  clear\nelse\n  @size = @size - 1\n  if back = @tail = back.prev\n    back.next = nil\n  end\nend\ndata\n"}},{"id":"pop(n:Int)-instance-method","html_id":"pop(n:Int)-instance-method","name":"pop","doc":"Removes the last `n` (at most) items in the list.","summary":"<p>Removes the last <code>n</code> (at most) items in the list.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"args_string":"(n : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L335","def":{"name":"pop","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if n < 0\n  raise(ArgumentError.new(\"can't pop negative count\"))\nend\nn = Math.min(n, @size)\nn.times do\n  pop\nend\nnil\n"}},{"id":"pop-instance-method","html_id":"pop-instance-method","name":"pop","doc":"Removes and returns the last item. Raises `NoSuchElementError` if empty.\n\n```\nl = List{1, 2, 3}\nl.pop # => 3\n# l == List{1, 2}\n```","summary":"<p>Removes and returns the last item.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L305","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pop do\n  raise(NoSuchElementError.new)\nend"}},{"id":"pop?-instance-method","html_id":"pop?-instance-method","name":"pop?","doc":"Removes and returns the last item, if not empty, otherwise `nil`.","summary":"<p>Removes and returns the last item, if not empty, otherwise <code>nil</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L330","def":{"name":"pop?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pop do\n  nil\nend"}},{"id":"push(obj:T)-instance-method","html_id":"push(obj:T)-instance-method","name":"push","doc":"Pushes the given value on to the end of this list.\n```\nl = List{1, 2}\nl.push 3 # => List{1, 2, 3}\n```","summary":"<p>Pushes the given value on to the end of this list.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"args_string":"(obj : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L443","def":{"name":"push","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = Node(T).new(obj, nil, nil)\nif back = @tail\n  back.next = node\n  node.prev = @tail\n  @tail = node\nelse\n  @head = @tail = node\nend\n@size = @size + 1\nnode\n"}},{"id":"reverse_each(&)-instance-method","html_id":"reverse_each(&amp;)-instance-method","name":"reverse_each","doc":"Yields each item in this list, from last to first.\n\nDo not modify the list while using `reverse_each`!","summary":"<p>Yields each item in this list, from last to first.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L565","def":{"name":"reverse_each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"node = @tail\nwhile node\n  yield node.data\n  node = node.prev\nend\n"}},{"id":"rotate!(n:Int=1)-instance-method","html_id":"rotate!(n:Int=1)-instance-method","name":"rotate!","doc":"Rotates this list in place so that the element at `n` becomes first.\n\nFor positive `n`, equivalent to `n.times { push(shift) }`.\nFor negative `n`, equivalent to `(-n).times { unshift(pop) }`.","summary":"<p>Rotates this list in place so that the element at <code>n</code> becomes first.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = <span class=\"n\">1</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L401","def":{"name":"rotate!","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"half = @size // 2\nif n.abs >= half\n  n = ((n + half) % @size) - half\nend\nwhile n > 0\n  push(shift)\n  n = n - 1\nend\nwhile n < 0\n  n = n + 1\n  unshift(pop)\nend\n"}},{"id":"shift(&)-instance-method","html_id":"shift(&amp;)-instance-method","name":"shift","doc":"Removes the first element in the list, if not empty, otherwise executes\nthe given block and returns its value.","summary":"<p>Removes the first element in the list, if not empty, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L358","def":{"name":"shift","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"front = @head\nif front\nelse\n  return yield\nend\ndata = front.data\nif @size == 1\n  clear\nelse\n  @size = @size - 1\n  if front = @head = front.next\n    front.prev = nil\n  end\nend\ndata\n"}},{"id":"shift-instance-method","html_id":"shift-instance-method","name":"shift","doc":"Removes and returns the first item. Raises `NoSuchElementError` if empty.\n\n```\nl = List{1, 2, 3}\nl.shift # => 1\n# l == List{2, 3} -> true\n```","summary":"<p>Removes and returns the first item.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L352","def":{"name":"shift","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shift do\n  raise(NoSuchElementError.new)\nend"}},{"id":"shift(n:Int)-instance-method","html_id":"shift(n:Int)-instance-method","name":"shift","doc":"Removes the first `n` (at most) items in the list.","summary":"<p>Removes the first <code>n</code> (at most) items in the list.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"args_string":"(n : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L382","def":{"name":"shift","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if n < 0\n  raise(ArgumentError.new(\"can't shift negative count\"))\nend\nn = Math.min(n, @size)\nn.times do\n  shift\nend\nnil\n"}},{"id":"shift?-instance-method","html_id":"shift?-instance-method","name":"shift?","doc":"Removes and returns the first item, if not empty, otherwise `nil`.","summary":"<p>Removes and returns the first item, if not empty, otherwise <code>nil</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L377","def":{"name":"shift?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shift do\n  nil\nend"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L21","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size"}},{"id":"swap(i,j)-instance-method","html_id":"swap(i,j)-instance-method","name":"swap","doc":"Swaps the items at the indices `i` and `j`.","summary":"<p>Swaps the items at the indices <code>i</code> and <code>j</code>.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":""},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":""}],"args_string":"(i, j)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L392","def":{"name":"swap","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":""},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[i], self[j] = self[j], self[i]\nself\n"}},{"id":"to_a-instance-method","html_id":"to_a-instance-method","name":"to_a","doc":"Returns an Array (shallow copy) that contains all the items of this list.","summary":"<p>Returns an Array (shallow copy) that contains all the items of this list.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L418","def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ary = Array(T).new(@size)\neach do |x|\n  ary << x\nend\nary\n"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L428","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"executed = exec_recursive(:inspect) do\n  io << \"List{\"\n  join(\", \", io, &.inspect(io))\n  io << \"}\"\nend\nif executed\nelse\n  io << \"List{...}\"\nend\nnil\n"}},{"id":"unshift(obj:T)-instance-method","html_id":"unshift(obj:T)-instance-method","name":"unshift","doc":"Prepends objects to the front of the list.","summary":"<p>Prepends objects to the front of the list.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"args_string":"(obj : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L464","def":{"name":"unshift","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"node = Node(T).new(obj, nil, nil)\nif front = @head\n  front.prev = node\n  node.next = front\n  @head = node\nelse\n  @head = @tail = node\nend\n@size = @size + 1\nnode\n"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/List/Node","path":"Quartz/List/Node.html","kind":"class","full_name":"Quartz::List::Node(T)","name":"Node","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/list.cr","line_number":25,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/List","kind":"class","full_name":"Quartz::List(T)","name":"List"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(data:T,next__arg0=nil,prev=nil)-class-method","html_id":"new(data:T,next__arg0=nil,prev=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"},{"name":"__arg0","doc":null,"default_value":"nil","external_name":"next","restriction":""},{"name":"prev","doc":null,"default_value":"nil","external_name":"prev","restriction":""}],"args_string":"(data : T, next __arg0 = <span class=\"n\">nil</span>, prev = <span class=\"n\">nil</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L30","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"},{"name":"__arg0","doc":null,"default_value":"nil","external_name":"next","restriction":""},{"name":"prev","doc":null,"default_value":"nil","external_name":"prev","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Node(T).allocate\n_.initialize(data, __arg0, prev)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L33","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @data == (other.@data)\nelse\n  return false\nend\ntrue\n"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L35","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"data:T-instance-method","html_id":"data:T-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L26","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@data"}},{"id":"data=(data:T)-instance-method","html_id":"data=(data:T)-instance-method","name":"data=","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"}],"args_string":"(data : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L26","def":{"name":"data=","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data = data"}},{"id":"hash(*args,**options)-instance-method","html_id":"hash(*args,**options)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L39","def":{"name":"hash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.hash(*args, **options)"}},{"id":"hash(*args,**options,&)-instance-method","html_id":"hash(*args,**options,&amp;)-instance-method","name":"hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L39","def":{"name":"hash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.hash(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L41","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.inspect(io)"}},{"id":"next:Quartz::List::Node(T)?-instance-method","html_id":"next:Quartz::List::Node(T)?-instance-method","name":"next","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::List::Node(T)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L27","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T) | ::Nil","visibility":"Public","body":"@next"}},{"id":"next=(next__arg0:Quartz::List::Node(T)?)-instance-method","html_id":"next=(next__arg0:Quartz::List::Node(T)?)-instance-method","name":"next=","doc":null,"summary":null,"abstract":false,"args":[{"name":"__arg0","doc":null,"default_value":"","external_name":"next","restriction":"Node(T) | ::Nil"}],"args_string":"(next __arg0 : Quartz::List::Node(T)?)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L27","def":{"name":"next=","args":[{"name":"__arg0","doc":null,"default_value":"","external_name":"next","restriction":"Node(T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@next = __arg0"}},{"id":"prev:Quartz::List::Node(T)?-instance-method","html_id":"prev:Quartz::List::Node(T)?-instance-method","name":"prev","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::List::Node(T)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L28","def":{"name":"prev","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T) | ::Nil","visibility":"Public","body":"@prev"}},{"id":"prev=(prev:Quartz::List::Node(T)?)-instance-method","html_id":"prev=(prev:Quartz::List::Node(T)?)-instance-method","name":"prev=","doc":null,"summary":null,"abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":"Node(T) | ::Nil"}],"args_string":"(prev : Quartz::List::Node(T)?)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L28","def":{"name":"prev=","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":"Node(T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@prev = prev"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr#L45","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data.to_s(io)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/List/NoSuchElementError","path":"Quartz/List/NoSuchElementError.html","kind":"class","full_name":"Quartz::List::NoSuchElementError","name":"NoSuchElementError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/list.cr","line_number":19,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/list.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/List","kind":"class","full_name":"Quartz::List(T)","name":"List"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MessageAlreadySentError","path":"Quartz/MessageAlreadySentError.html","kind":"class","full_name":"Quartz::MessageAlreadySentError","name":"MessageAlreadySentError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":10,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","path":"Quartz/Model.html","kind":"class","full_name":"Quartz::Model","name":"Model","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/model.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr"},{"filename":"quartz/visitor.cr","line_number":23,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Model","kind":"class","full_name":"Quartz::MultiComponent::Model","name":"Model"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Base model class","summary":"<p>Base model class</p>","class_methods":[],"constructors":[{"id":"new(name:Name)-class-method","html_id":"new(name:Name)-class-method","name":"new","doc":"Returns a new model.","summary":"<p>Returns a new model.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L8","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"accept(visitor:Visitor)-instance-method","html_id":"accept(visitor:Visitor)-instance-method","name":"accept","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":"Visitor"}],"args_string":"(visitor : Visitor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L24","def":{"name":"accept","args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":"Visitor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"visitor.visit(self)\nif visitor.visit_children?(self)\n  accept_children(visitor)\nend\nvisitor.end_visit(self)\n"}},{"id":"accept_children(visitor)-instance-method","html_id":"accept_children(visitor)-instance-method","name":"accept_children","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"args_string":"(visitor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L32","def":{"name":"accept_children","args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L11","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(io << self.class) << \"(\"\n@name.to_s(io)\nio << \")\"\n"}},{"id":"name:Name-instance-method","html_id":"name:Name-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Name","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L4","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Name","visibility":"Public","body":"@name"}},{"id":"name=(name:Name)-instance-method","html_id":"name=(name:Name)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(name : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L4","def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"id":"processor:Processor?-instance-method","html_id":"processor:Processor?-instance-method","name":"processor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Processor?","source_link":null,"def":{"name":"processor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Processor | ::Nil","visibility":"Public","body":"if (value = @processor).nil?\n  ::raise(NilAssertionError.new(\"Quartz::Model#processor cannot be nil\"))\nelse\n  value\nend"}},{"id":"processor=(processor:Processor?)-instance-method","html_id":"processor=(processor:Processor?)-instance-method","name":"processor=","doc":null,"summary":null,"abstract":false,"args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":"Processor | ::Nil"}],"args_string":"(processor : Processor?)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L5","def":{"name":"processor=","args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":"Processor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@processor = processor"}},{"id":"processor?:Processor|Nil?-instance-method","html_id":"processor?:Processor|Nil?-instance-method","name":"processor?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Processor | Nil?","source_link":null,"def":{"name":"processor?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Processor | ::Nil | ::Nil","visibility":"Public","body":"@processor"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/model.cr#L17","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << @name\nnil\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent","path":"Quartz/MultiComponent.html","kind":"module","full_name":"Quartz::MultiComponent","name":"MultiComponent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/multi_component/component.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr"},{"filename":"quartz/multi_component/model.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr"},{"filename":"quartz/multi_component/simulator.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","path":"Quartz/MultiComponent/Component.html","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/multi_component/component.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_CHECKS","name":"STATE_CHECKS","value":"{state_complete: false}","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","kind":"module","full_name":"Quartz::Stateful","name":"Stateful"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent","kind":"module","full_name":"Quartz::MultiComponent","name":"MultiComponent"},"doc":null,"summary":null,"class_methods":[{"id":"check(*attributes:Symbol,**kwargs)-class-method","html_id":"check(*attributes:Symbol,**kwargs)-class-method","name":"check","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(*attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L6","def":{"name":"check","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if kwargs.empty?\n  raise(ArgumentError.new(\"You must inform at least one verification rule\"))\nend\nkwargs.each do |name, value|\n  verifier = case name\n  when :presence\n    if value.is_a?(NamedTuple)\n      Verifiers::PresenceChecker.new(*attributes, **value)\n    else\n      Verifiers::PresenceChecker.new(*attributes)\n    end\n  when :numericality\n    if value.is_a?(NamedTuple)\n      Verifiers::NumericalityChecker.new(*attributes, **value)\n    else\n      Verifiers::NumericalityChecker.new(*attributes)\n    end\n  else\n    raise(ArgumentError.new(\"Unknown verifier \\\"#{name}\\\"\"))\n  end\n  verifiers.push(verifier)\nend\n"}},{"id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::RuntimeValidator.class,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::RuntimeChecker\n  def validate(model)\n    if some_test\n      model.errors.add(:phase, \"This model state is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">RuntimeValidator</span>.<span class=\"k\">class</span>, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L6","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::RuntimeValidator.class"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(**kwargs)\nverifiers.push(verifier)\n"}},{"id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","html_id":"check_with(klass:Verifiers::EachChecker.class,*attributes:Symbol,**kwargs)-class-method","name":"check_with","doc":"Passes the model off to the class or classes specified and allows them\nto add errors based on more complex conditions.\n\n```\nclass MyModel\n  include Quartz::Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < Quartz::Verifiers::EachChecker\n  def check_each(model, attribute, value)\n    if some_test\n      model.errors.add(attribute, \"This model attribute is invalid\")\n    end\n  end\n\n  # ...\nend\n```","summary":"<p>Passes the model off to the class or classes specified and allows them to add errors based on more complex conditions.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(klass : <span class=\"t\">Verifiers</span><span class=\"t\">::</span><span class=\"t\">EachChecker</span>.<span class=\"k\">class</span>, *attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L6","def":{"name":"check_with","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"Verifiers::EachChecker.class"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"verifier = klass.new(*attributes, **kwargs)\nverifiers.push(verifier)\n"}},{"id":"clear_verifiers-class-method","html_id":"clear_verifiers-class-method","name":"clear_verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L6","def":{"name":"clear_verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers.try(&.clear)"}},{"id":"precision_level:Scale-class-method","html_id":"precision_level:Scale-class-method","name":"precision_level","doc":"The precision associated with the model.","summary":"<p>The precision associated with the model.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L13","def":{"name":"precision_level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@precision_level"}},{"id":"precision_level=(precision_level:Scale)-class-method","html_id":"precision_level=(precision_level:Scale)-class-method","name":"precision_level=","doc":"The precision associated with the model.","summary":"<p>The precision associated with the model.</p>","abstract":false,"args":[{"name":"precision_level","doc":null,"default_value":"","external_name":"precision_level","restriction":"Scale"}],"args_string":"(precision_level : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L13","def":{"name":"precision_level=","args":[{"name":"precision_level","doc":null,"default_value":"","external_name":"precision_level","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@precision_level = precision_level"}},{"id":"verifiers-class-method","html_id":"verifiers-class-method","name":"verifiers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L6","def":{"name":"verifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@verifiers || (@@verifiers = Array(Verifiers::RuntimeChecker).new)"}}],"constructors":[{"id":"new(name,state)-class-method","html_id":"new(name,state)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(name, state)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L99","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, state)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(name)-class-method","html_id":"new(name)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L94","def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"__initialize_state__(processor)-instance-method","html_id":"__initialize_state__(processor)-instance-method","name":"__initialize_state__","doc":"Used internally by the simulator\n:nodoc:","summary":"<p>Used internally by the simulator :nodoc:</p>","abstract":false,"args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":""}],"args_string":"(processor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L108","def":{"name":"__initialize_state__","args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @processor != processor\n  raise(InvalidProcessorError.new(\"trying to initialize state of model \\\"#{name}\\\" from an invalid processor\"))\nend\nif s = initial_state\n  self.state = s\nend\n"}},{"id":"__parent__=(parent:MultiComponent::Model)-instance-method","html_id":"__parent__=(parent:MultiComponent::Model)-instance-method","name":"__parent__=","doc":null,"summary":null,"abstract":false,"args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"MultiComponent::Model"}],"args_string":"(parent : MultiComponent::Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L82","def":{"name":"__parent__=","args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"MultiComponent::Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@__parent__ = parent"}},{"id":"confluent_transition(messages:Hash(InputPort,Array(Any))):Hash(Name,Any)?-instance-method","html_id":"confluent_transition(messages:Hash(InputPort,Array(Any))):Hash(Name,Any)?-instance-method","name":"confluent_transition","doc":"This is the default definition of the confluent transition. Here the\ninternal transition is allowed to occur and this is followed by the\neffect of the external transition on the resulting state.\n\nOverride this method to obtain a different behavior. For example, the\nopposite order of effects (external transition before internal\ntransition). Of course you can override without reference to the other\ntransitions.","summary":"<p>This is the default definition of the confluent transition.</p>","abstract":false,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any))) : Hash(Name, Any)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L133","def":{"name":"confluent_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Name, Any) | ::Nil","visibility":"Public","body":"states = internal_transition\nif self.responds_to?(:external_transition)\n  if states2 = external_transition(messages)\n    states2.each do |key, val|\n      states[key] = val\n    end\n  end\nend\nstates\n"}},{"id":"elapsed:Duration-instance-method","html_id":"elapsed:Duration-instance-method","name":"elapsed","doc":"This attribute is updated automatically along simulation and represents\nthe elapsed time since the last transition.","summary":"<p>This attribute is updated automatically along simulation and represents the elapsed time since the last transition.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L78","def":{"name":"elapsed","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@elapsed"}},{"id":"elapsed=(elapsed:Duration)-instance-method","html_id":"elapsed=(elapsed:Duration)-instance-method","name":"elapsed=","doc":"This attribute is updated automatically along simulation and represents\nthe elapsed time since the last transition.","summary":"<p>This attribute is updated automatically along simulation and represents the elapsed time since the last transition.</p>","abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L78","def":{"name":"elapsed=","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@elapsed = elapsed"}},{"id":"influencees:Array(Quartz::MultiComponent::Component)-instance-method","html_id":"influencees:Array(Quartz::MultiComponent::Component)-instance-method","name":"influencees","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Quartz::MultiComponent::Component)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L10","def":{"name":"influencees","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@influencees"}},{"id":"influencers:Array(Quartz::MultiComponent::Component)-instance-method","html_id":"influencers:Array(Quartz::MultiComponent::Component)-instance-method","name":"influencers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Quartz::MultiComponent::Component)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L9","def":{"name":"influencers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@influencers"}},{"id":"input_port(port)-instance-method","html_id":"input_port(port)-instance-method","name":"input_port","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"args_string":"(port)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L86","def":{"name":"input_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@__parent__.not_nil!.input_port(port)"}},{"id":"internal_transition:Hash(Name,Any)?-instance-method","html_id":"internal_transition:Hash(Name,Any)?-instance-method","name":"internal_transition","doc":"Internal transition function (δint), called when the model should be\nactivated, e.g when `#elapsed` reaches `#time_advance`\n\nOverride this method to implement the appropriate behavior of\nyour model.","summary":"<p>Internal transition function (δint), called when the model should be activated, e.g when <code><a href=\"../../Quartz/MultiComponent/Component.html#elapsed:Duration-instance-method\">#elapsed</a></code> reaches <code><a href=\"../../Quartz/MultiComponent/Component.html#time_advance:Duration-instance-method\">#time_advance</a></code></p>","abstract":true,"args":[],"args_string":" : Hash(Name, Any)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L123","def":{"name":"internal_transition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Name, Any) | ::Nil","visibility":"Public","body":""}},{"id":"model_precision:Scale-instance-method","html_id":"model_precision:Scale-instance-method","name":"model_precision","doc":"Returns the precision associated with the class.","summary":"<p>Returns the precision associated with the class.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L72","def":{"name":"model_precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@@precision_level"}},{"id":"output_port(port)-instance-method","html_id":"output_port(port)-instance-method","name":"output_port","doc":null,"summary":null,"abstract":false,"args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"args_string":"(port)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L90","def":{"name":"output_port","args":[{"name":"port","doc":null,"default_value":"","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@__parent__.not_nil!.output_port(port)"}},{"id":"reaction_transition(states)-instance-method","html_id":"reaction_transition(states)-instance-method","name":"reaction_transition","doc":"TODO: doc","summary":"<p><span class=\"flag orange\">TODO</span>  doc</p>","abstract":true,"args":[{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""}],"args_string":"(states)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L160","def":{"name":"reaction_transition","args":[{"name":"states","doc":null,"default_value":"","external_name":"states","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"time_advance:Duration-instance-method","html_id":"time_advance:Duration-instance-method","name":"time_advance","doc":"Time advance function (ta), called after each transition to give a\nchance to *self* to be active.\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef time_advance\n  Quartz.infinity\nend\n```","summary":"<p>Time advance function (ta), called after each transition to give a chance to <em>self</em> to be active.</p>","abstract":true,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L157","def":{"name":"time_advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}}],"macros":[{"id":"precision(scale=&quot;base&quot;)-macro","html_id":"precision(scale=&amp;quot;base&amp;quot;)-macro","name":"precision","doc":"Defines the precision level associated to this class of models.\n\n### Usage:\n\n`precision` must receive a scale unit. The scale unit can be specified\nwith a constant expression (e.g. 'kilo'), with a `Scale` struct or with\na number literal.\n\n```\nprecision Scale.::KILO\nprecision -8\nprecision femto\n```\n\nIf specified with a constant expression, the unit argument can be a string\nliteral, a symbol literal or a plain name.\n\n```\nprecision kilo\nprecision \"kilo\"\nprecision :kilo\n```\n\n### Example\n\n```\nclass MyModel < Quartz::AtomicModel\n  precision femto\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < Quartz::AtomicModel\n  self.precision = Scale::FEMTO\nend\n```\n\nOr the same as:\n\n```\nclass MyModel < Quartz::AtomicModel; end\n\nMyModel.precision = Scale::FEMTO\n```","summary":"<p>Defines the precision level associated to this class of models.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"\"base\"","external_name":"scale","restriction":""}],"args_string":"(scale = <span class=\"s\">&quot;base&quot;</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/component.cr#L61","def":{"name":"precision","args":[{"name":"scale","doc":null,"default_value":"\"base\"","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% if Quartz::ALLOWED_SCALE_UNITS.includes?(scale.id.stringify) %}\n        self.precision_level = Quartz::Scale::{{ scale.id.upcase }}\n      {% else %}{% if scale.is_a?(NumberLiteral) %}\n        self.precision_level = Quartz::Scale.new({{ scale }})\n      {% else %}\n        self.precision_level = {{ scale }}\n      {% end %}{% end %}\n\n      \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Model","path":"Quartz/MultiComponent/Model.html","kind":"class","full_name":"Quartz::MultiComponent::Model","name":"Model","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","kind":"module","full_name":"Quartz::Transferable","name":"Transferable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Model","kind":"class","full_name":"Quartz::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/multi_component/model.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr"},{"filename":"quartz/visitor.cr","line_number":42,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent","kind":"module","full_name":"Quartz::MultiComponent","name":"MultiComponent"},"doc":null,"summary":null,"class_methods":[{"id":"preferred_event_set:Symbol-class-method","html_id":"preferred_event_set:Symbol-class-method","name":"preferred_event_set","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":null,"def":{"name":"preferred_event_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":"if (value = @@preferred_event_set).nil?\n  ::raise(NilAssertionError.new(\"Quartz::MultiComponent::Model.preferred_event_set cannot be nil\"))\nelse\n  value\nend"}},{"id":"preferred_event_set=(preferred_event_set:Symbol)-class-method","html_id":"preferred_event_set=(preferred_event_set:Symbol)-class-method","name":"preferred_event_set=","doc":null,"summary":null,"abstract":false,"args":[{"name":"preferred_event_set","doc":null,"default_value":"","external_name":"preferred_event_set","restriction":"Symbol"}],"args_string":"(preferred_event_set : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L7","def":{"name":"preferred_event_set=","args":[{"name":"preferred_event_set","doc":null,"default_value":"","external_name":"preferred_event_set","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@preferred_event_set = preferred_event_set"}},{"id":"preferred_event_set?:Symbol?-class-method","html_id":"preferred_event_set?:Symbol?-class-method","name":"preferred_event_set?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","source_link":null,"def":{"name":"preferred_event_set?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol | ::Nil","visibility":"Public","body":"@@preferred_event_set"}}],"constructors":[],"instance_methods":[{"id":"<<(component)-instance-method","html_id":"&lt;&lt;(component)-instance-method","name":"<<","doc":null,"summary":null,"abstract":false,"args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":""}],"args_string":"(component)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L43","def":{"name":"<<","args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"component.__parent__=(self)\n@components[component.name] = component\n"}},{"id":"accept_children(visitor)-instance-method","html_id":"accept_children(visitor)-instance-method","name":"accept_children","doc":null,"summary":null,"abstract":false,"args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"args_string":"(visitor)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L43","def":{"name":"accept_children","args":[{"name":"visitor","doc":null,"default_value":"","external_name":"visitor","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"components.each_value(&.accept(visitor))"}},{"id":"components:Hash(String|Symbol,Quartz::MultiComponent::Component)-instance-method","html_id":"components:Hash(String|Symbol,Quartz::MultiComponent::Component)-instance-method","name":"components","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String | Symbol, Quartz::MultiComponent::Component)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L41","def":{"name":"components","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@components"}}],"macros":[{"id":"event_set(name)-macro","html_id":"event_set(name)-macro","name":"event_set","doc":"Defines the preferred event set for this particular class of coupled\nmodels. Specified event set will be used to coordinate childrens in all\ninstances of this multicomponent model.\n\nWriting:\n\n```\nclass MyCoupled < CoupledModel\n  event_set ladder_queue\nend\n```\n\nIs the same as writing:\n\n```\nclass MyCoupled < CoupledModel\n  self.preferred_event_set = :ladder_queue\nend\n```\n\nOr the same as:\n\n```\nclass MyCoupled < CoupledModel; end\nMyCoupled.preferred_event_set = :ladder_queue\n```\n\nThe argument can be a string literal, a symbol literal or a plain name.","summary":"<p>Defines the preferred event set for this particular class of coupled models.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L37","def":{"name":"event_set","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        self.preferred_event_set = :\n{{ name.id }}\n\n      \n"}},{"id":"input(*names)-macro","html_id":"input(*names)-macro","name":"input","doc":"Defines default input ports for each of the given arguments.\nThose default input ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  input port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_input_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbol literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  input :in1, \"in2\", in3\nend\n```","summary":"<p>Defines default input ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L5","def":{"name":"input","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._input_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}},{"id":"output(*names)-macro","html_id":"output(*names)-macro","name":"output","doc":"Defines default output ports for each of the given arguments.\nThose default output ports will be available in all instances, including\ninstances of subclasses (meaning that ports are inherited).\n\nWriting:\n\n```\nclass MyModel < AtomicModel\n  output port_name\nend\n```\n\nIs the same as writing:\n\n```\nclass MyModel < AtomicModel\n  def initialize(name)\n    super(name)\n    add_output_port :port_name\n  end\nend\n```\n\nThe arguments can be string literals, symbol literals or plain names.\nHowever, they will be converted to symbols literals when the\nmodel is instantiated.\n\n```\nclass MyModel < AtomicModel\n  output :out1, \"out2\", out3\nend\n```","summary":"<p>Defines default output ports for each of the given arguments.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/model.cr#L5","def":{"name":"output","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          self._output_ports << :{{ name.id }}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Simulator","path":"Quartz/MultiComponent/Simulator.html","kind":"class","full_name":"Quartz::MultiComponent::Simulator","name":"Simulator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/multi_component/simulator.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent","kind":"module","full_name":"Quartz::MultiComponent","name":"MultiComponent"},"doc":"This class defines a multiPDEVS simulator.","summary":"<p>This class defines a multiPDEVS simulator.</p>","class_methods":[],"constructors":[{"id":"new(model,simulation)-class-method","html_id":"new(model,simulation)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""}],"args_string":"(model, simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr#L23","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","html_id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","name":"collect_outputs","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Hash(OutputPort, Array(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr#L107","def":{"name":"collect_outputs","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(OutputPort, Array(Any))","visibility":"Public","body":"if @parent_bag.empty?\nelse\n  @parent_bag.clear\nend\n@event_set.each_imminent_event do |component|\n  component = component.as(Component)\n  @imm << component\n  if component.responds_to?(:output)\n    if sub_bag = component.output\n      sub_bag.each do |k, v|\n        @parent_bag[k] << v\n      end\n    end\n  end\nend\nmultipdevs = @model.as(MultiComponent::Model)\nif multipdevs.count_observers > 0\n  multipdevs.notify_observers(OBS_INFO_COLLECT_PHASE.merge({:time => @event_set.current_time, :elapsed => elapsed}))\nend\n@parent_bag\n"}},{"id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","html_id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","name":"initialize_processor","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : ::Tuple(Duration, Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr#L62","def":{"name":"initialize_processor","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Duration, Duration)","visibility":"Public","body":"@reac_count = @int_count = @ext_count = @con_count = 0_u32\n@event_set.clear\n@time_cache.current_time = @event_set.current_time = time\nmax_elapsed = Duration.new(0)\n@components.each_value do |component|\n  component.__initialize_state__(self)\n  elapsed = component.elapsed\n  planned_duration = fixed_planned_duration(component.time_advance.as(Duration), component)\n  Log.debug do\n    String.build do |str|\n      ((str << '\\'') << component.name) << \"' initialized (\"\n      ((str << \"elapsed: \") << elapsed) << \", time_next: \"\n      (str << planned_duration) << ')'\n    end\n  end\n  if component.count_observers > 0\n    component.notify_observers(OBS_INFO_INIT_TRANSITION.merge({:time => time, :elapsed => elapsed}))\n  end\n  @time_cache.retain_event(component, elapsed)\n  if !planned_duration.infinite?\n    @event_set.plan_event(component, planned_duration)\n  else\n    component.planned_phase = planned_duration\n  end\n  if elapsed > max_elapsed\n    max_elapsed = elapsed\n  end\nend\nmultipdevs = @model.as(MultiComponent::Model)\nif multipdevs.count_observers > 0\n  multipdevs.notify_observers(OBS_INFO_INIT_PHASE.merge({:time => time}))\nend\n{max_elapsed.fixed, @event_set.imminent_duration.fixed}\n"}},{"id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(time : TimePoint, elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr#L146","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"bag = @bag || EMPTY_BAG\nif elapsed.zero? && bag.empty?\n  @int_count = @int_count + @imm.size\n  @imm.each do |component|\n    update_elapsed_duration_for(component)\n    component.influencers.each do |influencer|\n      update_elapsed_duration_for(influencer)\n    end\n    component.internal_transition.try do |ps|\n      ps.each do |k, v|\n        @state_bags[@components[k]] << {component.name, v}\n      end\n    end\n    Log.debug do\n      String.build do |str|\n        ((str << '\\'') << component.name) << \"': internal transition\"\n      end\n    end\n    if component.count_observers > 0\n      component.notify_observers(OBS_INFO_INT_TRANSITION.merge({:time => time, :elapsed => component.elapsed}))\n    end\n  end\nelse\n  if !bag.empty?\n    @components.each do |component_name, component|\n      info = nil\n      kind = nil\n      remaining_duration = @event_set.duration_of(component)\n      update_elapsed_duration_for(component)\n      component.influencers.each do |influencer|\n        update_elapsed_duration_for(influencer)\n      end\n      o = if elapsed.zero? && remaining_duration.zero?\n        if component.responds_to?(:external_transition)\n          info = OBS_INFO_CON_TRANSITION\n          kind = :confluent\n          @con_count = @con_count + 1_u32\n          component.confluent_transition(bag)\n        else\n          info = OBS_INFO_INT_TRANSITION\n          kind = :internal\n          @int_count = @int_count + 1_u32\n          component.internal_transition\n        end\n      else\n        if component.responds_to?(:external_transition)\n          info = OBS_INFO_EXT_TRANSITION\n          kind = :external\n          @ext_count = @ext_count + 1_u32\n          component.external_transition(bag)\n        end\n      end\n      if info\n        o.try(&.each do |k, v|\n          @state_bags[@components[k]] << {component_name, v}\n        end)\n        Log.debug do\n          String.build do |str|\n            ((((str << '\\'') << component.name) << \"': \") << kind) << \" transition\"\n          end\n        end\n        if component.count_observers > 0\n          component.notify_observers(info.merge({:time => time, :elapsed => component.elapsed}))\n        end\n      end\n    end\n  end\nend\nbag.clear\n@imm.clear\n@elapsed_updates.clear\n@state_bags.each do |component, states|\n  remaining_duration = @event_set.duration_of(component)\n  elapsed_duration = @time_cache.elapsed_duration_of(component)\n  ev_deleted = if remaining_duration.zero?\n    elapsed_duration = Duration.zero(elapsed_duration.precision, elapsed_duration.fixed?)\n    true\n  else\n    if !remaining_duration.infinite?\n      (@event_set.cancel_event(component)) != nil\n    else\n      true\n    end\n  end\n  component.elapsed = elapsed_duration\n  component.reaction_transition(states)\n  planned_duration = fixed_planned_duration(component.time_advance.as(Duration), component)\n  if planned_duration.infinite?\n    component.planned_phase = Duration::INFINITY.fixed\n  else\n    if ev_deleted || ((!ev_deleted) && (!planned_duration.zero?))\n      @event_set.plan_event(component, planned_duration)\n    end\n  end\n  @time_cache.retain_event(component, planned_duration.precision)\n  Log.debug do\n    String.build do |str|\n      ((str << '\\'') << component.name) << \"': reaction transition (\"\n      ((((str << \"elapsed: \") << elapsed_duration) << \", time_next: \") << planned_duration) << ')'\n    end\n  end\n  if component.count_observers > 0\n    component.notify_observers(OBS_INFO_REAC_TRANSITION.merge({:time => time, :elapsed => elapsed_duration}))\n  end\nend\n@reac_count = @reac_count + @state_bags.size\n@state_bags.clear\nmultipdevs = @model.as(MultiComponent::Model)\nif multipdevs.count_observers > 0\n  multipdevs.notify_observers(OBS_INFO_TRANSITIONS_PHASE.merge({:time => time, :elapsed => elapsed}))\nend\n@event_set.imminent_duration.fixed\n"}},{"id":"transition_stats-instance-method","html_id":"transition_stats-instance-method","name":"transition_stats","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/multi_component/simulator.cr#L42","def":{"name":"transition_stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{external: @ext_count, internal: @int_count, confluent: @con_count, reaction: @reac_count}"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Name","path":"Quartz/Name.html","kind":"alias","full_name":"Quartz::Name","name":"Name","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/types.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/types.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":true,"aliased":"(String | Symbol)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `Name` alias is used in Quartz to denote the name of a `Model` or the\nname of a `Port`.","summary":"<p>The <code>Name</code> alias is used in Quartz to denote the name of a <code>Model</code> or the name of a <code>Port</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/NoSuchChildError","path":"Quartz/NoSuchChildError.html","kind":"class","full_name":"Quartz::NoSuchChildError","name":"NoSuchChildError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/NoSuchPortError","path":"Quartz/NoSuchPortError.html","kind":"class","full_name":"Quartz::NoSuchPortError","name":"NoSuchPortError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":6,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","path":"Quartz/Observable.html","kind":"module","full_name":"Quartz::Observable","name":"Observable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/observer.cr","line_number":61,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CoupledModel","kind":"class","full_name":"Quartz::CoupledModel","name":"CoupledModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Model","kind":"class","full_name":"Quartz::MultiComponent::Model","name":"Model"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/OutputPort","kind":"class","full_name":"Quartz::OutputPort","name":"OutputPort"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The Observer pattern (publish/subscribe) provides a simple mechanism for\none object to inform a set of interested third-party objects when its state\nchanges.\n\nThe notifying class mixes in the `Observable` module, which provides the\nmethods for managing the associated observer objects.\nThe observable object must call `#notify_observers` to notify its observers.\n\nAn observer object must conforms to the `Observer` protocol. It subscribes\nto updates using `#add_observer`.\n\nExample 1: Observing model state changes\n\n```\nclass MyObserver\n  include Quartz::Observer\n\n  def update(observable, info)\n    if observable.is_a?(MyModel)\n      model = observable.as(MyModel)\n      puts \"#{model.name} changed its state to #{model.phase}\"\n    end\n  end\nend\n\nmodel = MyModel.new(\"mymodel\")\nmodel.add_observer(MyObserver.new)\nQuartz::Simulation.new(model).simulate\n```\n\nExample 2: Observing outputs on a port.\n\n```\nclass MyObserver\n  include Quartz::Observer\n\n  def update(observable, info)\n    if observable.is_a?(Port) && info\n      puts \"port '#{port.name}' sends value '#{info[:payload]}'\"\n    end\n  end\nend\n\nmodel = MyModel.new(\"mymodel\")\nmodel.output_port(:out).add_observer(MyObserver.new)\nQuartz::Simulation.new(model).simulate\n```","summary":"<p>The Observer pattern (publish/subscribe) provides a simple mechanism for one object to inform a set of interested third-party objects when its state changes.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_observer(observer:Observer)-instance-method","html_id":"add_observer(observer:Observer)-instance-method","name":"add_observer","doc":"Adds *observer* to the list of observers so that it will receive future\nupdates.","summary":"<p>Adds <em>observer</em> to the list of observers so that it will receive future updates.</p>","abstract":false,"args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":"Observer"}],"args_string":"(observer : Observer)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr#L66","def":{"name":"add_observer","args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":"Observer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@observers || (@observers = [] of Observer)\n@observers.not_nil! << observer\n"}},{"id":"count_observers-instance-method","html_id":"count_observers-instance-method","name":"count_observers","doc":"Returns the number of objects currently observing this object.","summary":"<p>Returns the number of objects currently observing this object.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr#L78","def":{"name":"count_observers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if obs = @observers\n  obs.size\nelse\n  0\nend"}},{"id":"delete_observer(observer:Observer):Bool-instance-method","html_id":"delete_observer(observer:Observer):Bool-instance-method","name":"delete_observer","doc":"Removes *observer* from the list of observers so that it will no longer\nreceive updates.","summary":"<p>Removes <em>observer</em> from the list of observers so that it will no longer receive updates.</p>","abstract":false,"args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":"Observer"}],"args_string":"(observer : Observer) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr#L73","def":{"name":"delete_observer","args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":"Observer"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@observers.try(&.delete(observer)) != nil"}},{"id":"notify_observers(info=nil)-instance-method","html_id":"notify_observers(info=nil)-instance-method","name":"notify_observers","doc":"Notifies observers of a change in state. A dictionary, *info*, can be\npassed to observers that conforms to the `Observer` protocol.","summary":"<p>Notifies observers of a change in state.</p>","abstract":false,"args":[{"name":"info","doc":null,"default_value":"nil","external_name":"info","restriction":""}],"args_string":"(info = <span class=\"n\">nil</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr#L88","def":{"name":"notify_observers","args":[{"name":"info","doc":null,"default_value":"nil","external_name":"info","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@observers.try(&.each do |observer|\n  observer.update(self, info)\nend)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observer","path":"Quartz/Observer.html","kind":"module","full_name":"Quartz::Observer","name":"Observer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/observer.cr","line_number":7,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `Observer` module is intended to be included in a class as a mixin.\nIt provides a protocol so that objects can register to `Observable` objects\nand receives their updates, along with additional optional information.\n\nObservers must define an `#update` method.","summary":"<p>The <code><a href=\"../Quartz/Observer.html\">Observer</a></code> module is intended to be included in a class as a mixin.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"update(observable:Observable,info)-instance-method","html_id":"update(observable:Observable,info)-instance-method","name":"update","doc":"This method is called whenever the observed object (*observable*) is\nchanged. A dictionary representing additional information, *info*,\nmay be available, or `nil` otherwise.","summary":"<p>This method is called whenever the observed object (<em>observable</em>) is changed.</p>","abstract":true,"args":[{"name":"observable","doc":null,"default_value":"","external_name":"observable","restriction":"Observable"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"args_string":"(observable : Observable, info)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/observer.cr#L11","def":{"name":"update","args":[{"name":"observable","doc":null,"default_value":"","external_name":"observable","restriction":"Observable"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/OutputPort","path":"Quartz/OutputPort.html","kind":"class","full_name":"Quartz::OutputPort","name":"OutputPort","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Port","kind":"class","full_name":"Quartz::Port","name":"Port"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Port","kind":"class","full_name":"Quartz::Port","name":"Port"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/port.cr","line_number":24,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Observable","kind":"module","full_name":"Quartz::Observable","name":"Observable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represents an output port that belongs to a `Coupleable` (the *host*).","summary":"<p>This class represents an output port that belongs to a <code><a href=\"../Quartz/Coupleable.html\">Coupleable</a></code> (the <em>host</em>).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"add_observer(observer)-instance-method","html_id":"add_observer(observer)-instance-method","name":"add_observer","doc":null,"summary":null,"abstract":false,"args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":""}],"args_string":"(observer)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L30","def":{"name":"add_observer","args":[{"name":"observer","doc":null,"default_value":"","external_name":"observer","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @host.is_a?(CoupledModel)\n  (@host.as(CoupledModel)).each_output_coupling_reverse(self) do |src, _|\n    src.add_observer(observer)\n  end\nelse\n  super(observer)\nend"}},{"id":"siblings_ports-instance-method","html_id":"siblings_ports-instance-method","name":"siblings_ports","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L25","def":{"name":"siblings_ports","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @siblings_ports).nil?\n  @siblings_ports = (Array(InputPort).new)\nelse\n  value\nend"}},{"id":"upward_ports-instance-method","html_id":"upward_ports-instance-method","name":"upward_ports","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L26","def":{"name":"upward_ports","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @upward_ports).nil?\n  @upward_ports = (Array(OutputPort).new)\nelse\n  value\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PassiveBehavior","path":"Quartz/PassiveBehavior.html","kind":"module","full_name":"Quartz::PassiveBehavior","name":"PassiveBehavior","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/behaviors/passive.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This mixin provides a passive behavior to the included `AtomicModel`.","summary":"<p>This mixin provides a passive behavior to the included <code><a href=\"../Quartz/AtomicModel.html\">AtomicModel</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"external_transition","doc":null,"summary":null,"abstract":false,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr#L4","def":{"name":"external_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"internal_transition-instance-method","html_id":"internal_transition-instance-method","name":"internal_transition","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr#L7","def":{"name":"internal_transition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"output-instance-method","html_id":"output-instance-method","name":"output","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr#L14","def":{"name":"output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"time_advance:Duration-instance-method","html_id":"time_advance:Duration-instance-method","name":"time_advance","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/behaviors/passive.cr#L10","def":{"name":"time_advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"Quartz::Duration.infinity(model_precision)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Port","path":"Quartz/Port.html","kind":"class","full_name":"Quartz::Port","name":"Port","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/port.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/InputPort","kind":"class","full_name":"Quartz::InputPort","name":"InputPort"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/OutputPort","kind":"class","full_name":"Quartz::OutputPort","name":"OutputPort"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Represents a port that belongs to a `Coupleable` (the *host*).","summary":"<p>Represents a port that belongs to a <code><a href=\"../Quartz/Coupleable.html\">Coupleable</a></code> (the <em>host</em>).</p>","class_methods":[],"constructors":[{"id":"new(host:Coupleable,name:Name)-class-method","html_id":"new(host:Coupleable,name:Name)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":"Coupleable"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"args_string":"(host : Coupleable, name : Name)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L9","def":{"name":"new","args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":"Coupleable"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"Name"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(host, name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L7","def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hasher = @name.hash(hasher)\nhasher = @host.hash(hasher)\nhasher\n"}},{"id":"host:Coupleable-instance-method","html_id":"host:Coupleable-instance-method","name":"host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Coupleable","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L5","def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Coupleable","visibility":"Public","body":"@host"}},{"id":"name:Name-instance-method","html_id":"name:Name-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Name","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L4","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Name","visibility":"Public","body":"@name"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/port.cr#L12","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << @name\nnil\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/PriorityQueue","path":"Quartz/PriorityQueue.html","kind":"class","full_name":"Quartz::PriorityQueue(T)","name":"PriorityQueue","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/event_set.cr","line_number":36,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/BinaryHeap","kind":"class","full_name":"Quartz::BinaryHeap(T)","name":"BinaryHeap"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/CalendarQueue","kind":"class","full_name":"Quartz::CalendarQueue(T)","name":"CalendarQueue"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/FibonacciHeap","kind":"class","full_name":"Quartz::FibonacciHeap(T)","name":"FibonacciHeap"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/HeapSet","kind":"class","full_name":"Quartz::HeapSet(T)","name":"HeapSet"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"A `PriorityQueue` is the base class to implement a planning strategy for all\nfuture events to be evaluated. Events should be dequeued in a strict order\nof precedence, according to their associated priority.\n\nThe priority is represented by the `Duration` data type, which represent a\nplanned phase, an offset from the beginning of the current epoch relative\nto the current simulated time.\n\nIt is internally used by the pending event set `EventSet`.","summary":"<p>A <code><a href=\"../Quartz/PriorityQueue.html\">PriorityQueue</a></code> is the base class to implement a planning strategy for all future events to be evaluated.</p>","class_methods":[],"constructors":[{"id":"new(priority_queue:Symbol,&comparator:Duration,Duration,Bool->Int32):self-class-method","html_id":"new(priority_queue:Symbol,&amp;comparator:Duration,Duration,Bool-&gt;Int32):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"priority_queue","doc":null,"default_value":"","external_name":"priority_queue","restriction":"Symbol"}],"args_string":"(priority_queue : Symbol, &comparator : Duration, Duration, Bool -> Int32) : <span class=\"k\">self</span>","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L37","def":{"name":"new","args":[{"name":"priority_queue","doc":null,"default_value":"","external_name":"priority_queue","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"comparator","doc":null,"default_value":"","external_name":"comparator","restriction":"(Duration, Duration, Bool -> Int32)"},"return_type":"self","visibility":"Public","body":"case priority_queue\nwhen :ladder_queue\n  LadderQueue(T).new(&comparator)\nwhen :calendar_queue\n  CalendarQueue(T).new(&comparator)\nwhen :binary_heap\n  BinaryHeap(T).new(&comparator)\nwhen :fibonacci_heap\n  FibonacciHeap(T).new(&comparator)\nwhen :heap_set\n  HeapSet(T).new(&comparator)\nelse\n  puts(\"Unknown priority queue '#{priority_queue}', defaults to binary heap\")\n  BinaryHeap(T).new(&comparator)\nend"}},{"id":"new(&)-class-method","html_id":"new(&amp;)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L50","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = PriorityQueue(T).allocate\n_.initialize do |_arg0, _arg1, _arg2|\n  yield _arg0, _arg1, _arg2\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L53","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"delete(priority:Duration,value:T):T?-instance-method","html_id":"delete(priority:Duration,value:T):T?-instance-method","name":"delete","doc":null,"summary":null,"abstract":true,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T) : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L58","def":{"name":"delete","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":""}},{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L52","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"next_priority:Duration-instance-method","html_id":"next_priority:Duration-instance-method","name":"next_priority","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L59","def":{"name":"next_priority","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}},{"id":"peek:T-instance-method","html_id":"peek:T-instance-method","name":"peek","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L55","def":{"name":"peek","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":""}},{"id":"peek?:T?-instance-method","html_id":"peek?:T?-instance-method","name":"peek?","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : T?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L56","def":{"name":"peek?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":""}},{"id":"pop:T-instance-method","html_id":"pop:T-instance-method","name":"pop","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : T","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L57","def":{"name":"pop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":""}},{"id":"pop_imminents(&)-instance-method","html_id":"pop_imminents(&amp;)-instance-method","name":"pop_imminents","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L61","def":{"name":"pop_imminents","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"priority = self.next_priority\nwhile (!empty?) && (self.next_priority == priority)\n  yield pop\nend\n"}},{"id":"push(priority:Duration,value:T)-instance-method","html_id":"push(priority:Duration,value:T)-instance-method","name":"push","doc":null,"summary":null,"abstract":true,"args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(priority : Duration, value : T)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L54","def":{"name":"push","args":[{"name":"priority","doc":null,"default_value":"","external_name":"priority","restriction":"Duration"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"size:Int-instance-method","html_id":"size:Int-instance-method","name":"size","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L51","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","path":"Quartz/Processor.html","kind":"class","full_name":"Quartz::Processor","name":"Processor","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/processor.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/Simulator","kind":"class","full_name":"Quartz::DTSS::Simulator","name":"Simulator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Simulator","kind":"class","full_name":"Quartz::MultiComponent::Simulator","name":"Simulator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulator","kind":"class","full_name":"Quartz::Simulator","name":"Simulator"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(model:Model)-class-method","html_id":"new(model:Model)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"args_string":"(model : Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L27","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bag:Hash(InputPort,Array(Any))-instance-method","html_id":"bag:Hash(InputPort,Array(Any))-instance-method","name":"bag","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(InputPort, Array(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L32","def":{"name":"bag","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(InputPort, Array(Any))","visibility":"Public","body":"@bag || (@bag = Hash(InputPort, Array(Any)).new do |h, k|\n  h[k] = Array(Any).new\nend)"}},{"id":"bag?:Hash(InputPort,Array(Any))?-instance-method","html_id":"bag?:Hash(InputPort,Array(Any))?-instance-method","name":"bag?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(InputPort, Array(Any))?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L36","def":{"name":"bag?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(InputPort, Array(Any)) | ::Nil","visibility":"Public","body":"@bag"}},{"id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","html_id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","name":"collect_outputs","doc":null,"summary":null,"abstract":true,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Hash(OutputPort, Array(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L52","def":{"name":"collect_outputs","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(OutputPort, Array(Any))","visibility":"Public","body":""}},{"id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","html_id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","name":"initialize_processor","doc":null,"summary":null,"abstract":true,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : ::Tuple(Duration, Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L51","def":{"name":"initialize_processor","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Duration, Duration)","visibility":"Public","body":""}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L46","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((io << \"<\") << self.class.name) << \": model=\"\n@model.to_s(io)\n"}},{"id":"model:Model-instance-method","html_id":"model:Model-instance-method","name":"model","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Model","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L21","def":{"name":"model","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Model","visibility":"Public","body":"@model"}},{"id":"parent:Coordinator?-instance-method","html_id":"parent:Coordinator?-instance-method","name":"parent","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Coordinator?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L23","def":{"name":"parent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Coordinator | ::Nil","visibility":"Public","body":"@parent"}},{"id":"parent=(parent:Coordinator?)-instance-method","html_id":"parent=(parent:Coordinator?)-instance-method","name":"parent=","doc":null,"summary":null,"abstract":false,"args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"Coordinator | ::Nil"}],"args_string":"(parent : Coordinator?)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L23","def":{"name":"parent=","args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"Coordinator | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parent = parent"}},{"id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":true,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(time : TimePoint, elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L53","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}},{"id":"sync:Bool-instance-method","html_id":"sync:Bool-instance-method","name":"sync","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L22","def":{"name":"sync","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@sync"}},{"id":"sync=(sync:Bool)-instance-method","html_id":"sync=(sync:Bool)-instance-method","name":"sync=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sync","doc":null,"default_value":"","external_name":"sync","restriction":"Bool"}],"args_string":"(sync : Bool)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L22","def":{"name":"sync=","args":[{"name":"sync","doc":null,"default_value":"","external_name":"sync","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sync = sync"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor.cr#L40","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(io << self.class.name) << \"(\"\n@model.to_s(io)\nio << \")\"\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/ProcessorAllocator","path":"Quartz/ProcessorAllocator.html","kind":"class","full_name":"Quartz::ProcessorAllocator","name":"ProcessorAllocator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/processor_allocator.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","kind":"module","full_name":"Quartz::Visitor","name":"Visitor"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(simulation,parent_processor:Coordinator)-class-method","html_id":"new(simulation,parent_processor:Coordinator)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""},{"name":"parent_processor","doc":null,"default_value":"","external_name":"parent_processor","restriction":"Coordinator"}],"args_string":"(simulation, parent_processor : Coordinator)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L21","def":{"name":"new","args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""},{"name":"parent_processor","doc":null,"default_value":"","external_name":"parent_processor","restriction":"Coordinator"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(simulation, parent_processor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(simulation,root_model)-class-method","html_id":"new(simulation,root_model)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""},{"name":"root_model","doc":null,"default_value":"","external_name":"root_model","restriction":""}],"args_string":"(simulation, root_model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L17","def":{"name":"new","args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":""},{"name":"root_model","doc":null,"default_value":"","external_name":"root_model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(simulation, root_model)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"end_visit(model:CoupledModel)-instance-method","html_id":"end_visit(model:CoupledModel)-instance-method","name":"end_visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L50","def":{"name":"end_visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stack.pop"}},{"id":"simulable:Simulable-instance-method","html_id":"simulable:Simulable-instance-method","name":"simulable","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Simulable","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L13","def":{"name":"simulable","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Simulable","visibility":"Public","body":"@root_coordinator.as(Simulable)"}},{"id":"visit(model:DSDE::CoupledModel)-instance-method","html_id":"visit(model:DSDE::CoupledModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"DSDE::CoupledModel"}],"args_string":"(model : DSDE::CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L26","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"DSDE::CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processor = if model == @root_model\n  @root_coordinator = DSDE::RootCoordinator.new(model, @simulation)\nelse\n  DSDE::DynamicCoordinator.new(model, @simulation)\nend\nif parent = @stack.last?\n  parent << processor\nend\n@stack.push(processor)\n"}},{"id":"visit(model:CoupledModel)-instance-method","html_id":"visit(model:CoupledModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"args_string":"(model : CoupledModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L38","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"CoupledModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processor = if model == @root_model\n  @root_coordinator = RootCoordinator.new(model, @simulation)\nelse\n  Coordinator.new(model, @simulation)\nend\nif parent = @stack.last?\n  parent << processor\nend\n@stack.push(processor)\n"}},{"id":"visit(model:AtomicModel)-instance-method","html_id":"visit(model:AtomicModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"AtomicModel"}],"args_string":"(model : AtomicModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L54","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"AtomicModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stack.last << (Simulator.new(model, @simulation))"}},{"id":"visit(model:MultiComponent::Model)-instance-method","html_id":"visit(model:MultiComponent::Model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"args_string":"(model : MultiComponent::Model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L58","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"MultiComponent::Model"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stack.last << (MultiComponent::Simulator.new(model, @simulation))"}},{"id":"visit(model:DTSS::AtomicModel)-instance-method","html_id":"visit(model:DTSS::AtomicModel)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"DTSS::AtomicModel"}],"args_string":"(model : DTSS::AtomicModel)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L62","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"DTSS::AtomicModel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@stack.last << (DTSS::Simulator.new(model, @simulation))"}},{"id":"visit(model)-instance-method","html_id":"visit(model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr#L66","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(ProcessorAllocationError.new(\"No processor able to simulate \\\"#{model.name}\\\" model.\"))"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/ProcessorAllocator/ProcessorAllocationError","path":"Quartz/ProcessorAllocator/ProcessorAllocationError.html","kind":"class","full_name":"Quartz::ProcessorAllocator::ProcessorAllocationError","name":"ProcessorAllocationError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/processor_allocator.cr","line_number":5,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/processor_allocator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/ProcessorAllocator","kind":"class","full_name":"Quartz::ProcessorAllocator","name":"ProcessorAllocator"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/RootCoordinator","path":"Quartz/RootCoordinator.html","kind":"class","full_name":"Quartz::RootCoordinator","name":"RootCoordinator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulable","kind":"module","full_name":"Quartz::Simulable","name":"Simulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/root.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulable","kind":"module","full_name":"Quartz::Simulable","name":"Simulable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"advance(*args,**options)-instance-method","html_id":"advance(*args,**options)-instance-method","name":"advance","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr#L9","def":{"name":"advance","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@event_set.advance(*args, **options)"}},{"id":"advance(*args,**options,&)-instance-method","html_id":"advance(*args,**options,&amp;)-instance-method","name":"advance","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr#L9","def":{"name":"advance","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@event_set.advance(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"current_time:TimePoint-instance-method","html_id":"current_time:TimePoint-instance-method","name":"current_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr#L5","def":{"name":"current_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@event_set.current_time"}},{"id":"initialize_state(time:TimePoint):Duration-instance-method","html_id":"initialize_state(time:TimePoint):Duration-instance-method","name":"initialize_state","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr#L12","def":{"name":"initialize_state","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"(initialize_processor(time))[1]"}},{"id":"step(elapsed:Duration):Duration-instance-method","html_id":"step(elapsed:Duration):Duration-instance-method","name":"step","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/root.cr#L17","def":{"name":"step","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"collect_outputs(elapsed)\nperform_transitions(current_time, elapsed)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Scale","path":"Quartz/Scale.html","kind":"struct","full_name":"Quartz::Scale","name":"Scale","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/RomainFranceschini/quartz/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/scale.cr","line_number":5,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ATTO","name":"ATTO","value":"new(-6)","doc":null,"summary":null},{"id":"BASE","name":"BASE","value":"new(0)","doc":null,"summary":null},{"id":"EXA","name":"EXA","value":"new(6)","doc":null,"summary":null},{"id":"FACTOR","name":"FACTOR","value":"1000_i64","doc":"The base constant ß is a factor that separates one allowable time unit from\nthe next.","summary":"<p>The base constant ß is a factor that separates one allowable time unit from the next.</p>"},{"id":"FEMTO","name":"FEMTO","value":"new(-5)","doc":null,"summary":null},{"id":"GIGA","name":"GIGA","value":"new(3)","doc":null,"summary":null},{"id":"KILO","name":"KILO","value":"new(1)","doc":null,"summary":null},{"id":"MEGA","name":"MEGA","value":"new(2)","doc":null,"summary":null},{"id":"MICRO","name":"MICRO","value":"new(-2)","doc":null,"summary":null},{"id":"MILLI","name":"MILLI","value":"new(-1)","doc":null,"summary":null},{"id":"NANO","name":"NANO","value":"new(-3)","doc":null,"summary":null},{"id":"PETA","name":"PETA","value":"new(5)","doc":null,"summary":null},{"id":"PICO","name":"PICO","value":"new(-4)","doc":null,"summary":null},{"id":"TERA","name":"TERA","value":"new(4)","doc":null,"summary":null},{"id":"YOCTO","name":"YOCTO","value":"new(-8)","doc":null,"summary":null},{"id":"YOTTA","name":"YOTTA","value":"new(8)","doc":null,"summary":null},{"id":"ZEPTO","name":"ZEPTO","value":"new(-7)","doc":null,"summary":null},{"id":"ZETTA","name":"ZETTA","value":"new(7)","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"`Scale` is an approximation of the degree to which `Duration`s must\nbe altered to have an appreciable effect on the implications of a model or\nthe results of a simulation.","summary":"<p><code><a href=\"../Quartz/Scale.html\">Scale</a></code> is an approximation of the degree to which <code><a href=\"../Quartz/Duration.html\">Duration</a></code>s must be altered to have an appreciable effect on the implications of a model or the results of a simulation.</p>","class_methods":[],"constructors":[{"id":"new(scale:Int)-class-method","html_id":"new(scale:Int)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Int"}],"args_string":"(scale : Int)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L38","def":{"name":"new","args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(scale)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L34","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"+(other:Int):Scale-instance-method","html_id":"+(other:Int):Scale-instance-method","name":"+","doc":"Returns the result of adding `self` and *other*.","summary":"<p>Returns the result of adding <code>self</code> and <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"args_string":"(other : Int) : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L43","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"Scale.new(@level + other)"}},{"id":"-(other:Int):Scale-instance-method","html_id":"-(other:Int):Scale-instance-method","name":"-","doc":"Returns the result of subtracting `self` and *other*.","summary":"<p>Returns the result of subtracting <code>self</code> and <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"args_string":"(other : Int) : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L48","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"Scale.new(@level - other)"}},{"id":"-(other:Scale):Int32-instance-method","html_id":"-(other:Scale):Int32-instance-method","name":"-","doc":"Returns an integer which represent the distance between two given scales.","summary":"<p>Returns an integer which represent the distance between two given scales.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"args_string":"(other : Scale) : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L53","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(@level + (-other.level)).abs.to_i32"}},{"id":"-:Scale-instance-method","html_id":"-:Scale-instance-method","name":"-","doc":"Negates self.","summary":"<p>Negates self.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L63","def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"Scale.new(-@level)"}},{"id":"/(other:Scale):Float64-instance-method","html_id":"/(other:Scale):Float64-instance-method","name":"/","doc":"Returns the result of dividing `self` and *other*.","summary":"<p>Returns the result of dividing <code>self</code> and <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"args_string":"(other : Scale) : Float64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L58","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"FACTOR.to_f ** (@level.to_i - other.level)"}},{"id":"(other:Scale):Int32-instance-method","html_id":"(other:Scale):Int32-instance-method","name":"<=>","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"args_string":"(other : Scale) : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L67","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@level <=> other.level"}},{"id":"(other:Number):Int32-instance-method","html_id":"(other:Number):Int32-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greter than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : Int32","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L71","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@level <=> other"}},{"id":"level:Int8-instance-method","html_id":"level:Int8-instance-method","name":"level","doc":"The level of accuracy.","summary":"<p>The level of accuracy.</p>","abstract":false,"args":[],"args_string":" : Int8","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L32","def":{"name":"level","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int8","visibility":"Public","body":"@level"}},{"id":"to_f-instance-method","html_id":"to_f-instance-method","name":"to_f","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L83","def":{"name":"to_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_f64"}},{"id":"to_f32-instance-method","html_id":"to_f32-instance-method","name":"to_f32","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L75","def":{"name":"to_f32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"FACTOR.to_f32 ** @level"}},{"id":"to_f64-instance-method","html_id":"to_f64-instance-method","name":"to_f64","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/scale.cr#L79","def":{"name":"to_f64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"FACTOR.to_f64 ** @level"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","path":"Quartz/Schedulable.html","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/event_set.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coordinator","kind":"class","full_name":"Quartz::Coordinator","name":"Coordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Simulator","kind":"class","full_name":"Quartz::MultiComponent::Simulator","name":"Simulator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulator","kind":"class","full_name":"Quartz::Simulator","name":"Simulator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/TimeBase","kind":"class","full_name":"Quartz::TimeBase","name":"TimeBase"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `Schedulable` module is used as an interface for data types that may\nbe scheduled within an `EventSet`.","summary":"<p>The <code><a href=\"../Quartz/Schedulable.html\">Schedulable</a></code> module is used as an interface for data types that may be scheduled within an <code><a href=\"../Quartz/EventSet.html\">EventSet</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"imaginary_phase:Duration-instance-method","html_id":"imaginary_phase:Duration-instance-method","name":"imaginary_phase","doc":"The imaginary planned phase used to track elapsed times.","summary":"<p>The imaginary planned phase used to track elapsed times.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L11","def":{"name":"imaginary_phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@imaginary_phase"}},{"id":"imaginary_phase=(imaginary_phase:Duration)-instance-method","html_id":"imaginary_phase=(imaginary_phase:Duration)-instance-method","name":"imaginary_phase=","doc":"The imaginary planned phase used to track elapsed times.","summary":"<p>The imaginary planned phase used to track elapsed times.</p>","abstract":false,"args":[{"name":"imaginary_phase","doc":null,"default_value":"","external_name":"imaginary_phase","restriction":"Duration"}],"args_string":"(imaginary_phase : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L11","def":{"name":"imaginary_phase=","args":[{"name":"imaginary_phase","doc":null,"default_value":"","external_name":"imaginary_phase","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@imaginary_phase = imaginary_phase"}},{"id":"imaginary_precision:Scale-instance-method","html_id":"imaginary_precision:Scale-instance-method","name":"imaginary_precision","doc":"The original precision level at which the imaginary event was originally\nplanned.","summary":"<p>The original precision level at which the imaginary event was originally planned.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L14","def":{"name":"imaginary_precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@imaginary_precision"}},{"id":"imaginary_precision=(imaginary_precision:Scale)-instance-method","html_id":"imaginary_precision=(imaginary_precision:Scale)-instance-method","name":"imaginary_precision=","doc":"The original precision level at which the imaginary event was originally\nplanned.","summary":"<p>The original precision level at which the imaginary event was originally planned.</p>","abstract":false,"args":[{"name":"imaginary_precision","doc":null,"default_value":"","external_name":"imaginary_precision","restriction":"Scale"}],"args_string":"(imaginary_precision : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L14","def":{"name":"imaginary_precision=","args":[{"name":"imaginary_precision","doc":null,"default_value":"","external_name":"imaginary_precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@imaginary_precision = imaginary_precision"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L16","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(io)\nio << \" planned_phase=\"\nself.planned_phase.to_s(io)\nio << \" imag_phase=\"\nself.imaginary_phase.to_s(io)\nio << \">\"\n"}},{"id":"planned_phase:Duration-instance-method","html_id":"planned_phase:Duration-instance-method","name":"planned_phase","doc":"The planned phase, or the offset from the current epoch of the\nevent set, associated with the event.","summary":"<p>The planned phase, or the offset from the current epoch of the event set, associated with the event.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L7","def":{"name":"planned_phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@planned_phase"}},{"id":"planned_phase=(planned_phase:Duration)-instance-method","html_id":"planned_phase=(planned_phase:Duration)-instance-method","name":"planned_phase=","doc":"The planned phase, or the offset from the current epoch of the\nevent set, associated with the event.","summary":"<p>The planned phase, or the offset from the current epoch of the event set, associated with the event.</p>","abstract":false,"args":[{"name":"planned_phase","doc":null,"default_value":"","external_name":"planned_phase","restriction":"Duration"}],"args_string":"(planned_phase : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L7","def":{"name":"planned_phase=","args":[{"name":"planned_phase","doc":null,"default_value":"","external_name":"planned_phase","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@planned_phase = planned_phase"}},{"id":"planned_precision:Scale-instance-method","html_id":"planned_precision:Scale-instance-method","name":"planned_precision","doc":"The original precision level at which the event was originally planned.","summary":"<p>The original precision level at which the event was originally planned.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L9","def":{"name":"planned_precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@planned_precision"}},{"id":"planned_precision=(planned_precision:Scale)-instance-method","html_id":"planned_precision=(planned_precision:Scale)-instance-method","name":"planned_precision=","doc":"The original precision level at which the event was originally planned.","summary":"<p>The original precision level at which the event was originally planned.</p>","abstract":false,"args":[{"name":"planned_precision","doc":null,"default_value":"","external_name":"planned_precision","restriction":"Scale"}],"args_string":"(planned_precision : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/event_set.cr#L9","def":{"name":"planned_precision=","args":[{"name":"planned_precision","doc":null,"default_value":"","external_name":"planned_precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@planned_precision = planned_precision"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulable","path":"Quartz/Simulable.html","kind":"module","full_name":"Quartz::Simulable","name":"Simulable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/simulable.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/RootCoordinator","kind":"class","full_name":"Quartz::DSDE::RootCoordinator","name":"RootCoordinator"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/RootCoordinator","kind":"class","full_name":"Quartz::RootCoordinator","name":"RootCoordinator"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"advance(byelapsed:Duration)-instance-method","html_id":"advance(byelapsed:Duration)-instance-method","name":"advance","doc":null,"summary":null,"abstract":true,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"args_string":"(by elapsed : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr#L4","def":{"name":"advance","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"current_time:TimePoint-instance-method","html_id":"current_time:TimePoint-instance-method","name":"current_time","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr#L3","def":{"name":"current_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":""}},{"id":"initialize_state(time:TimePoint):Duration-instance-method","html_id":"initialize_state(time:TimePoint):Duration-instance-method","name":"initialize_state","doc":null,"summary":null,"abstract":true,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr#L5","def":{"name":"initialize_state","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}},{"id":"step(elapsed:Duration):Duration-instance-method","html_id":"step(elapsed:Duration):Duration-instance-method","name":"step","doc":null,"summary":null,"abstract":true,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulable.cr#L6","def":{"name":"step","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulation","path":"Quartz/Simulation.html","kind":"class","full_name":"Quartz::Simulation","name":"Simulation","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/simulation.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represent the interface to the simulation","summary":"<p>This class represent the interface to the simulation</p>","class_methods":[],"constructors":[{"id":"new(model:Model,*,scheduler:Symbol=:binary_heap,maintain_hierarchy:Bool=true,duration:Duration|TimePoint=Duration::INFINITY,run_validations:Bool=false,notifier:Hooks::Notifier=Hooks::Notifier.new)-class-method","html_id":"new(model:Model,*,scheduler:Symbol=:binary_heap,maintain_hierarchy:Bool=true,duration:Duration|TimePoint=Duration::INFINITY,run_validations:Bool=false,notifier:Hooks::Notifier=Hooks::Notifier.new)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scheduler","doc":null,"default_value":":binary_heap","external_name":"scheduler","restriction":"Symbol"},{"name":"maintain_hierarchy","doc":null,"default_value":"true","external_name":"maintain_hierarchy","restriction":"Bool"},{"name":"duration","doc":null,"default_value":"Duration::INFINITY","external_name":"duration","restriction":"Duration | TimePoint"},{"name":"run_validations","doc":null,"default_value":"false","external_name":"run_validations","restriction":"Bool"},{"name":"notifier","doc":null,"default_value":"Hooks::Notifier.new","external_name":"notifier","restriction":"Hooks::Notifier"}],"args_string":"(model : Model, *, scheduler : Symbol = <span class=\"n\">:binary_heap</span>, maintain_hierarchy : Bool = <span class=\"n\">true</span>, duration : Duration | TimePoint = <span class=\"t\">Duration</span><span class=\"t\">::</span><span class=\"t\">INFINITY</span>, run_validations : Bool = <span class=\"n\">false</span>, notifier : Hooks::Notifier = <span class=\"t\">Hooks</span><span class=\"t\">::</span><span class=\"t\">Notifier</span>.<span class=\"k\">new</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L37","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"scheduler","doc":null,"default_value":":binary_heap","external_name":"scheduler","restriction":"Symbol"},{"name":"maintain_hierarchy","doc":null,"default_value":"true","external_name":"maintain_hierarchy","restriction":"Bool"},{"name":"duration","doc":null,"default_value":"Duration::INFINITY","external_name":"duration","restriction":"Duration | TimePoint"},{"name":"run_validations","doc":null,"default_value":"false","external_name":"run_validations","restriction":"Bool"},{"name":"notifier","doc":null,"default_value":"Hooks::Notifier.new","external_name":"notifier","restriction":"Hooks::Notifier"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, scheduler: scheduler, maintain_hierarchy: maintain_hierarchy, duration: duration, run_validations: run_validations, notifier: notifier)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"abort-instance-method","html_id":"abort-instance-method","name":"abort","doc":"Abort the currently running or initialized simulation. Goes to an\naborted state.","summary":"<p>Abort the currently running or initialized simulation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L152","def":{"name":"abort","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if running? || initialized?\n  @notifier.notify(Hooks::PRE_ABORT)\n  Log.info do\n    \"Aborting simulation.\"\n  end\n  @final_time = Time.monotonic\n  @status = Status::Aborted\n  @notifier.notify(Hooks::POST_ABORT)\nend"}},{"id":"aborted?(*args,**options)-instance-method","html_id":"aborted?(*args,**options)-instance-method","name":"aborted?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L35","def":{"name":"aborted?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.aborted?(*args, **options)"}},{"id":"aborted?(*args,**options,&)-instance-method","html_id":"aborted?(*args,**options,&amp;)-instance-method","name":"aborted?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L35","def":{"name":"aborted?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.aborted?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"default_scheduler:Symbol-instance-method","html_id":"default_scheduler:Symbol-instance-method","name":"default_scheduler","doc":"Returns the default scheduler to use.","summary":"<p>Returns the default scheduler to use.</p>","abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L93","def":{"name":"default_scheduler","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@scheduler"}},{"id":"done?(*args,**options)-instance-method","html_id":"done?(*args,**options)-instance-method","name":"done?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L34","def":{"name":"done?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.done?(*args, **options)"}},{"id":"done?(*args,**options,&)-instance-method","html_id":"done?(*args,**options,&amp;)-instance-method","name":"done?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L34","def":{"name":"done?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.done?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"each(&)-instance-method","html_id":"each(&amp;)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L277","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"case @status\nwhen Status::Ready, Status::Initialized\n  if initialized?\n  else\n    initialize_simulation\n  end\n  begin_simulation\n  loop do\n    processor.advance(by: @time_next)\n    if @termination_condition.call(@virtual_time, @model)\n      break\n    end\n    Log.debug do\n      \"Tick at: #{virtual_time}, #{Time.monotonic - @start_time.not_nil!} secs elapsed.\"\n    end\n    @time_next = processor.step(@time_next)\n    if @time_next.infinite?\n      break\n    end\n    yield @time_next\n  end\n  end_simulation\nwhen Status::Running\n  Log.error do\n    \"Simulation already started at #{@start_time} and is currently running.\"\n  end\nwhen Status::Done, Status::Aborted\n  Log.error do\n    \"Simulation is terminated.\"\n  end\nend\nself\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Must return an `Iterator` over the elements in this collection.","summary":"<p>Must return an <code>Iterator</code> over the elements in this collection.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L273","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"StepIterator.new(self)"}},{"id":"elapsed_secs-instance-method","html_id":"elapsed_secs-instance-method","name":"elapsed_secs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L121","def":{"name":"elapsed_secs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @status\nwhen Status::Ready, Status::Initialized\n  0.0\nwhen Status::Done, Status::Aborted\n  @final_time.not_nil! - @start_time.not_nil!\nwhen Status::Running\n  Time.monotonic - @start_time.not_nil!\nend"}},{"id":"final_time:Time::Span?-instance-method","html_id":"final_time:Time::Span?-instance-method","name":"final_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L16","def":{"name":"final_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@final_time"}},{"id":"generate_graph(path=&quot;model_hierarchy.dot&quot;)-instance-method","html_id":"generate_graph(path=&amp;quot;model_hierarchy.dot&amp;quot;)-instance-method","name":"generate_graph","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"\"model_hierarchy.dot\"","external_name":"path","restriction":""}],"args_string":"(path = <span class=\"s\">&quot;model_hierarchy.dot&quot;</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L328","def":{"name":"generate_graph","args":[{"name":"path","doc":null,"default_value":"\"model_hierarchy.dot\"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (File.extname(path)).empty?\n  path = \"#{path}.dot\"\nend\nfile = File.new(path, \"w+\")\ngenerate_graph(file)\nfile.close\n"}},{"id":"generate_graph(io:IO)-instance-method","html_id":"generate_graph(io:IO)-instance-method","name":"generate_graph","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L335","def":{"name":"generate_graph","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(DotVisitor.new(@model, io)).to_graph"}},{"id":"initialize_simulation-instance-method","html_id":"initialize_simulation-instance-method","name":"initialize_simulation","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L206","def":{"name":"initialize_simulation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ready?\n  begin_simulation\n  @notifier.notify(Hooks::PRE_INIT)\n  Quartz.timing(\"Simulation initialization\") do\n    @time_next = processor.initialize_state(@virtual_time)\n  end\n  @status = Status::Initialized\n  @notifier.notify(Hooks::POST_INIT)\nelse\n  Log.info do\n    \"Cannot initialize simulation while it is running or terminated.\"\n  end\nend"}},{"id":"initialized?(*args,**options)-instance-method","html_id":"initialized?(*args,**options)-instance-method","name":"initialized?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L32","def":{"name":"initialized?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.initialized?(*args, **options)"}},{"id":"initialized?(*args,**options,&)-instance-method","html_id":"initialized?(*args,**options,&amp;)-instance-method","name":"initialized?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L32","def":{"name":"initialized?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.initialized?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L86","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((io << \"<\") << self.class.name) << \": status=\") << (status.to_s(io))\n(io << \", time=\") << (virtual_time.to_s(io))\nnil\n"}},{"id":"model:Quartz::CoupledModel-instance-method","html_id":"model:Quartz::CoupledModel-instance-method","name":"model","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quartz::CoupledModel","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L16","def":{"name":"model","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@model"}},{"id":"notifier:Hooks::Notifier-instance-method","html_id":"notifier:Hooks::Notifier-instance-method","name":"notifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hooks::Notifier","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L19","def":{"name":"notifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hooks::Notifier","visibility":"Public","body":"@notifier"}},{"id":"percentage-instance-method","html_id":"percentage-instance-method","name":"percentage","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L102","def":{"name":"percentage","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @status\nwhen Status::Ready, Status::Initialized\n  0.0 * 100\nwhen Status::Done\n  1.0 * 100\nwhen Status::Running, Status::Aborted\n  if final = @final_vtime\n    if virtual_time > final\n      1.0 * 100\n    else\n      ((virtual_time.to_i64 - final) / (Duration.new(final.to_i64, final.precision))) * 100\n    end\n  else\n    Float::NAN\n  end\nend"}},{"id":"ready?(*args,**options,&)-instance-method","html_id":"ready?(*args,**options,&amp;)-instance-method","name":"ready?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L31","def":{"name":"ready?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.ready?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"ready?(*args,**options)-instance-method","html_id":"ready?(*args,**options)-instance-method","name":"ready?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L31","def":{"name":"ready?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.ready?(*args, **options)"}},{"id":"restart-instance-method","html_id":"restart-instance-method","name":"restart","doc":"Restart a terminated simulation (either done or aborted) and goes to a\nready state.","summary":"<p>Restart a terminated simulation (either done or aborted) and goes to a ready state.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L164","def":{"name":"restart","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @status\nwhen Status::Done, Status::Aborted\n  @notifier.notify(Hooks::PRE_RESTART)\n  @start_time = nil\n  @final_time = nil\n  @virtual_time = TimePoint.new\n  @status = Status::Ready\n  @notifier.notify(Hooks::POST_RESTART)\nwhen Status::Running, Status::Initialized\n  Log.info do\n    \"Cannot restart, the simulation is currently running.\"\n  end\nwhen Status::Ready\nend"}},{"id":"run_validations?:Bool-instance-method","html_id":"run_validations?:Bool-instance-method","name":"run_validations?","doc":"Whether `Quartz::Validations` will be run during simulation.","summary":"<p>Whether <code>Quartz::Validations</code> will be run during simulation.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L98","def":{"name":"run_validations?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@run_validations"}},{"id":"running?(*args,**options,&)-instance-method","html_id":"running?(*args,**options,&amp;)-instance-method","name":"running?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L33","def":{"name":"running?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.running?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"running?(*args,**options)-instance-method","html_id":"running?(*args,**options)-instance-method","name":"running?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L33","def":{"name":"running?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@status.running?(*args, **options)"}},{"id":"simulate-instance-method","html_id":"simulate-instance-method","name":"simulate","doc":"TODO error hook","summary":"<p><span class=\"flag orange\">TODO</span>  error hook</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L247","def":{"name":"simulate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @status\nwhen Status::Ready, Status::Initialized\n  if initialized?\n  else\n    initialize_simulation\n  end\n  begin_simulation\n  loop do\n    processor.advance(by: @time_next)\n    if @termination_condition.call(@virtual_time, @model)\n      break\n    end\n    Log.debug do\n      \"Tick at: #{virtual_time}, #{Time.monotonic - @start_time.not_nil!} secs elapsed.\"\n    end\n    @time_next = processor.step(@time_next)\n    if @time_next.infinite?\n      break\n    end\n  end\n  end_simulation\nwhen Status::Running\n  Log.error do\n    \"Simulation already started at #{@start_time} and is currently running.\"\n  end\nwhen Status::Done, Status::Aborted\n  Log.error do\n    \"Simulation is terminated.\"\n  end\nend\nself\n"}},{"id":"start_time:Time::Span?-instance-method","html_id":"start_time:Time::Span?-instance-method","name":"start_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L16","def":{"name":"start_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@start_time"}},{"id":"status:Status-instance-method","html_id":"status:Status-instance-method","name":"status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Status","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L17","def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Status","visibility":"Public","body":"@status"}},{"id":"step:Duration?-instance-method","html_id":"step:Duration?-instance-method","name":"step","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L220","def":{"name":"step","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration | ::Nil","visibility":"Public","body":"case @status\nwhen Status::Ready\n  initialize_simulation\n  @time_next\nwhen Status::Initialized, Status::Running\n  processor.advance(by: @time_next)\n  if @termination_condition.call(@virtual_time, @model)\n    end_simulation\n    return nil\n  end\n  Log.debug do\n    \"Tick at #{virtual_time}, #{Time.monotonic - @start_time.not_nil!} secs elapsed.\"\n  end\n  @time_next = processor.step(@time_next)\n  if @time_next.infinite?\n    end_simulation\n  end\n  @time_next\nelse\n  nil\nend"}},{"id":"termination_condition(&block:TimePoint,CoupledModel->Bool)-instance-method","html_id":"termination_condition(&amp;block:TimePoint,CoupledModel-&gt;Bool)-instance-method","name":"termination_condition","doc":"Set the termination condition","summary":"<p>Set the termination condition</p>","abstract":false,"args":[],"args_string":"(&block : TimePoint, CoupledModel -> Bool)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L71","def":{"name":"termination_condition","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(TimePoint, CoupledModel -> Bool)"},"return_type":"","visibility":"Public","body":"@termination_condition = block"}},{"id":"transition_stats-instance-method","html_id":"transition_stats-instance-method","name":"transition_stats","doc":"Returns the number of transitions per model along with the total","summary":"<p>Returns the number of transitions per model along with the total</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L133","def":{"name":"transition_stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"stats = {} of Name => Hash(Symbol, UInt32)\nhierarchy = self.processor.children.dup\nhierarchy.each do |child|\n  if child.is_a?(Coordinator)\n    coordinator = child.as(Coordinator)\n    hierarchy.concat(coordinator.children)\n  else\n    if child.responds_to?(:transition_stats)\n      stats[child.model.name] = child.transition_stats.to_h\n    end\n  end\nend\ntotal = Hash(Symbol, UInt32).new do\n  0_u32\nend\nstats.values.each do |h|\n  h.each do |k, v|\n    __temp_28 = k\n    total[__temp_28] = total[__temp_28] + v\n  end\nend\nstats[:TOTAL] = total\nstats\n"}},{"id":"virtual_time:TimePoint-instance-method","html_id":"virtual_time:TimePoint-instance-method","name":"virtual_time","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L18","def":{"name":"virtual_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@virtual_time"}}],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulation/Status","path":"Quartz/Simulation/Status.html","kind":"enum","full_name":"Quartz::Simulation::Status","name":"Status","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/simulation.cr","line_number":8,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Ready","name":"Ready","value":"0","doc":null,"summary":null},{"id":"Initialized","name":"Initialized","value":"1","doc":null,"summary":null},{"id":"Running","name":"Running","value":"2","doc":null,"summary":null},{"id":"Done","name":"Done","value":"3","doc":null,"summary":null},{"id":"Aborted","name":"Aborted","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulation","kind":"class","full_name":"Quartz::Simulation","name":"Simulation"},"doc":"Represents the current simulation status.","summary":"<p>Represents the current simulation status.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"aborted?-instance-method","html_id":"aborted?-instance-method","name":"aborted?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L13","def":{"name":"aborted?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Aborted"}},{"id":"done?-instance-method","html_id":"done?-instance-method","name":"done?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L12","def":{"name":"done?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Done"}},{"id":"initialized?-instance-method","html_id":"initialized?-instance-method","name":"initialized?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L10","def":{"name":"initialized?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Initialized"}},{"id":"ready?-instance-method","html_id":"ready?-instance-method","name":"ready?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L9","def":{"name":"ready?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Ready"}},{"id":"running?-instance-method","html_id":"running?-instance-method","name":"running?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L11","def":{"name":"running?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Running"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulation/StepIterator","path":"Quartz/Simulation/StepIterator.html","kind":"class","full_name":"Quartz::Simulation::StepIterator","name":"StepIterator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/simulation.cr","line_number":304,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulation","kind":"class","full_name":"Quartz::Simulation","name":"Simulation"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(simulation:Simulation)-class-method","html_id":"new(simulation:Simulation)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"args_string":"(simulation : Simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L307","def":{"name":"new","args":[{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L310","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @simulation.status\nwhen Simulation::Status::Done, Simulation::Status::Aborted\n  stop\nwhen Simulation::Status::Ready\n  @simulation.initialize_simulation\nwhen Simulation::Status::Initialized, Simulation::Status::Running\n  @simulation.step.not_nil!\nend"}},{"id":"rewind-instance-method","html_id":"rewind-instance-method","name":"rewind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulation.cr#L321","def":{"name":"rewind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @simulation.running?\n  @simulation.abort\nend\n@simulation.restart\nself\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Simulator","path":"Quartz/Simulator.html","kind":"class","full_name":"Quartz::Simulator","name":"Simulator","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Processor","kind":"class","full_name":"Quartz::Processor","name":"Processor"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/simulator.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class defines a PDEVS simulator.","summary":"<p>This class defines a PDEVS simulator.</p>","class_methods":[],"constructors":[{"id":"new(model:Model,simulation:Simulation)-class-method","html_id":"new(model:Model,simulation:Simulation)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"args_string":"(model : Model, simulation : Simulation)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr#L11","def":{"name":"new","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Model"},{"name":"simulation","doc":null,"default_value":"","external_name":"simulation","restriction":"Simulation"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(model, simulation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","html_id":"collect_outputs(elapsed:Duration):Hash(OutputPort,Array(Any))-instance-method","name":"collect_outputs","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(elapsed : Duration) : Hash(OutputPort, Array(Any))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr#L78","def":{"name":"collect_outputs","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(OutputPort, Array(Any))","visibility":"Public","body":"(@model.as(AtomicModel)).fetch_output!"}},{"id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","html_id":"initialize_processor(time:TimePoint):::Tuple(Duration,Duration)-instance-method","name":"initialize_processor","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"args_string":"(time : TimePoint) : ::Tuple(Duration, Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr#L34","def":{"name":"initialize_processor","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Duration, Duration)","visibility":"Public","body":"begin\n  atomic = @model.as(AtomicModel)\n  @int_count = @ext_count = @con_count = 0_u32\n  atomic.__initialize_state__(self)\n  elapsed = atomic.elapsed\n  planned_duration = fixed_planned_duration(atomic.time_advance.as(Duration), atomic.class.precision_level)\n  if @run_validations && (atomic.invalid?(:initialization))\n    Log.error do\n      String.build do |str|\n        (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n        ((str << \" (context: 'init', time: \") << time) << \"). \"\n        (str << \"Errors: \") << atomic.errors.full_messages\n      end\n    end\n  end\n  Log.debug do\n    String.build do |str|\n      ((str << '\\'') << atomic.name) << \"' initialized (\"\n      ((((str << \"elapsed: \") << elapsed) << \", time_next: \") << planned_duration) << ')'\n    end\n  end\n  if atomic.count_observers > 0\n    atomic.notify_observers(OBS_INFO_INIT_TRANSITION.merge({:time => time}))\n  end\n  {elapsed.fixed, planned_duration}\nrescue err : StrictVerificationFailed\n  atomic = @model.as(AtomicModel)\n  Log.fatal do\n    String.build do |str|\n      (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n      ((str << \" (context: 'init', time: \") << time) << \"). \"\n      (str << \"Errors: \") << atomic.errors.full_messages\n    end\n  end\n  raise(err)\nend"}},{"id":"perform_transitions(time:TimePoint,elapsed:Duration,imminent:Bool=false):Duration-instance-method","html_id":"perform_transitions(time:TimePoint,elapsed:Duration,imminent:Bool=false):Duration-instance-method","name":"perform_transitions","doc":null,"summary":null,"abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"},{"name":"imminent","doc":null,"default_value":"false","external_name":"imminent","restriction":"Bool"}],"args_string":"(time : TimePoint, elapsed : Duration, imminent : Bool = <span class=\"n\">false</span>) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr#L82","def":{"name":"perform_transitions","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"TimePoint"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"},{"name":"imminent","doc":null,"default_value":"false","external_name":"imminent","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"begin\n  atomic = @model.as(AtomicModel)\n  bag = @bag || EMPTY_BAG\n  info = nil\n  kind = nil\n  atomic.elapsed = elapsed\n  if imminent\n    if bag.empty?\n      @int_count = @int_count + 1_u32\n      atomic.internal_transition\n      info = OBS_INFO_INT_TRANSITION\n      kind = :internal\n    else\n      @con_count = @con_count + 1_u32\n      atomic.confluent_transition(bag)\n      info = OBS_INFO_CON_TRANSITION\n      kind = :confluent\n    end\n  else\n    if (!imminent) && (!bag.empty?)\n      @ext_count = @ext_count + 1_u32\n      atomic.external_transition(bag)\n      info = OBS_INFO_EXT_TRANSITION\n      kind = :external\n    else\n      raise(BadSynchronisationError.new(\"#{model.name} is unsynced (elapsed:#{elapsed}, bag size:#{bag.size}, time:#{time}).\"))\n    end\n  end\n  bag.clear\n  planned_duration = fixed_planned_duration(atomic.time_advance.as(Duration), atomic.class.precision_level)\n  Log.debug do\n    String.build do |str|\n      ((((str << '\\'') << atomic.name) << \"': \") << kind) << \" transition \"\n      ((((str << \"(elapsed: \") << elapsed) << \", time_next: \") << planned_duration) << ')'\n    end\n  end\n  if @run_validations && (atomic.invalid?(kind))\n    Log.error do\n      String.build do |str|\n        (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n        ((str << \" (context: '\") << kind) << \"').\"\n        (str << \"Errors: \") << atomic.errors.full_messages\n      end\n    end\n  end\n  if atomic.count_observers > 0\n    atomic.notify_observers(info.merge({:time => time, :elapsed => elapsed}))\n  end\n  planned_duration\nrescue err : StrictVerificationFailed\n  atomic = @model.as(AtomicModel)\n  Log.fatal do\n    String.build do |str|\n      (((str << '\\'') << atomic.name) << \"' is \") << \"invalid\".colorize.underline\n      ((str << \" (context: '\") << kind) << \"').\"\n      (str << \"Errors: \") << atomic.errors.full_messages\n    end\n  end\n  raise(err)\nend"}},{"id":"transition_stats-instance-method","html_id":"transition_stats-instance-method","name":"transition_stats","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/simulator.cr#L16","def":{"name":"transition_stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{internal: @int_count, external: @ext_count, confluent: @con_count}"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/State","path":"Quartz/State.html","kind":"class","full_name":"Quartz::State","name":"State","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/state.cr","line_number":6,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DSDE/Executive/State","kind":"class","full_name":"Quartz::DSDE::Executive::State","name":"State"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"A base class that wraps the state of a model. Automatically extended by\nmodels through use of the `state` macro.\n\nSee `Stateful#state`.","summary":"<p>A base class that wraps the state of a model.</p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L49","def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L79","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% for ivar in @type.instance_vars %}\n        return false unless @{{ ivar.id }} == other.{{ ivar.id }}\n      {% end %}\ntrue\n"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L86","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L77","def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"clone = ({{ @type }}).allocate\nclone.initialize_copy(self)\nif clone.responds_to?(:finalize)\n  GC.add_finalizer(clone)\nend\nclone\n"}},{"id":"hash(hasher)-instance-method","html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"args_string":"(hasher)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L90","def":{"name":"hash","args":[{"name":"hasher","doc":null,"default_value":"","external_name":"hasher","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% for ivar in @type.instance_vars %}\n        hasher = @{{ ivar.id }}.hash(hasher)\n      {% end %}\nhasher\n"}},{"id":"inspect(io)-instance-method","html_id":"inspect(io)-instance-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L97","def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((io << \"<\") << self.class.name) << \": \"\n{% for ivar in @type.instance_vars %}\n        io << {{ ivar.id.stringify }} << '='\n        io << @{{ ivar.id }}.inspect(io)\n        {% if ivar.id != @type.instance_vars.last.id %}\n          io << \", \"\n        {% end %}\n      {% end %}\nio << \">\"\n"}},{"id":"to_hash-instance-method","html_id":"to_hash-instance-method","name":"to_hash","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L67","def":{"name":"to_hash","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        {\n          {% for ivar in @type.instance_vars %}\n            :{{ ivar.id }} => @{{ ivar.id }},\n          {% end %}\n        }\n      {% end %}"}},{"id":"to_named_tuple-instance-method","html_id":"to_named_tuple-instance-method","name":"to_named_tuple","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L57","def":{"name":"to_named_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        NamedTuple.new(\n          {% for ivar in @type.instance_vars %}\n            {{ ivar.id }}: @{{ ivar.id }},\n          {% end %}\n        )\n      {% end %}"}}],"macros":[{"id":"var(name,&block)-macro","html_id":"var(name,&amp;block)-macro","name":"var","doc":"The `var` macro defines a state variable for the `State` of a model. Its\nprimary goal is to generate convenient getters and setters for the model\namong other purposes.\n\nIt is intended to be used within a block provided with the `Stateful#state`\nmacro.\n\nSee also `Stateful#state`.\n\n### Usage\n\n`var` must receive a type declaration which will be used to declare an instance\nvariable, a getter and a setter.\n\nDefault values *must* be declared using the type declaration notation or through\na block (lazy initialization) :\n\n```\nstate do\n  var foo : Int32 = 42\n  var bar : Int32 { (rand * 100 + 1).to_i32 }\n  var quz : Int32 { foo * 42 }\nend\n```\n\nNote from previous example that the initialization block of `quz` is\nallowed to reference the value of another state variable.","summary":"<p>The <code><a href=\"../Quartz/State.html#var(name,&block)-macro\">var</a></code> macro defines a state variable for the <code><a href=\"../Quartz/State.html\">State</a></code> of a model.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name, &block)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L34","def":{"name":"var","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% prop = if name.is_a?(TypeDeclaration)\n  {name: name.var, type: name.type, value: name.value, block: block}\nelse\n  if name.is_a?(Assign)\n    {name: name.target, value: name.value, block: block}\n  else\n    name.raise(\"a type, a default value or a block should be given to declare a state variable\")\n  end\nend\nSTATE_VARS << prop\n %}\n\n\n      property \n{{ name }}\n \n{% if block %} {{ block }} {% end %}\n\n    \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Stateful","path":"Quartz/Stateful.html","kind":"module","full_name":"Quartz::Stateful","name":"Stateful","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/state.cr","line_number":110,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"STATE_CHECKS","name":"STATE_CHECKS","value":"{state_complete: false}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"initial_state-instance-method","html_id":"initial_state-instance-method","name":"initial_state","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L180","def":{"name":"initial_state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@initial_state || Quartz::State.new)"}},{"id":"initial_state=(state:Quartz::State)-instance-method","html_id":"initial_state=(state:Quartz::State)-instance-method","name":"initial_state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"args_string":"(state : Quartz::State)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L176","def":{"name":"initial_state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@initial_state = state"}},{"id":"state-instance-method","html_id":"state-instance-method","name":"state","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L168","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state"}},{"id":"state=(state:Quartz::State)-instance-method","html_id":"state=(state:Quartz::State)-instance-method","name":"state=","doc":null,"summary":null,"abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"args_string":"(state : Quartz::State)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L172","def":{"name":"state=","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Quartz::State"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@state = state"}}],"macros":[{"id":"def_properties-macro","html_id":"def_properties-macro","name":"def_properties","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L184","def":{"name":"def_properties","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% for ivar in (@type.constant(:State)).constant(:STATE_VARS) %}\n        def {{ ivar[:name] }}\n          state.{{ ivar[:name] }}\n        end\n\n        def {{ ivar[:name] }}=({{ ivar[:name] }})\n          state.{{ ivar[:name] }} = {{ ivar[:name] }}\n        end\n      {% end %}\n\n\n      @state = State.new\n\n      def state\n        @state.as(State)\n      \nend\n\n      protected def initial_state\n        (@initial_state || State.new).as(State)\n      \nend\n\n      def initial_state=(state : State)\n        @initial_state = state\n      \nend\n\n      def initial_state=(state : Quartz::State)\n        raise InvalidStateError.new(\"#{self} expects an initial state of type \" \\\n                                    \"#{self.class}::State, not #{state.class}\")\n      \nend\n\n      def state=(state : State)\n        @state = state\n      \nend\n\n      def state=(state : Quartz::State)\n        raise InvalidStateError.new(\"#{self} expects a state of type \" \\\n                                    \"#{self.class}::State, not #{state.class}\")\n      \nend\n    \n"}},{"id":"def_serialization-macro","html_id":"def_serialization-macro","name":"def_serialization","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L162","def":{"name":"def_serialization","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    "}},{"id":"reset_state_checks-macro","html_id":"reset_state_checks-macro","name":"reset_state_checks","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L120","def":{"name":"reset_state_checks","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      STATE_CHECKS = \n{state_complete: false}\n    \n"}},{"id":"state(&block)-macro","html_id":"state(&amp;block)-macro","name":"state","doc":"The `state` macro defines a `State` subclass for the current `Model`\nand expects a block to be passed.\n\nThe given block is inserted inside the definition of the `State` subclass.\n\nSee also `State#var`.\n\n### Example\n\n```\nclass MyModel < AtomicModel\n  state do\n    var x : Int32 = 0\n    var y : Int32 = 0\n  end\nend\n```","summary":"<p>The <code><a href=\"../Quartz/Stateful.html#state-instance-method\">#state</a></code> macro defines a <code><a href=\"../Quartz/State.html\">State</a></code> subclass for the current <code><a href=\"../Quartz/Model.html\">Model</a></code> and expects a block to be passed.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/state.cr#L141","def":{"name":"state","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% if STATE_CHECKS[:state_complete] %}\n        {% @type.raise(\"#{@type}::State have already been defined. Make sure to call the 'state' macro once for each model.\") %}\n      {% end %}\n\n\n      \n{% ancestor = if @type.superclass.has_constant?(:State)\n  @type.superclass.name\nelse\n  \"Quartz\".id\nend %}\n\n\n      class State < \n{{ ancestor }}\n::State\n        STATE_VARS = [] of Nil\n        \n{{ yield }}\n\n      \nend\n\n      def_properties\n      def_serialization\n      \n{% STATE_CHECKS[:state_complete] = true %}\n\n    \n"}}],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/StrictVerificationFailed","path":"Quartz/StrictVerificationFailed.html","kind":"class","full_name":"Quartz::StrictVerificationFailed","name":"StrictVerificationFailed","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":22,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(verification_errors)-class-method","html_id":"new(verification_errors)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"verification_errors","doc":null,"default_value":"","external_name":"verification_errors","restriction":""}],"args_string":"(verification_errors)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L25","def":{"name":"new","args":[{"name":"verification_errors","doc":null,"default_value":"","external_name":"verification_errors","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(verification_errors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L28","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"String.build do |str|\n  @verification_errors.each do |attribute, message|\n    ((((str << '\\'') << attribute) << \"' \") << message) << '\\n'\n  end\nend"}},{"id":"verification_errors:VerificationErrors-instance-method","html_id":"verification_errors:VerificationErrors-instance-method","name":"verification_errors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : VerificationErrors","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L23","def":{"name":"verification_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"VerificationErrors","visibility":"Public","body":"@verification_errors"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/TimeBase","path":"Quartz/TimeBase.html","kind":"class","full_name":"Quartz::TimeBase","name":"TimeBase","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/dtss/time_base.cr","line_number":5,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/time_base.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Schedulable","kind":"module","full_name":"Quartz::Schedulable","name":"Schedulable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This class represent a discrete time base that conforms to `Schedulable`.\nIt it used internally to schedule `DTSS::Simulator`s sharing the same time\nbase in an `EventSet`.","summary":"<p>This class represent a discrete time base that conforms to <code><a href=\"../Quartz/Schedulable.html\">Schedulable</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(time_next:Duration)-class-method","html_id":"new(time_next:Duration)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"time_next","doc":null,"default_value":"","external_name":"time_next","restriction":"Duration"}],"args_string":"(time_next : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/time_base.cr#L11","def":{"name":"new","args":[{"name":"time_next","doc":null,"default_value":"","external_name":"time_next","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(time_next)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"processors:Array(DTSS::Simulator)-instance-method","html_id":"processors:Array(DTSS::Simulator)-instance-method","name":"processors","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(DTSS::Simulator)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/time_base.cr#L9","def":{"name":"processors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(DTSS::Simulator)","visibility":"Public","body":"@processors"}},{"id":"time_next:Duration-instance-method","html_id":"time_next:Duration-instance-method","name":"time_next","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/dtss/time_base.cr#L8","def":{"name":"time_next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@time_next"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/TimeCache","path":"Quartz/TimeCache.html","kind":"class","full_name":"Quartz::TimeCache","name":"TimeCache","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/time_cache.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `TimeCache` data structure is used to store and retrieve elapsed\ndurations since a particular event.","summary":"<p>The <code><a href=\"../Quartz/TimeCache.html\">TimeCache</a></code> data structure is used to store and retrieve elapsed durations since a particular event.</p>","class_methods":[],"constructors":[{"id":"new(current_time:TimePoint=TimePoint.new(0))-class-method","html_id":"new(current_time:TimePoint=TimePoint.new(0))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"current_time","doc":null,"default_value":"TimePoint.new(0)","external_name":"current_time","restriction":"TimePoint"}],"args_string":"(current_time : TimePoint = <span class=\"t\">TimePoint</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L8","def":{"name":"new","args":[{"name":"current_time","doc":null,"default_value":"TimePoint.new(0)","external_name":"current_time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(current_time)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"advance(byduration:Duration):TimePoint-instance-method","html_id":"advance(byduration:Duration):TimePoint-instance-method","name":"advance","doc":"Advance the current time by the given `Duration` relative to the current\ntime.","summary":"<p>Advance the current time by the given <code><a href=\"../Quartz/Duration.html\">Duration</a></code> relative to the current time.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"args_string":"(by duration : Duration) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L53","def":{"name":"advance","args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@current_time.advance(duration)"}},{"id":"advance(untiltime_point:TimePoint):TimePoint-instance-method","html_id":"advance(untiltime_point:TimePoint):TimePoint-instance-method","name":"advance","doc":"Advance the current time until match the given `TimePoint`.","summary":"<p>Advance the current time until match the given <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code>.</p>","abstract":false,"args":[{"name":"time_point","doc":null,"default_value":"","external_name":"until","restriction":"TimePoint"}],"args_string":"(until time_point : TimePoint) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L58","def":{"name":"advance","args":[{"name":"time_point","doc":null,"default_value":"","external_name":"until","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"while @current_time != time_point\n  advance(by: time_point.gap(@current_time))\nend\n@current_time\n"}},{"id":"current_time:TimePoint-instance-method","html_id":"current_time:TimePoint-instance-method","name":"current_time","doc":"Returns the current time associated with the time cache.","summary":"<p>Returns the current time associated with the time cache.</p>","abstract":false,"args":[],"args_string":" : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L6","def":{"name":"current_time","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"@current_time"}},{"id":"current_time=(current_time:TimePoint)-instance-method","html_id":"current_time=(current_time:TimePoint)-instance-method","name":"current_time=","doc":"Returns the current time associated with the time cache.","summary":"<p>Returns the current time associated with the time cache.</p>","abstract":false,"args":[{"name":"current_time","doc":null,"default_value":"","external_name":"current_time","restriction":"TimePoint"}],"args_string":"(current_time : TimePoint)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L6","def":{"name":"current_time=","args":[{"name":"current_time","doc":null,"default_value":"","external_name":"current_time","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@current_time = current_time"}},{"id":"elapsed_duration_of(event:Schedulable):Duration-instance-method","html_id":"elapsed_duration_of(event:Schedulable):Duration-instance-method","name":"elapsed_duration_of","doc":"Returns the elapsed `Duration` associated with the given *event* since the\nprevious event.","summary":"<p>Returns the elapsed <code><a href=\"../Quartz/Duration.html\">Duration</a></code> associated with the given <em>event</em> since the previous event.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"args_string":"(event : Schedulable) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L31","def":{"name":"elapsed_duration_of","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"id = @current_time.duration_from_phase(event.imaginary_phase)\nid = rescaled_duration(id, event.imaginary_precision)\nDuration.new(Duration::MULTIPLIER_MAX - id.multiplier, id.precision)\n"}},{"id":"release_event(event:Schedulable)-instance-method","html_id":"release_event(event:Schedulable)-instance-method","name":"release_event","doc":"Cancel the tracking of the elapsed duration since the previous event of\nthe given *event*.","summary":"<p>Cancel the tracking of the elapsed duration since the previous event of the given <em>event</em>.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"args_string":"(event : Schedulable)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L47","def":{"name":"release_event","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"event.imaginary_phase = Duration::INFINITY"}},{"id":"retain_event(event:Schedulable,precision:Scale)-instance-method","html_id":"retain_event(event:Schedulable,precision:Scale)-instance-method","name":"retain_event","doc":"Retain the given *event* in order to track the elapsed duration since the\n`#current_time` as time advances.","summary":"<p>Retain the given <em>event</em> in order to track the elapsed duration since the <code><a href=\"../Quartz/TimeCache.html#current_time:TimePoint-instance-method\">#current_time</a></code> as time advances.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(event : Schedulable, precision : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L13","def":{"name":"retain_event","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"imaginary_duration = Duration.new(Duration::MULTIPLIER_MAX, precision)\nplanned_phase = @current_time.phase_from_duration(imaginary_duration)\nevent.imaginary_precision = precision\nevent.imaginary_phase = planned_phase\n"}},{"id":"retain_event(event:Schedulable,elapsed:Duration)-instance-method","html_id":"retain_event(event:Schedulable,elapsed:Duration)-instance-method","name":"retain_event","doc":"Retain the given *event* with a given *elapsed* duration since the\n`#current_time`, in order to track it as time advances.","summary":"<p>Retain the given <em>event</em> with a given <em>elapsed</em> duration since the <code><a href=\"../Quartz/TimeCache.html#current_time:TimePoint-instance-method\">#current_time</a></code>, in order to track it as time advances.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"args_string":"(event : Schedulable, elapsed : Duration)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_cache.cr#L22","def":{"name":"retain_event","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Schedulable"},{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"imaginary_duration = Duration.new(Duration::MULTIPLIER_MAX - elapsed.multiplier, elapsed.precision)\nplanned_phase = @current_time.phase_from_duration(imaginary_duration)\nevent.imaginary_precision = elapsed.precision\nevent.imaginary_phase = planned_phase\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/TimePoint","path":"Quartz/TimePoint.html","kind":"class","full_name":"Quartz::TimePoint","name":"TimePoint","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/time_point.cr","line_number":18,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `TimePoint` data type represents points in simulated time, and is\nintended to be used internally.\n\nIts main purpose is to describe event times as offsets from a common\nreference point. It may be perturbed by a `Duration` value.\n\nIt is implemented as an arbitrary-precision integer, and provides only\nrelevant methods.\n\nThe modeller should only manipulate `Duration` values.\n\n**TODO**:\n  - handle sign.\n  - one zero representation.\n  - make immutable\n  - transform mod operations by bit masking (e.g.  (n & (BASE-1)))","summary":"<p>The <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> data type represents points in simulated time, and is intended to be used internally.</p>","class_methods":[],"constructors":[{"id":"new(n:Int=0,precision:Scale=Scale::BASE)-class-method","html_id":"new(n:Int=0,precision:Scale=Scale::BASE)-class-method","name":"new","doc":"Creates a new `TimePoint` value, initialized at the given *precision* from\nthe given integer *n*, which may or not be zero.","summary":"<p>Creates a new <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> value, initialized at the given <em>precision</em> from the given integer <em>n</em>, which may or not be zero.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"0","external_name":"n","restriction":"Int"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"}],"args_string":"(n : Int = <span class=\"n\">0</span>, precision : Scale = <span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">BASE</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L35","def":{"name":"new","args":[{"name":"n","doc":null,"default_value":"0","external_name":"n","restriction":"Int"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(n, precision)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(magnitude:Array(Int16),precision:Scale)-class-method","html_id":"new(magnitude:Array(Int16),precision:Scale)-class-method","name":"new","doc":"Creates a new `TimePoint`, whose value depends on the given *magnitude,\ninitialized at the given *precision*.\n\nThe *magnitude* must be ordered and organized from the least-significant\nnumber to the least-signifiant number.","summary":"<p>Creates a new <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code>, whose value depends on the given *magnitude, initialized at the given <em>precision</em>.</p>","abstract":false,"args":[{"name":"magnitude","doc":null,"default_value":"","external_name":"magnitude","restriction":"Array(Int16)"},{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(magnitude : Array(Int16), precision : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L61","def":{"name":"new","args":[{"name":"magnitude","doc":null,"default_value":"","external_name":"magnitude","restriction":"Array(Int16)"},{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(magnitude, precision)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(*numbers:Int,precision:Scale=Scale::BASE)-class-method","html_id":"new(*numbers:Int,precision:Scale=Scale::BASE)-class-method","name":"new","doc":"Creates a new `TimePoint`, whose value is given by *numbers*, initialized at\nthe given *precision*.\n\nThe *numbers* must be ordered and organized from the most-significant number\nto the least-significant number.","summary":"<p>Creates a new <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code>, whose value is given by <em>numbers</em>, initialized at the given <em>precision</em>.</p>","abstract":false,"args":[{"name":"numbers","doc":null,"default_value":"","external_name":"numbers","restriction":"Int"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"}],"args_string":"(*numbers : Int, precision : Scale = <span class=\"t\">Scale</span><span class=\"t\">::</span><span class=\"t\">BASE</span>)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L52","def":{"name":"new","args":[{"name":"numbers","doc":null,"default_value":"","external_name":"numbers","restriction":"Int"},{"name":"precision","doc":null,"default_value":"Scale::BASE","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*numbers, precision: precision)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"+(duration:Duration):TimePoint-instance-method","html_id":"+(duration:Duration):TimePoint-instance-method","name":"+","doc":"Returns a new `TimePoint` to which the given `Duration` is added.\n\nDoesn't truncate result to the duration precision.","summary":"<p>Returns a new <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> to which the given <code><a href=\"../Quartz/Duration.html\">Duration</a></code> is added.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"args_string":"(duration : Duration) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L278","def":{"name":"+","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"dup.advance(duration, truncate: false)"}},{"id":"-(duration:Duration):TimePoint-instance-method","html_id":"-(duration:Duration):TimePoint-instance-method","name":"-","doc":"Returns a new `TimePoint` to which the given `Duration` is subtracted.\n\nDoesn't truncate result to the duration precision.","summary":"<p>Returns a new <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> to which the given <code><a href=\"../Quartz/Duration.html\">Duration</a></code> is subtracted.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"args_string":"(duration : Duration) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L285","def":{"name":"-","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"dup.advance(-duration, truncate: false)"}},{"id":"-(other:TimePoint):Duration-instance-method","html_id":"-(other:TimePoint):Duration-instance-method","name":"-","doc":"Measure the difference between `self` and another instance of `self`.\nThe difference is expressed by a `Duration` value.\n\nIf the exact difference between the time points cannot be represented, an\ninfinite `Duration` is returned.\n\nSee also `#gap`.","summary":"<p>Measure the difference between <code>self</code> and another instance of <code>self</code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"args_string":"(other : TimePoint) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L296","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"difference(with: other, approximate: false)"}},{"id":"(other:TimePoint)-instance-method","html_id":"(other:TimePoint)-instance-method","name":"<=>","doc":"Comparison operator","summary":"<p>Comparison operator</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"args_string":"(other : TimePoint)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L410","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"diff = (@precision - other.precision)\nprecision = @precision\nlhs_size, rhs_size = if @precision < other.precision\n  {self.size, diff + other.size}\nelse\n  precision = other.precision\n  {diff + self.size, other.size}\nend\nif lhs_size < rhs_size\n  -1\nelse\n  if lhs_size > rhs_size\n    1\n  else\n    cmp = 0\n    max = Math.max(lhs_size, rhs_size)\n    precision = precision + max\n    max.downto(0) do |i|\n      lhs = self[precision]\n      rhs = other[precision]\n      if lhs < rhs\n        cmp = -1\n        break\n      else\n        if lhs > rhs\n          cmp = 1\n          break\n        end\n      end\n      precision = precision - 1\n    end\n    cmp\n  end\nend\n"}},{"id":"[](scale:Scale):Int16-instance-method","html_id":"[](scale:Scale):Int16-instance-method","name":"[]","doc":"Returns the integer corresponding to the indicated precision, or zero if\nnot in bounds.","summary":"<p>Returns the integer corresponding to the indicated precision, or zero if not in bounds.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"args_string":"(scale : Scale) : Int16","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L82","def":{"name":"[]","args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16","visibility":"Public","body":"at(scale) do\n  0_i16\nend"}},{"id":"[](i:Int):Int16-instance-method","html_id":"[](i:Int):Int16-instance-method","name":"[]","doc":"Returns the integer at the corresponding index following the little-endian\nrepresentation (0 is the least significant).\n\nRaises if the given index is not in bounds.","summary":"<p>Returns the integer at the corresponding index following the little-endian representation (0 is the least significant).</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Int16","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L105","def":{"name":"[]","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16","visibility":"Public","body":"@magnitude[i]"}},{"id":"[]?(scale:Scale):Int16?-instance-method","html_id":"[]?(scale:Scale):Int16?-instance-method","name":"[]?","doc":"Returns the integer corresponding to the indicated precision, or `nil`.","summary":"<p>Returns the integer corresponding to the indicated precision, or <code>nil</code>.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"args_string":"(scale : Scale) : Int16?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L87","def":{"name":"[]?","args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16 | ::Nil","visibility":"Public","body":"at(scale) do\n  nil\nend"}},{"id":"[]?(i:Int):Int16?-instance-method","html_id":"[]?(i:Int):Int16?-instance-method","name":"[]?","doc":"Returns the integer at the corresponding index following the little-endian\nrepresentation (0 is the least significant).\n\nReturns `nil` if given index is not in bounds.","summary":"<p>Returns the integer at the corresponding index following the little-endian representation (0 is the least significant).</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Int16?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L113","def":{"name":"[]?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int16 | ::Nil","visibility":"Public","body":"@magnitude[i]?"}},{"id":"advance(byduration:Duration,truncate:Bool=true):TimePoint-instance-method","html_id":"advance(byduration:Duration,truncate:Bool=true):TimePoint-instance-method","name":"advance","doc":"Multiscale advancement - Adds the given `Duration` to `self`.\n\nIf the advancement duration is zero, returns `self`. Advances according to\nthe duration value otherwise.\n\nIf the *truncate* parameter is set to `true`, the time point is truncated\nat the precision level of the duration (e.g. all digits less significant are\ndiscarded). Otherwise, yields exact results.\n\nSee also `#+`, `#-`.","summary":"<p>Multiscale advancement - Adds the given <code><a href=\"../Quartz/Duration.html\">Duration</a></code> to <code>self</code>.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"},{"name":"truncate","doc":null,"default_value":"true","external_name":"truncate","restriction":"Bool"}],"args_string":"(by duration : Duration, truncate : Bool = <span class=\"n\">true</span>) : TimePoint","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L133","def":{"name":"advance","args":[{"name":"duration","doc":null,"default_value":"","external_name":"by","restriction":"Duration"},{"name":"truncate","doc":null,"default_value":"true","external_name":"truncate","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"TimePoint","visibility":"Public","body":"precision = duration.precision\nif duration.zero?\n  return self\nend\nif precision < @precision\n  refine_to!(precision)\nelse\n  if @precision < precision\n    if truncate\n      coarse_to!(precision)\n    end\n    expand_to!(precision)\n  else\n    if zero?\n      @precision = precision\n    end\n  end\nend\nmultiplier = duration.multiplier\ni = @precision - precision\nif multiplier > 0\n  carry = 0_i64\n  while (multiplier != 0) || (carry != 0)\n    n = (multiplier % BASE)\n    if i == @magnitude.size\n      @magnitude << 0_i16\n    end\n    carry = carry + (@magnitude[i] + n)\n    @magnitude[i] = (carry % BASE).to_i16\n    carry = carry // BASE\n    multiplier = multiplier // BASE\n    i = i + 1\n  end\n  if @magnitude[0] == 0_i16\n    coarsen!\n  end\nelse\n  carry = 0_i64\n  multiplier = multiplier.abs\n  while (multiplier != 0) || (carry != 0)\n    n = (multiplier % BASE)\n    carry = (carry + @magnitude[i]) - n\n    @magnitude[i] = (carry % BASE).to_i16\n    carry = carry // BASE\n    multiplier = multiplier // BASE\n    i = i + 1\n  end\n  if @magnitude[0] == 0_i16\n    coarsen!\n  end\n  if @magnitude.last == 0_i16\n    trim!\n  end\nend\nself\n"}},{"id":"at(index:Int,&block:->Int16)-instance-method","html_id":"at(index:Int,&amp;block:-&gt;Int16)-instance-method","name":"at","doc":"Returns the element at the given *index*, if in bounds,\notherwise executes the given block and returns its value.","summary":"<p>Returns the element at the given <em>index</em>, if in bounds, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int, &block :  -> Int16)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L119","def":{"name":"at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> Int16)"},"return_type":"","visibility":"Public","body":"@magnitude.at(index, &block)"}},{"id":"at(scale:Scale,&)-instance-method","html_id":"at(scale:Scale,&amp;)-instance-method","name":"at","doc":"Returns the element at the given *precision*, if in bounds,\notherwise executes the given block and returns its value.","summary":"<p>Returns the element at the given <em>precision</em>, if in bounds, otherwise executes the given block and returns its value.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"args_string":"(scale : Scale, &)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L93","def":{"name":"at","args":[{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if @precision <= scale && scale < (@precision + @magnitude.size)\n  @magnitude[scale - @precision]\nelse\n  yield\nend"}},{"id":"coarse_to!(precision:Scale)-instance-method","html_id":"coarse_to!(precision:Scale)-instance-method","name":"coarse_to!","doc":"Discards all digits less significant than *given* precision.","summary":"<p>Discards all digits less significant than <em>given</em> precision.</p>","abstract":false,"args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(precision : Scale)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L482","def":{"name":"coarse_to!","args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"diff = (precision - @precision)\n@precision = precision\nif diff < @magnitude.size\n  diff.times do\n    @magnitude.shift\n  end\nend\n"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Returns a shallow copy of `self`.","summary":"<p>Returns a shallow copy of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L76","def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"TimePoint.new(@magnitude.dup, @precision)"}},{"id":"duration_from_phase(phase:Duration):Duration-instance-method","html_id":"duration_from_phase(phase:Duration):Duration-instance-method","name":"duration_from_phase","doc":"Converts a planned phase (offset from the current epoch) to a planned\nduration relative to `self`.","summary":"<p>Converts a planned phase (offset from the current epoch) to a planned duration relative to <code>self</code>.</p>","abstract":false,"args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Duration"}],"args_string":"(phase : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L225","def":{"name":"duration_from_phase","args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"multiplier = phase.multiplier - (epoch_phase(phase.precision))\nif multiplier < 0\n  multiplier = multiplier + Duration::MULTIPLIER_LIMIT\nend\nDuration.new(multiplier, phase.precision)\n"}},{"id":"epoch_phase(precision:Scale):Int64-instance-method","html_id":"epoch_phase(precision:Scale):Int64-instance-method","name":"epoch_phase","doc":"Returns the epoch phase, which represents the number of time quanta which\nseparates `self` from the beginning of the current epoch.","summary":"<p>Returns the epoch phase, which represents the number of time quanta which separates <code>self</code> from the beginning of the current epoch.</p>","abstract":false,"args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"args_string":"(precision : Scale) : Int64","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L259","def":{"name":"epoch_phase","args":[{"name":"precision","doc":null,"default_value":"","external_name":"precision","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int64","visibility":"Public","body":"base = @precision.level\nupper_limit = base + @magnitude.size\nmultiplier = 0_i64\nDuration::EPOCH.times do |i|\n  level = precision.level + i\n  multiplier = multiplier + ((Scale::FACTOR ** i) * (if base <= level && level < upper_limit\n    @magnitude[level - base]\n  else\n    0_i16\n  end))\nend\nmultiplier\n"}},{"id":"gap(other:TimePoint):Duration-instance-method","html_id":"gap(other:TimePoint):Duration-instance-method","name":"gap","doc":"Measure the difference between `self` and another instance of `self`.\nThe difference is expressed by a `Duration` value.\n\nIf the exact difference between the time points cannot be represented, an\napproximation is returned.\n\nSee also `#-`.","summary":"<p>Measure the difference between <code>self</code> and another instance of <code>self</code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"args_string":"(other : TimePoint) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L307","def":{"name":"gap","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"TimePoint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"difference(with: other, approximate: true)"}},{"id":"phase_from_duration(duration:Duration):Duration-instance-method","html_id":"phase_from_duration(duration:Duration):Duration-instance-method","name":"phase_from_duration","doc":"Converts a planned duration to a planned phase.\n\nThe planned phase represents an offset from the current epoch relative to\n`self`.","summary":"<p>Converts a planned duration to a planned phase.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"args_string":"(duration : Duration) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L191","def":{"name":"phase_from_duration","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"multiplier = duration.multiplier\nprecision = multiplier == 0 ? @precision : duration.precision\nmultiplier = (epoch_phase(precision)) + multiplier\nmaximized = false\nunbounded = false\nwhile (!maximized) && (!unbounded)\n  carry = 0\n  if multiplier >= Duration::MULTIPLIER_LIMIT\n    multiplier = multiplier - Duration::MULTIPLIER_LIMIT\n    carry = 1\n  end\n  if (multiplier % Scale::FACTOR) != 0\n    maximized = true\n  else\n    if (multiplier == 0) && (precision + Duration::EPOCH) >= (@precision + size)\n      if carry == 0\n        unbounded = true\n      end\n    end\n  end\n  if (!maximized) && (!unbounded)\n    multiplier = multiplier // Scale::FACTOR\n    multiplier = multiplier + ((Scale::FACTOR ** (Duration::EPOCH - 1)) * (self[precision + Duration::EPOCH] + carry))\n    precision = precision + 1\n  end\nend\nif unbounded\n  precision = Scale::BASE\nend\nDuration.new(multiplier, precision)\n"}},{"id":"precision:Scale-instance-method","html_id":"precision:Scale-instance-method","name":"precision","doc":"Returns the precision associated with the least significant number.","summary":"<p>Returns the precision associated with the least significant number.</p>","abstract":false,"args":[],"args_string":" : Scale","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L25","def":{"name":"precision","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Scale","visibility":"Public","body":"@precision"}},{"id":"refined_duration(duration:Duration,refined:Scale):Duration-instance-method","html_id":"refined_duration(duration:Duration,refined:Scale):Duration-instance-method","name":"refined_duration","doc":"Refines a planned `Duration` to match another planned duration precision,\nrelative to `self`.\n\nNote: The implementation diverge from the paper algoithm.","summary":"<p>Refines a planned <code><a href=\"../Quartz/Duration.html\">Duration</a></code> to match another planned duration precision, relative to <code>self</code>.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"},{"name":"refined","doc":null,"default_value":"","external_name":"refined","restriction":"Scale"}],"args_string":"(duration : Duration, refined : Scale) : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L239","def":{"name":"refined_duration","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Duration"},{"name":"refined","doc":null,"default_value":"","external_name":"refined","restriction":"Scale"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"precision = duration.precision\nmultiplier = duration.multiplier\nif multiplier > 0\n  while multiplier < Duration::MULTIPLIER_LIMIT && precision > refined\n    precision = precision - 1\n    multiplier = (Scale::FACTOR * multiplier) - self[precision]\n  end\nend\nif multiplier < Duration::MULTIPLIER_LIMIT\n  Duration.new(multiplier, refined)\nelse\n  Duration::INFINITY\nend\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the order of magnitude of `self`, based on its `#precision`\nand the number of stored integers on a base-1000 scale.","summary":"<p>Returns the order of magnitude of <code>self</code>, based on its <code><a href=\"../Quartz/TimePoint.html#precision:Scale-instance-method\">#precision</a></code> and the number of stored integers on a base-1000 scale.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L71","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@magnitude.size"}},{"id":"to_big_i-instance-method","html_id":"to_big_i-instance-method","name":"to_big_i","doc":"Convert this `TimePoint` to a `BigInt`.","summary":"<p>Convert this <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> to a <code>BigInt</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L398","def":{"name":"to_big_i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"str = if zero?\n  '0'\nelse\n  String.build do |io|\n    a.reverse_each do |digit|\n      io.printf(\"%03d\", digit)\n    end\n  end\nend\nBigInt.new(str, BASE.to_i)\n"}},{"id":"to_f-instance-method","html_id":"to_f-instance-method","name":"to_f","doc":"Convert `self` to a `Float64`. Express values in a base precision, e.g.\n`Scale::BASE`.\n\nNote: this conversion can lose information about the overall magnitude of\n`self`.","summary":"<p>Convert <code>self</code> to a <code>Float64</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L387","def":{"name":"to_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @precision < Scale::BASE\n  to_i64 / (BASE.to_i64 ** (Scale::BASE - @precision))\nelse\n  if @precision > Scale::BASE\n    (to_i64 * (BASE.to_i64 ** (@precision - Scale::BASE))).to_f\n  else\n    to_i64.to_f\n  end\nend"}},{"id":"to_i-instance-method","html_id":"to_i-instance-method","name":"to_i","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L378","def":{"name":"to_i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_i32"}},{"id":"to_i32-instance-method","html_id":"to_i32-instance-method","name":"to_i32","doc":"Convert this `TimePoint` to an `Int32`.\n\nNote: this conversion can lose information about the overall magnitude of\n`self` as well as return a result with the opposite sign.","summary":"<p>Convert this <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> to an <code>Int32</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L374","def":{"name":"to_i32","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_i64.to_i32"}},{"id":"to_i64-instance-method","html_id":"to_i64-instance-method","name":"to_i64","doc":"Convert this `TimePoint` to an `Int64`. Express values relative to\nits `#precision`.\n\nNote: this conversion can lose information about the overall magnitude of\n`self` as well as return a result with the opposite sign.","summary":"<p>Convert this <code><a href=\"../Quartz/TimePoint.html\">TimePoint</a></code> to an <code>Int64</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L362","def":{"name":"to_i64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = 0_i64\n@magnitude.each_with_index(0) do |digit, i|\n  n = n + (digit.to_i64 * (BASE.to_i64 ** i))\nend\nn\n"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L449","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if zero?\n  io << '0'\nelse\n  iterator = @magnitude.reverse_each\n  io << iterator.next\n  if @magnitude.size > 1\n    iterator.map do |d|\n      \"%03d\" % d\n    end.join(\"\", io)\n  end\nend\nif @precision.level != 0\n  io << 'e'\n  io << (@precision.level < 0 ? '-' : '+')\n  io << (@precision.level * 3).abs\nend\n"}},{"id":"zero?-instance-method","html_id":"zero?-instance-method","name":"zero?","doc":"Whether `self` is a zero time point value.","summary":"<p>Whether <code>self</code> is a zero time point value.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/time_point.cr#L65","def":{"name":"zero?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@magnitude.all?(&.zero?)"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transferable","path":"Quartz/Transferable.html","kind":"module","full_name":"Quartz::Transferable","name":"Transferable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/types.cr","line_number":38,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/types.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Coupleable","kind":"module","full_name":"Quartz::Coupleable","name":"Coupleable"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"The `Transferable` module is used in Quartz as a marker interface to denote\ntypes that may be transmitted between two `Port`s through couplings.\nThe common types included in the union `Type` can be transferred, but if\nyou need to extend those types, `Transferable` marker module should be\nincluded.\n\nUntil crystal compiler is able to store virtual types as an ivar, we use\nthis workaround (see crystal issue #1839).\n\nUsage:\n```\nclass MyType\n  include Quartz::Transferable\n  # ...\nend\n\nclass SenderModel < Quartz::AtomicModel\n  output :oport\n\n  def output\n    post MyType.new, on: :oport\n  end\nend\n```\n\nFor existing types that are not included in the union `Type`, you can\nre-open its definition and include `Transferable`:\n```\nstruct BigInt\n  include Transferable\nend\n```","summary":"<p>The <code><a href=\"../Quartz/Transferable.html\">Transferable</a></code> module is used in Quartz as a marker interface to denote types that may be transmitted between two <code><a href=\"../Quartz/Port.html\">Port</a></code>s through couplings.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Transitions","path":"Quartz/Transitions.html","kind":"module","full_name":"Quartz::Transitions","name":"Transitions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/transitions.cr","line_number":4,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"This mixin provides models with several transition methods\nin line to the PDEVS functions definition (δext, δint, δcon, λ and ta).","summary":"<p>This mixin provides models with several transition methods in line to the PDEVS functions definition (δext, δint, δcon, λ and ta).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"confluent_transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"confluent_transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"confluent_transition","doc":"This is the default definition of the confluent transition. Here the\ninternal transition is allowed to occur and this is followed by the\neffect of the external transition on the resulting state.\n\nOverride this method to obtain a different behavior. For example, the\nopposite order of effects (external transition before internal\ntransition). Of course you can override without reference to the other\ntransitions.","summary":"<p>This is the default definition of the confluent transition.</p>","abstract":false,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr#L44","def":{"name":"confluent_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"internal_transition\nexternal_transition(messages)\n"}},{"id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","html_id":"external_transition(messages:Hash(InputPort,Array(Any)))-instance-method","name":"external_transition","doc":"The external transition function (δext)\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef external_transition(messages)\n  messages.each { |port, value|\n    puts \"#{port} => #{value}\"\n  }\n\n  self.sigma = 0\nend\n```","summary":"<p>The external transition function (δext)</p>","abstract":false,"args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"args_string":"(messages : Hash(InputPort, Array(Any)))","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr#L20","def":{"name":"external_transition","args":[{"name":"messages","doc":null,"default_value":"","external_name":"messages","restriction":"Hash(InputPort, Array(Any))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"internal_transition-instance-method","html_id":"internal_transition-instance-method","name":"internal_transition","doc":"Internal transition function (δint), called when the model should be\nactivated, e.g when `#elapsed` reaches `#time_advance`\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef internal_transition\n  self.sigma = Quartz::INFINITY\nend\n```","summary":"<p>Internal transition function (δint), called when the model should be activated, e.g when <code>#elapsed</code> reaches <code><a href=\"../Quartz/Transitions.html#time_advance:Duration-instance-method\">#time_advance</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr#L34","def":{"name":"internal_transition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"output-instance-method","html_id":"output-instance-method","name":"output","doc":"The output function (λ)\n\nOverride this method to implement the appropriate behavior of\nyour model. See `#post` to send values to output ports.\n\nExample:\n```\ndef output\n  post(@some_value, :output)\nend","summary":"<p>The output function (λ)</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr#L75","def":{"name":"output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"time_advance:Duration-instance-method","html_id":"time_advance:Duration-instance-method","name":"time_advance","doc":"Time advance function (ta), called after each transition to give a\nchance to *self* to be active. By default returns `#sigma`\n\nOverride this method to implement the appropriate behavior of\nyour model.\n\nExample:\n```\ndef time_advance\n  self.sigma\nend\n```","summary":"<p>Time advance function (ta), called after each transition to give a chance to <em>self</em> to be active.</p>","abstract":false,"args":[],"args_string":" : Duration","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/transitions.cr#L61","def":{"name":"time_advance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Duration","visibility":"Public","body":"@sigma"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/UnobservablePortError","path":"Quartz/UnobservablePortError.html","kind":"class","full_name":"Quartz::UnobservablePortError","name":"UnobservablePortError","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":14,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiable","path":"Quartz/Verifiable.html","kind":"module","full_name":"Quartz::Verifiable","name":"Verifiable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/verifiable.cr","line_number":27,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/AtomicModel","kind":"class","full_name":"Quartz::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DTSS/AtomicModel","kind":"class","full_name":"Quartz::DTSS::AtomicModel","name":"AtomicModel"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/MultiComponent/Component","kind":"class","full_name":"Quartz::MultiComponent::Component","name":"Component"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":"Provides a runtime verification framework for your models.\n\nExample:\n```\nclass WeightModel\n  include Quartz::Verifiable\n\n  property weight : Float64 = 0.0 # in kg\n  check :weight, numericality: {greater_than: 40, lesser_than: 160}\nend\n\nmodel = WeightModel.new\nmodel.weight = 75.0\nmodel.valid?   # => true\nmodel.invalid? # => false\n\nmodel.weight = 200.0\nmodel.valid?          # => false\nmodel.invalid?        # => true\nmodel.errors.messages # => { :weight => [\"must be lesser than 160\"] }\n```","summary":"<p>Provides a runtime verification framework for your models.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"clear_errors-instance-method","html_id":"clear_errors-instance-method","name":"clear_errors","doc":"Clears attribute error messages.","summary":"<p>Clears attribute error messages.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr#L122","def":{"name":"clear_errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors.try(&.clear)"}},{"id":"errors-instance-method","html_id":"errors-instance-method","name":"errors","doc":"Returns the `VerificationErrors` object that holds all information about\nattribute error messages.","summary":"<p>Returns the <code><a href=\"../Quartz/VerificationErrors.html\">VerificationErrors</a></code> object that holds all information about attribute error messages.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr#L119","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @errors).nil?\n  @errors = (Quartz::VerificationErrors.new)\nelse\n  value\nend"}},{"id":"invalid?(context:Symbol?=nil):Bool-instance-method","html_id":"invalid?(context:Symbol?=nil):Bool-instance-method","name":"invalid?","doc":"Performs the opposite of `#valid?`. Returns *true* if errors were added,\n*false* otherwise.\n\nUsage:\n```\nclass MyModel\n  include Quartz::Verifiable\n\n  property :phase : String?\n  check :phase, presence: true\nend\n\nmodel = MyModel.new\nmodel.phase = \"\"\nmodel.invalid?          # => true\nmodel.phase = \"idle\"\nmodel.invalid?          # => false\n```\n\nContext can optionally be supplied to define which verifiers to test\nagainst (the context is defined on the verifiers using *on:* option).","summary":"<p>Performs the opposite of <code><a href=\"../Quartz/Verifiable.html#valid?(context:Symbol?=nil):Bool-instance-method\">#valid?</a></code>.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":"Symbol | ::Nil"}],"args_string":"(context : Symbol? = <span class=\"n\">nil</span>) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr#L156","def":{"name":"invalid?","args":[{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":"Symbol | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(valid?(context))"}},{"id":"valid?(context:Symbol?=nil):Bool-instance-method","html_id":"valid?(context:Symbol?=nil):Bool-instance-method","name":"valid?","doc":"Runs all the specified verifications and returns *true* if no errors were\nadded otherwise *false*.\n","summary":"<p>Runs all the specified verifications and returns <em>true</em> if no errors were added otherwise <em>false</em>.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":"Symbol | ::Nil"}],"args_string":"(context : Symbol? = <span class=\"n\">nil</span>) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiable.cr#L129","def":{"name":"valid?","args":[{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":"Symbol | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"errors.clear\nrun_verifiers(context)\nerrors.empty?\n"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/VerificationErrors","path":"Quartz/VerificationErrors.html","kind":"class","full_name":"Quartz::VerificationErrors","name":"VerificationErrors","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/errors.cr","line_number":37,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/RomainFranceschini/quartz/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"[](attribute)-instance-method","html_id":"[](attribute)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""}],"args_string":"(attribute)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L87","def":{"name":"[]","args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@messages.try do |m|\n  if m.has_key?(attribute)\n    m[attribute]\n  end\nend"}},{"id":"add(attribute:Symbol,message:String)-instance-method","html_id":"add(attribute:Symbol,message:String)-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(attribute : Symbol, message : String)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L61","def":{"name":"add","args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"messages[attribute] << message"}},{"id":"add(attribute:Symbol,*errors:String)-instance-method","html_id":"add(attribute:Symbol,*errors:String)-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"},{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"String"}],"args_string":"(attribute : Symbol, *errors : String)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L65","def":{"name":"add","args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"},{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"errors.each do |message|\n  add(attribute, message)\nend"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L71","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@messages.try(&.clear)"}},{"id":"each(&)-instance-method","html_id":"each(&amp;)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L53","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@messages.try(&.each do |attribute, messages|\n  messages.each do |message|\n    yield {attribute, message}\n  end\nend)"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if `self` is empty, `false` otherwise.\n\n```\n([] of Int32).empty? # => true\n([1]).empty?         # => false\n```","summary":"<p>Returns <code>true</code> if <code>self</code> is empty, <code>false</code> otherwise.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L75","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@messages.nil? || @messages.not_nil!.empty?"}},{"id":"full_messages-instance-method","html_id":"full_messages-instance-method","name":"full_messages","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L49","def":{"name":"full_messages","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"map do |attribute, message|\n  \"'#{attribute}' #{message}\"\nend"}},{"id":"include?(attribute:Symbol)-instance-method","html_id":"include?(attribute:Symbol)-instance-method","name":"include?","doc":null,"summary":null,"abstract":false,"args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"}],"args_string":"(attribute : Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L79","def":{"name":"include?","args":[{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if m = @messages\n  (m.has_key?(attribute)) && (!m[attribute].empty?)\nelse\n  false\nend"}},{"id":"messages-instance-method","html_id":"messages-instance-method","name":"messages","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L43","def":{"name":"messages","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@messages || (@messages = Hash(Symbol, Array(String)).new do |h, k|\n  h[k] = Array(String).new\nend)"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/errors.cr#L91","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if m = @messages\n  m.values.flatten.size\nelse\n  0\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers","path":"Quartz/Verifiers.html","kind":"module","full_name":"Quartz::Verifiers","name":"Verifiers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/verifiers/checker.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr"},{"filename":"quartz/verifiers/presence.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/presence.cr"},{"filename":"quartz/verifiers/numericality.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","path":"Quartz/Verifiers/EachChecker.html","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/RuntimeChecker","kind":"class","full_name":"Quartz::Verifiers::RuntimeChecker","name":"RuntimeChecker"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/RuntimeChecker","kind":"class","full_name":"Quartz::Verifiers::RuntimeChecker","name":"RuntimeChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/verifiers/checker.cr","line_number":87,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/NumericalityChecker","kind":"class","full_name":"Quartz::Verifiers::NumericalityChecker","name":"NumericalityChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/PresenceChecker","kind":"class","full_name":"Quartz::Verifiers::PresenceChecker","name":"PresenceChecker"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers","kind":"module","full_name":"Quartz::Verifiers","name":"Verifiers"},"doc":"`EachChecker` is a verifier which iterates through the given\n*attributes* invoking the `#check_each` method passing in the\nmodel, attribute and value.\n\nAll provided verifiers are built on top of this verifier.","summary":"<p><code><a href=\"../../Quartz/Verifiers/EachChecker.html\">EachChecker</a></code> is a verifier which iterates through the given <em>attributes</em> invoking the <code><a href=\"../../Quartz/Verifiers/EachChecker.html#check_each(model,attribute,value)-instance-method\">#check_each</a></code> method passing in the model, attribute and value.</p>","class_methods":[],"constructors":[{"id":"new(*attributes:Symbol,**kwargs)-class-method","html_id":"new(*attributes:Symbol,**kwargs)-class-method","name":"new","doc":"Returns a new verifier instance. The given *attributes* are made\navailable through the `#attributes` getter.","summary":"<p>Returns a new verifier instance.</p>","abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"args_string":"(*attributes : Symbol, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L98","def":{"name":"new","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*attributes, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"allow_nil?:Bool-instance-method","html_id":"allow_nil?:Bool-instance-method","name":"allow_nil?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L92","def":{"name":"allow_nil?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@allow_nil"}},{"id":"attributes:Array(Symbol)-instance-method","html_id":"attributes:Array(Symbol)-instance-method","name":"attributes","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Symbol)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L88","def":{"name":"attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Symbol)","visibility":"Public","body":"@attributes"}},{"id":"check(model):Bool-instance-method","html_id":"check(model):Bool-instance-method","name":"check","doc":"Performs verification on the supplied model. By default this will call\n`#check_each` to determine validity therefore subclasses should\noverride `#check_each` with verification logic.","summary":"<p>Performs verification on the supplied model.</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L108","def":{"name":"check","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"model_attributes = model.state.to_named_tuple\n@attributes.each do |attribute|\n  value = model_attributes[attribute]\n  if (  value.nil? && @allow_nil)\n    next\n  end\n  check_each(model, attribute, value)\nend\nmodel.errors.empty?\n"}},{"id":"check_each(model,attribute,value)-instance-method","html_id":"check_each(model,attribute,value)-instance-method","name":"check_each","doc":"Override this method in subclasses with the verification logic, adding\nerrors to the records *errors* array where necessary.","summary":"<p>Override this method in subclasses with the verification logic, adding errors to the records <em>errors</em> array where necessary.</p>","abstract":true,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(model, attribute, value)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L120","def":{"name":"check_each","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/NumericalityChecker","path":"Quartz/Verifiers/NumericalityChecker.html","kind":"class","full_name":"Quartz::Verifiers::NumericalityChecker","name":"NumericalityChecker","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/RuntimeChecker","kind":"class","full_name":"Quartz::Verifiers::RuntimeChecker","name":"RuntimeChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/verifiers/numericality.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VALID_KEYS","name":"VALID_KEYS","value":"{ {:greater_than, :gt, :>}, {:lesser_than, :lt, :<}, {:greater_than_or_equal_to, :gte, :>=}, {:lesser_than_or_equal_to, :lte, :<=}, {:equal_to, :==}, {:not_equal_to, :!=}, {:negative}, {:positive}, {:zero}, {:not_zero}, {:finite}, {:infinite} }","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers","kind":"module","full_name":"Quartz::Verifiers","name":"Verifiers"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(*attributes,**kwargs)-class-method","html_id":"new(*attributes,**kwargs)-class-method","name":"new","doc":"TODO what about big numbers?\nTODO what about comparison within delta ?\nTODO option for float comparison within error","summary":"<p><span class=\"flag orange\">TODO</span>  what about big numbers? TODO what about comparison within delta ? TODO option for float comparison within error</p>","abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"args_string":"(*attributes, **kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr#L24","def":{"name":"new","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*attributes, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check_each(model,attribute,value)-instance-method","html_id":"check_each(model,attribute,value)-instance-method","name":"check_each","doc":"Override this method in subclasses with the verification logic, adding\nerrors to the records *errors* array where necessary.","summary":"<p>Override this method in subclasses with the verification logic, adding errors to the records <em>errors</em> array where necessary.</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(model, attribute, value)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr#L38","def":{"name":"check_each","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.nil? && allow_nil?\n  return\nend\nif value.is_a?(Number)\n  if value.responds_to?(:\"nan?\")\n    if value.nan?\n      if allow_nil?\n        return\n      end\n      model.errors.add(attribute, \"is not a number\")\n    end\n  end\n  if target = @targets[:greater_than]?\n    if value <= target\n      model.errors.add(attribute, \"must be greater than #{target}\")\n    end\n  end\n  if target = targets[:lesser_than]?\n    if value >= target\n      model.errors.add(attribute, \"must be lesser than #{target}\")\n    end\n  end\n  if target = targets[:greater_than_or_equal_to]?\n    if value < target\n      model.errors.add(attribute, \"must be greater than or equal to #{target}\")\n    end\n  end\n  if target = targets[:lesser_than_or_equal_to]?\n    if value > target\n      model.errors.add(attribute, \"must be lesser than or equal to #{target}\")\n    end\n  end\n  if target = targets[:equal_to]?\n    if value != target\n      model.errors.add(attribute, \"must be equal to #{target}\")\n    end\n  else\n    if target = targets[:not_equal_to]?\n      if value == target\n        model.errors.add(attribute, \"must be other than #{target}\")\n      end\n    end\n  end\n  if target = targets[:positive]?\n    if value < 0\n      model.errors.add(attribute, \"must be positive\")\n    end\n  else\n    if target = targets[:zero]?\n      if value != 0\n        model.errors.add(attribute, \"must be zero\")\n      end\n    else\n      if target = targets[:negative]?\n        if value >= 0\n          model.errors.add(attribute, \"must be negative\")\n        end\n      else\n        if target = targets[:not_zero]?\n          if value == 0\n            model.errors.add(attribute, \"must be other than 0\")\n          end\n        end\n      end\n    end\n  end\n  if target = targets[:finite]?\n    if value.is_a?(Float)\n      if value.infinite?\n        model.errors.add(attribute, \"must be finite\")\n      end\n    end\n  else\n    if target = targets[:infinite]?\n      if value.is_a?(Float) && value.finite?\n      else\n        model.errors.add(attribute, \"must be infinite\")\n      end\n    end\n  end\nend\n"}},{"id":"targets:Hash(Symbol,Number::Primitive)-instance-method","html_id":"targets:Hash(Symbol,Number::Primitive)-instance-method","name":"targets","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(Symbol, Number::Primitive)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/numericality.cr#L4","def":{"name":"targets","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Symbol, Number::Primitive)","visibility":"Public","body":"@targets"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/PresenceChecker","path":"Quartz/Verifiers/PresenceChecker.html","kind":"class","full_name":"Quartz::Verifiers::PresenceChecker","name":"PresenceChecker","abstract":false,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/RuntimeChecker","kind":"class","full_name":"Quartz::Verifiers::RuntimeChecker","name":"RuntimeChecker"},{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/verifiers/presence.cr","line_number":3,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/presence.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers","kind":"module","full_name":"Quartz::Verifiers","name":"Verifiers"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"check_each(model,attribute,value)-instance-method","html_id":"check_each(model,attribute,value)-instance-method","name":"check_each","doc":"Override this method in subclasses with the verification logic, adding\nerrors to the records *errors* array where necessary.","summary":"<p>Override this method in subclasses with the verification logic, adding errors to the records <em>errors</em> array where necessary.</p>","abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(model, attribute, value)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/presence.cr#L4","def":{"name":"check_each","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.nil?\n  model.errors.add(attribute, \"can't be nil\")\nelse\n  if value.responds_to?(:\"empty?\")\n    if value.empty?\n      model.errors.add(attribute, \"can't be empty\")\n    end\n  else\n    if value.is_a?(Bool)\n      if value\n      else\n        model.errors.add(attribute, \"can't be false\")\n      end\n    else\n      if value.responds_to?(:\"nan?\")\n        if value.nan?\n          model.errors.add(attribute, \"can't be NAN\")\n        end\n      else\n        if value.responds_to?(:size)\n          if value.size == 0\n            model.errors.add(attribute, \"size can't be 0\")\n          end\n        end\n      end\n    end\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/RuntimeChecker","path":"Quartz/Verifiers/RuntimeChecker.html","kind":"class","full_name":"Quartz::Verifiers::RuntimeChecker","name":"RuntimeChecker","abstract":true,"superclass":{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/RomainFranceschini/quartz/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/RomainFranceschini/quartz/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"quartz/verifiers/checker.cr","line_number":55,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers/EachChecker","kind":"class","full_name":"Quartz::Verifiers::EachChecker","name":"EachChecker"}],"including_types":[],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Verifiers","kind":"module","full_name":"Quartz::Verifiers","name":"Verifiers"},"doc":"A simple base class that can be used along with `Verifiable#check_with`\n\n```\nclass MyModel\n  include Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < RuntimeChecker\n  def check(model)\n    if some_complex_logic\n      model.errors.add(:base, \"This model is invalid\")\n    end\n  end\n\n  private def some_complex_logic\n    # ...\n  end\nend\n```\n\nAny class that inherits from `RuntimeChecker` must implement a\nmethod called `#check` which accepts a *model*.\n\n```\nclass MyModel\n  include Verifiable\n  check_with MyVerifier\nend\n\nclass MyVerifier < RuntimeChecker\n  def check(model)\n    model # => The model instance being validated\n  end\nend\n```\n\nTo cause a verification error, you must add to the *model*'s errors\ndirectly from within the verifiers message.\n\n```\nclass MyVerifier < RuntimeChecker\n  def check(model)\n    model.errors.add :attr1, \"This is some custom error message\"\n    model.errors.add :attr2, \"This is some complex validation\"\n    # etc...\n  end\nend\n```\n\nNote that the verifier is initialized only once for the whole application\nlife cycle, and not on each verification run.","summary":"<p>A simple base class that can be used along with <code>Verifiable#check_with</code></p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L65","def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check(model):Bool-instance-method","html_id":"check(model):Bool-instance-method","name":"check","doc":"Override this method in subclasses with verification logic, adding errors\nto the models *errors* array where necessary.","summary":"<p>Override this method in subclasses with verification logic, adding errors to the models <em>errors</em> array where necessary.</p>","abstract":true,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model) : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L79","def":{"name":"check","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":""}},{"id":"contexts:Array(Symbol)?-instance-method","html_id":"contexts:Array(Symbol)?-instance-method","name":"contexts","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Symbol)?","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L57","def":{"name":"contexts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Symbol) | ::Nil","visibility":"Public","body":"@contexts"}},{"id":"strict?:Bool-instance-method","html_id":"strict?:Bool-instance-method","name":"strict?","doc":"Whether this verifier will cause a `StrictVerificationFailed` error to\nbe raised when `#check` returns *false*.","summary":"<p>Whether this verifier will cause a <code><a href=\"../../Quartz/StrictVerificationFailed.html\">StrictVerificationFailed</a></code> error to be raised when <code><a href=\"../../Quartz/Verifiers/RuntimeChecker.html#check(model):Bool-instance-method\">#check</a></code> returns <em>false</em>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/verifiers/checker.cr#L61","def":{"name":"strict?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@strict"}}],"macros":[],"types":[]}]},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/Visitor","path":"Quartz/Visitor.html","kind":"module","full_name":"Quartz::Visitor","name":"Visitor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"quartz/visitor.cr","line_number":2,"url":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr"}],"repository_name":"github.com/RomainFranceschini/quartz","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DirectConnectionVisitor","kind":"class","full_name":"Quartz::DirectConnectionVisitor","name":"DirectConnectionVisitor"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/DotVisitor","kind":"class","full_name":"Quartz::DotVisitor","name":"DotVisitor"},{"html_id":"github.com/RomainFranceschini/quartz/Quartz/ProcessorAllocator","kind":"class","full_name":"Quartz::ProcessorAllocator","name":"ProcessorAllocator"}],"namespace":{"html_id":"github.com/RomainFranceschini/quartz/Quartz","kind":"module","full_name":"Quartz","name":"Quartz"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"accept(model)-instance-method","html_id":"accept(model)-instance-method","name":"accept","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L18","def":{"name":"accept","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"model.accept(self)"}},{"id":"end_visit(model)-instance-method","html_id":"end_visit(model)-instance-method","name":"end_visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L5","def":{"name":"end_visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"visit(model)-instance-method","html_id":"visit(model)-instance-method","name":"visit","doc":null,"summary":null,"abstract":true,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L3","def":{"name":"visit","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"visit_children?(model:Coupler)-instance-method","html_id":"visit_children?(model:Coupler)-instance-method","name":"visit_children?","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Coupler"}],"args_string":"(model : Coupler)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L9","def":{"name":"visit_children?","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"Coupler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"true"}},{"id":"visit_children?(model)-instance-method","html_id":"visit_children?(model)-instance-method","name":"visit_children?","doc":null,"summary":null,"abstract":false,"args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"args_string":"(model)","source_link":"https://github.com/RomainFranceschini/quartz/blob/18713e3309d3da4be7d955b750bee773581e7a1a/src/quartz/visitor.cr#L14","def":{"name":"visit_children?","args":[{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"false"}}],"macros":[],"types":[]}]}]}})